
MKE_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ca4  08007ca4  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  08007ca4  08007ca4  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ca4  08007ca4  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ca4  08007ca4  00017ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ca8  08007ca8  00017ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08007cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000910  20000274  08007f20  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b84  08007f20  00020b84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc26  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c95  00000000  00000000  0002dec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00030b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  00031648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d73  00000000  00000000  00031fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f62a  00000000  00000000  0004bd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008517c  00000000  00000000  0005b36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e04e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029ac  00000000  00000000  000e053c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000274 	.word	0x20000274
 8000128:	00000000 	.word	0x00000000
 800012c:	08007bf8 	.word	0x08007bf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000278 	.word	0x20000278
 8000148:	08007bf8 	.word	0x08007bf8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000194:	f000 f960 	bl	8000458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000198:	f000 f814 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019c:	f7ff ffd6 	bl	800014c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80001a0:	f000 f8e4 	bl	800036c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80001a4:	f005 fa0c 	bl	80055c0 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(100);
 80001a8:	2064      	movs	r0, #100	; 0x64
 80001aa:	f000 f9b7 	bl	800051c <HAL_Delay>
	  USBD_HID_Keybaord_SendReport(&hUsbDevice, kbdPress, 8);
 80001ae:	2208      	movs	r2, #8
 80001b0:	4902      	ldr	r1, [pc, #8]	; (80001bc <main+0x2c>)
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <main+0x30>)
 80001b4:	f005 ff4c 	bl	8006050 <USBD_HID_Keybaord_SendReport>
  {
 80001b8:	e7f6      	b.n	80001a8 <main+0x18>
 80001ba:	bf00      	nop
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000580 	.word	0x20000580

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b094      	sub	sp, #80	; 0x50
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f007 fd08 	bl	8007be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	f107 0314 	add.w	r3, r7, #20
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f4:	2301      	movs	r3, #1
 80001f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000202:	2301      	movs	r3, #1
 8000204:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000206:	2302      	movs	r3, #2
 8000208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000210:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000214:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021a:	4618      	mov	r0, r3
 800021c:	f001 ff66 	bl	80020ec <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000226:	f000 f828 	bl	800027a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2101      	movs	r1, #1
 8000246:	4618      	mov	r0, r3
 8000248:	f002 f9d2 	bl	80025f0 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000252:	f000 f812 	bl	800027a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000256:	2310      	movs	r3, #16
 8000258:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800025a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800025e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fb2a 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800026e:	f000 f804 	bl	800027a <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3750      	adds	r7, #80	; 0x50
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800027e:	b672      	cpsid	i
}
 8000280:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000282:	e7fe      	b.n	8000282 <Error_Handler+0x8>

08000284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <HAL_MspInit+0x5c>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <HAL_MspInit+0x5c>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6193      	str	r3, [r2, #24]
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HAL_MspInit+0x5c>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <HAL_MspInit+0x5c>)
 80002a4:	69db      	ldr	r3, [r3, #28]
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <HAL_MspInit+0x5c>)
 80002a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002ac:	61d3      	str	r3, [r2, #28]
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <HAL_MspInit+0x5c>)
 80002b0:	69db      	ldr	r3, [r3, #28]
 80002b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <HAL_MspInit+0x60>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <HAL_MspInit+0x60>)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010000 	.word	0x40010000

080002e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <NMI_Handler+0x4>

080002ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <HardFault_Handler+0x4>

080002f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <MemManage_Handler+0x4>

080002fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <BusFault_Handler+0x4>

08000300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <UsageFault_Handler+0x4>

08000306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr

08000312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr

0800032a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800032e:	f000 f8d9 	bl	80004e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800033e:	f000 fb4f 	bl	80009e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000290 	.word	0x20000290

0800034c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000352:	f000 fb45 	bl	80009e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000290 	.word	0x20000290

08000360 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <MX_USB_PCD_Init+0x3c>)
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <MX_USB_PCD_Init+0x40>)
 8000374:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_USB_PCD_Init+0x3c>)
 8000378:	2208      	movs	r2, #8
 800037a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <MX_USB_PCD_Init+0x3c>)
 800037e:	2202      	movs	r2, #2
 8000380:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_USB_PCD_Init+0x3c>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <MX_USB_PCD_Init+0x3c>)
 800038a:	2200      	movs	r2, #0
 800038c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_USB_PCD_Init+0x3c>)
 8000390:	2200      	movs	r2, #0
 8000392:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <MX_USB_PCD_Init+0x3c>)
 8000396:	f000 f9f2 	bl	800077e <HAL_PCD_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80003a0:	f7ff ff6b 	bl	800027a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000290 	.word	0x20000290
 80003ac:	40005c00 	.word	0x40005c00

080003b0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a11      	ldr	r2, [pc, #68]	; (8000404 <HAL_PCD_MspInit+0x54>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d11b      	bne.n	80003fa <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <HAL_PCD_MspInit+0x58>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	4a10      	ldr	r2, [pc, #64]	; (8000408 <HAL_PCD_MspInit+0x58>)
 80003c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003cc:	61d3      	str	r3, [r2, #28]
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <HAL_PCD_MspInit+0x58>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]

    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80003da:	2200      	movs	r2, #0
 80003dc:	2100      	movs	r1, #0
 80003de:	2013      	movs	r0, #19
 80003e0:	f000 f997 	bl	8000712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80003e4:	2013      	movs	r0, #19
 80003e6:	f000 f9b0 	bl	800074a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	2014      	movs	r0, #20
 80003f0:	f000 f98f 	bl	8000712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80003f4:	2014      	movs	r0, #20
 80003f6:	f000 f9a8 	bl	800074a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40005c00 	.word	0x40005c00
 8000408:	40021000 	.word	0x40021000

0800040c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800040c:	480c      	ldr	r0, [pc, #48]	; (8000440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800040e:	490d      	ldr	r1, [pc, #52]	; (8000444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000410:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a0a      	ldr	r2, [pc, #40]	; (800044c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000424:	4c0a      	ldr	r4, [pc, #40]	; (8000450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000432:	f7ff ff95 	bl	8000360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000436:	f007 fba5 	bl	8007b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043a:	f7ff fea9 	bl	8000190 <main>
  bx lr
 800043e:	4770      	bx	lr
  ldr r0, =_sdata
 8000440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000444:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8000448:	08007cac 	.word	0x08007cac
  ldr r2, =_sbss
 800044c:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8000450:	20000b84 	.word	0x20000b84

08000454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000454:	e7fe      	b.n	8000454 <ADC1_2_IRQHandler>
	...

08000458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <HAL_Init+0x28>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a07      	ldr	r2, [pc, #28]	; (8000480 <HAL_Init+0x28>)
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000468:	2003      	movs	r0, #3
 800046a:	f000 f947 	bl	80006fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800046e:	200f      	movs	r0, #15
 8000470:	f000 f808 	bl	8000484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000474:	f7ff ff06 	bl	8000284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40022000 	.word	0x40022000

08000484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_InitTick+0x54>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_InitTick+0x58>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4619      	mov	r1, r3
 8000496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049a:	fbb3 f3f1 	udiv	r3, r3, r1
 800049e:	fbb2 f3f3 	udiv	r3, r2, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f95f 	bl	8000766 <HAL_SYSTICK_Config>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ae:	2301      	movs	r3, #1
 80004b0:	e00e      	b.n	80004d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2b0f      	cmp	r3, #15
 80004b6:	d80a      	bhi.n	80004ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004b8:	2200      	movs	r2, #0
 80004ba:	6879      	ldr	r1, [r7, #4]
 80004bc:	f04f 30ff 	mov.w	r0, #4294967295
 80004c0:	f000 f927 	bl	8000712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004c4:	4a06      	ldr	r2, [pc, #24]	; (80004e0 <HAL_InitTick+0x5c>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004ca:	2300      	movs	r3, #0
 80004cc:	e000      	b.n	80004d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004ce:	2301      	movs	r3, #1
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000008 	.word	0x20000008
 80004dc:	20000010 	.word	0x20000010
 80004e0:	2000000c 	.word	0x2000000c

080004e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_IncTick+0x1c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <HAL_IncTick+0x20>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4413      	add	r3, r2
 80004f4:	4a03      	ldr	r2, [pc, #12]	; (8000504 <HAL_IncTick+0x20>)
 80004f6:	6013      	str	r3, [r2, #0]
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	20000010 	.word	0x20000010
 8000504:	2000057c 	.word	0x2000057c

08000508 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return uwTick;
 800050c:	4b02      	ldr	r3, [pc, #8]	; (8000518 <HAL_GetTick+0x10>)
 800050e:	681b      	ldr	r3, [r3, #0]
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	2000057c 	.word	0x2000057c

0800051c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000524:	f7ff fff0 	bl	8000508 <HAL_GetTick>
 8000528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000534:	d005      	beq.n	8000542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <HAL_Delay+0x44>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	461a      	mov	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	4413      	add	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000542:	bf00      	nop
 8000544:	f7ff ffe0 	bl	8000508 <HAL_GetTick>
 8000548:	4602      	mov	r2, r0
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	429a      	cmp	r2, r3
 8000552:	d8f7      	bhi.n	8000544 <HAL_Delay+0x28>
  {
  }
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000010 	.word	0x20000010

08000564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	60d3      	str	r3, [r2, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4906      	ldr	r1, [pc, #24]	; (80005fc <__NVIC_EnableIRQ+0x34>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	e000e100 	.word	0xe000e100

08000600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	db0a      	blt.n	800062a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	490c      	ldr	r1, [pc, #48]	; (800064c <__NVIC_SetPriority+0x4c>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	0112      	lsls	r2, r2, #4
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	440b      	add	r3, r1
 8000624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000628:	e00a      	b.n	8000640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4908      	ldr	r1, [pc, #32]	; (8000650 <__NVIC_SetPriority+0x50>)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	3b04      	subs	r3, #4
 8000638:	0112      	lsls	r2, r2, #4
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	440b      	add	r3, r1
 800063e:	761a      	strb	r2, [r3, #24]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000654:	b480      	push	{r7}
 8000656:	b089      	sub	sp, #36	; 0x24
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	f1c3 0307 	rsb	r3, r3, #7
 800066e:	2b04      	cmp	r3, #4
 8000670:	bf28      	it	cs
 8000672:	2304      	movcs	r3, #4
 8000674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3304      	adds	r3, #4
 800067a:	2b06      	cmp	r3, #6
 800067c:	d902      	bls.n	8000684 <NVIC_EncodePriority+0x30>
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3b03      	subs	r3, #3
 8000682:	e000      	b.n	8000686 <NVIC_EncodePriority+0x32>
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	f04f 32ff 	mov.w	r2, #4294967295
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	43da      	mvns	r2, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	401a      	ands	r2, r3
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	43d9      	mvns	r1, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	4313      	orrs	r3, r2
         );
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3724      	adds	r7, #36	; 0x24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006c8:	d301      	bcc.n	80006ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ca:	2301      	movs	r3, #1
 80006cc:	e00f      	b.n	80006ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <SysTick_Config+0x40>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d6:	210f      	movs	r1, #15
 80006d8:	f04f 30ff 	mov.w	r0, #4294967295
 80006dc:	f7ff ff90 	bl	8000600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <SysTick_Config+0x40>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <SysTick_Config+0x40>)
 80006e8:	2207      	movs	r2, #7
 80006ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	e000e010 	.word	0xe000e010

080006fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ff2d 	bl	8000564 <__NVIC_SetPriorityGrouping>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000712:	b580      	push	{r7, lr}
 8000714:	b086      	sub	sp, #24
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000724:	f7ff ff42 	bl	80005ac <__NVIC_GetPriorityGrouping>
 8000728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f7ff ff90 	bl	8000654 <NVIC_EncodePriority>
 8000734:	4602      	mov	r2, r0
 8000736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff5f 	bl	8000600 <__NVIC_SetPriority>
}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff35 	bl	80005c8 <__NVIC_EnableIRQ>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ffa2 	bl	80006b8 <SysTick_Config>
 8000774:	4603      	mov	r3, r0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800077e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000780:	b08b      	sub	sp, #44	; 0x2c
 8000782:	af06      	add	r7, sp, #24
 8000784:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d101      	bne.n	8000790 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e0fd      	b.n	800098c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d106      	bne.n	80007aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fe03 	bl	80003b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2203      	movs	r2, #3
 80007ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 f95c 	bl	8002a74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	687e      	ldr	r6, [r7, #4]
 80007c4:	466d      	mov	r5, sp
 80007c6:	f106 0410 	add.w	r4, r6, #16
 80007ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	602b      	str	r3, [r5, #0]
 80007d2:	1d33      	adds	r3, r6, #4
 80007d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007d6:	6838      	ldr	r0, [r7, #0]
 80007d8:	f002 f926 	bl	8002a28 <USB_CoreInit>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d005      	beq.n	80007ee <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2202      	movs	r2, #2
 80007e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e0ce      	b.n	800098c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 f957 	bl	8002aa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007fa:	2300      	movs	r3, #0
 80007fc:	73fb      	strb	r3, [r7, #15]
 80007fe:	e04c      	b.n	800089a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	1c5a      	adds	r2, r3, #1
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	440b      	add	r3, r1
 8000810:	3301      	adds	r3, #1
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	440b      	add	r3, r1
 8000826:	7bfa      	ldrb	r2, [r7, #15]
 8000828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	b298      	uxth	r0, r3
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3336      	adds	r3, #54	; 0x36
 800083e:	4602      	mov	r2, r0
 8000840:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	4613      	mov	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	440b      	add	r3, r1
 8000852:	3303      	adds	r3, #3
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000858:	7bfa      	ldrb	r2, [r7, #15]
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	4613      	mov	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4413      	add	r3, r2
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	440b      	add	r3, r1
 8000866:	3338      	adds	r3, #56	; 0x38
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800086c:	7bfa      	ldrb	r2, [r7, #15]
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	440b      	add	r3, r1
 800087a:	333c      	adds	r3, #60	; 0x3c
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000880:	7bfa      	ldrb	r2, [r7, #15]
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	4613      	mov	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	440b      	add	r3, r1
 800088e:	3340      	adds	r3, #64	; 0x40
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	3301      	adds	r3, #1
 8000898:	73fb      	strb	r3, [r7, #15]
 800089a:	7bfa      	ldrb	r2, [r7, #15]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d3ad      	bcc.n	8000800 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	e044      	b.n	8000934 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	440b      	add	r3, r1
 80008b8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80008c0:	7bfa      	ldrb	r2, [r7, #15]
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	440b      	add	r3, r1
 80008ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4613      	mov	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	440b      	add	r3, r1
 80008e4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008ec:	7bfa      	ldrb	r2, [r7, #15]
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	4613      	mov	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	4413      	add	r3, r2
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	440b      	add	r3, r1
 80008fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000902:	7bfa      	ldrb	r2, [r7, #15]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	440b      	add	r3, r1
 8000910:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000918:	7bfa      	ldrb	r2, [r7, #15]
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	4613      	mov	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	440b      	add	r3, r1
 8000926:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	3301      	adds	r3, #1
 8000932:	73fb      	strb	r3, [r7, #15]
 8000934:	7bfa      	ldrb	r2, [r7, #15]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	429a      	cmp	r2, r3
 800093c:	d3b5      	bcc.n	80008aa <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	687e      	ldr	r6, [r7, #4]
 8000946:	466d      	mov	r5, sp
 8000948:	f106 0410 	add.w	r4, r6, #16
 800094c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000950:	6823      	ldr	r3, [r4, #0]
 8000952:	602b      	str	r3, [r5, #0]
 8000954:	1d33      	adds	r3, r6, #4
 8000956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000958:	6838      	ldr	r0, [r7, #0]
 800095a:	f002 f8b1 	bl	8002ac0 <USB_DevInit>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d005      	beq.n	8000970 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2202      	movs	r2, #2
 8000968:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e00d      	b.n	800098c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2201      	movs	r2, #1
 800097c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f004 fd63 	bl	8005450 <USB_DevDisconnect>

  return HAL_OK;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000994 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d101      	bne.n	80009aa <HAL_PCD_Start+0x16>
 80009a6:	2302      	movs	r3, #2
 80009a8:	e016      	b.n	80009d8 <HAL_PCD_Start+0x44>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2201      	movs	r2, #1
 80009ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 f846 	bl	8002a48 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80009bc:	2101      	movs	r1, #1
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f001 fb89 	bl	80020d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 fd37 	bl	800543c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f004 fd39 	bl	8005464 <USB_ReadInterrupts>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009fc:	d102      	bne.n	8000a04 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 fb48 	bl	8001094 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 fd2b 	bl	8005464 <USB_ReadInterrupts>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a18:	d112      	bne.n	8000a40 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a2c:	b292      	uxth	r2, r2
 8000a2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f006 febc 	bl	80077b0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 f923 	bl	8000c86 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 fd0d 	bl	8005464 <USB_ReadInterrupts>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a54:	d10b      	bne.n	8000a6e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a68:	b292      	uxth	r2, r2
 8000a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f004 fcf6 	bl	8005464 <USB_ReadInterrupts>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a82:	d10b      	bne.n	8000a9c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a96:	b292      	uxth	r2, r2
 8000a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f004 fcdf 	bl	8005464 <USB_ReadInterrupts>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ab0:	d126      	bne.n	8000b00 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 0204 	bic.w	r2, r2, #4
 8000ac4:	b292      	uxth	r2, r2
 8000ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f022 0208 	bic.w	r2, r2, #8
 8000adc:	b292      	uxth	r2, r2
 8000ade:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f006 fe93 	bl	800780e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000afa:	b292      	uxth	r2, r2
 8000afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fcad 	bl	8005464 <USB_ReadInterrupts>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b14:	f040 8082 	bne.w	8000c1c <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	77fb      	strb	r3, [r7, #31]
 8000b1c:	e010      	b.n	8000b40 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	7ffb      	ldrb	r3, [r7, #31]
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	441a      	add	r2, r3
 8000b2a:	7ffb      	ldrb	r3, [r7, #31]
 8000b2c:	8812      	ldrh	r2, [r2, #0]
 8000b2e:	b292      	uxth	r2, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	3320      	adds	r3, #32
 8000b34:	443b      	add	r3, r7
 8000b36:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000b3a:	7ffb      	ldrb	r3, [r7, #31]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	77fb      	strb	r3, [r7, #31]
 8000b40:	7ffb      	ldrb	r3, [r7, #31]
 8000b42:	2b07      	cmp	r3, #7
 8000b44:	d9eb      	bls.n	8000b1e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f042 0201 	orr.w	r2, r2, #1
 8000b58:	b292      	uxth	r2, r2
 8000b5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0201 	bic.w	r2, r2, #1
 8000b70:	b292      	uxth	r2, r2
 8000b72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000b76:	bf00      	nop
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f6      	beq.n	8000b78 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b9c:	b292      	uxth	r2, r2
 8000b9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	77fb      	strb	r3, [r7, #31]
 8000ba6:	e00f      	b.n	8000bc8 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000ba8:	7ffb      	ldrb	r3, [r7, #31]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	6812      	ldr	r2, [r2, #0]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	7ffa      	ldrb	r2, [r7, #31]
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	440a      	add	r2, r1
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	3320      	adds	r3, #32
 8000bba:	443b      	add	r3, r7
 8000bbc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000bc0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000bc2:	7ffb      	ldrb	r3, [r7, #31]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	77fb      	strb	r3, [r7, #31]
 8000bc8:	7ffb      	ldrb	r3, [r7, #31]
 8000bca:	2b07      	cmp	r3, #7
 8000bcc:	d9ec      	bls.n	8000ba8 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f042 0208 	orr.w	r2, r2, #8
 8000be0:	b292      	uxth	r2, r2
 8000be2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bf8:	b292      	uxth	r2, r2
 8000bfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f042 0204 	orr.w	r2, r2, #4
 8000c10:	b292      	uxth	r2, r2
 8000c12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f006 fdeb 	bl	80077f2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f004 fc1f 	bl	8005464 <USB_ReadInterrupts>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c30:	d10e      	bne.n	8000c50 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c44:	b292      	uxth	r2, r2
 8000c46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f006 fda2 	bl	8007794 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f004 fc05 	bl	8005464 <USB_ReadInterrupts>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c64:	d10b      	bne.n	8000c7e <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c78:	b292      	uxth	r2, r2
 8000c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3720      	adds	r7, #32
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d101      	bne.n	8000ca0 <HAL_PCD_SetAddress+0x1a>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e013      	b.n	8000cc8 <HAL_PCD_SetAddress+0x42>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	78fa      	ldrb	r2, [r7, #3]
 8000cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	78fa      	ldrb	r2, [r7, #3]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f004 fbac 	bl	8005416 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	4608      	mov	r0, r1
 8000cda:	4611      	mov	r1, r2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4603      	mov	r3, r0
 8000ce0:	70fb      	strb	r3, [r7, #3]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	803b      	strh	r3, [r7, #0]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	da0e      	bge.n	8000d14 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	705a      	strb	r2, [r3, #1]
 8000d12:	e00e      	b.n	8000d32 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	f003 0207 	and.w	r2, r3, #7
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000d3e:	883a      	ldrh	r2, [r7, #0]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	78ba      	ldrb	r2, [r7, #2]
 8000d48:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	785b      	ldrb	r3, [r3, #1]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d004      	beq.n	8000d5c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000d5c:	78bb      	ldrb	r3, [r7, #2]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d102      	bne.n	8000d68 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2200      	movs	r2, #0
 8000d66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d101      	bne.n	8000d76 <HAL_PCD_EP_Open+0xa6>
 8000d72:	2302      	movs	r3, #2
 8000d74:	e00e      	b.n	8000d94 <HAL_PCD_EP_Open+0xc4>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68f9      	ldr	r1, [r7, #12]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 febb 	bl	8002b00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000d92:	7afb      	ldrb	r3, [r7, #11]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	da0e      	bge.n	8000dce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	705a      	strb	r2, [r3, #1]
 8000dcc:	e00e      	b.n	8000dec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	f003 0207 	and.w	r2, r3, #7
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2200      	movs	r2, #0
 8000dea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d101      	bne.n	8000e06 <HAL_PCD_EP_Close+0x6a>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e00e      	b.n	8000e24 <HAL_PCD_EP_Close+0x88>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68f9      	ldr	r1, [r7, #12]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 f9dd 	bl	80031d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e3c:	7afb      	ldrb	r3, [r7, #11]
 8000e3e:	f003 0207 	and.w	r2, r3, #7
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4413      	add	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e6c:	7afb      	ldrb	r3, [r7, #11]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e78:	7afb      	ldrb	r3, [r7, #11]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d106      	bne.n	8000e90 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6979      	ldr	r1, [r7, #20]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 fb8f 	bl	80035ac <USB_EPStartXfer>
 8000e8e:	e005      	b.n	8000e9c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6979      	ldr	r1, [r7, #20]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fb88 	bl	80035ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000eb6:	7afb      	ldrb	r3, [r7, #11]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	4413      	add	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ef2:	7afb      	ldrb	r3, [r7, #11]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d106      	bne.n	8000f16 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6979      	ldr	r1, [r7, #20]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 fb4c 	bl	80035ac <USB_EPStartXfer>
 8000f14:	e005      	b.n	8000f22 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6979      	ldr	r1, [r7, #20]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 fb45 	bl	80035ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	f003 0207 	and.w	r2, r3, #7
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d901      	bls.n	8000f4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e04c      	b.n	8000fe4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	da0e      	bge.n	8000f70 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	705a      	strb	r2, [r3, #1]
 8000f6e:	e00c      	b.n	8000f8a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f70:	78fa      	ldrb	r2, [r7, #3]
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d101      	bne.n	8000faa <HAL_PCD_EP_SetStall+0x7e>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e01c      	b.n	8000fe4 <HAL_PCD_EP_SetStall+0xb8>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68f9      	ldr	r1, [r7, #12]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 f92f 	bl	800521c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d108      	bne.n	8000fda <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	f004 fa54 	bl	8005482 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	f003 020f 	and.w	r2, r3, #15
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	d901      	bls.n	800100a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e040      	b.n	800108c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800100a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800100e:	2b00      	cmp	r3, #0
 8001010:	da0e      	bge.n	8001030 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2201      	movs	r2, #1
 800102c:	705a      	strb	r2, [r3, #1]
 800102e:	e00e      	b.n	800104e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	f003 0207 	and.w	r2, r3, #7
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2200      	movs	r2, #0
 8001052:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	b2da      	uxtb	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_PCD_EP_ClrStall+0x82>
 800106a:	2302      	movs	r3, #2
 800106c:	e00e      	b.n	800108c <HAL_PCD_EP_ClrStall+0xa0>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68f9      	ldr	r1, [r7, #12]
 800107c:	4618      	mov	r0, r3
 800107e:	f004 f91d 	bl	80052bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800109c:	e2ec      	b.n	8001678 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80010a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80010b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f040 8161 	bne.w	8001380 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80010be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d152      	bne.n	800116e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80010d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010d8:	81fb      	strh	r3, [r7, #14]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	89fb      	ldrh	r3, [r7, #14]
 80010e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3328      	adds	r3, #40	; 0x28
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	3302      	adds	r3, #2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	4413      	add	r3, r2
 8001110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	695a      	ldr	r2, [r3, #20]
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	441a      	add	r2, r3
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800112c:	2100      	movs	r1, #0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f006 fb16 	bl	8007760 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 829b 	beq.w	8001678 <PCD_EP_ISR_Handler+0x5e4>
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f040 8296 	bne.w	8001678 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b292      	uxth	r2, r2
 8001160:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800116c:	e284      	b.n	8001678 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800117e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001184:	2b00      	cmp	r3, #0
 8001186:	d034      	beq.n	80011f2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001190:	b29b      	uxth	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4413      	add	r3, r2
 800119c:	3306      	adds	r3, #6
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f004 f9ab 	bl	8005522 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80011d8:	4013      	ands	r3, r2
 80011da:	823b      	strh	r3, [r7, #16]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	8a3a      	ldrh	r2, [r7, #16]
 80011e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011e6:	b292      	uxth	r2, r2
 80011e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f006 fa8b 	bl	8007706 <HAL_PCD_SetupStageCallback>
 80011f0:	e242      	b.n	8001678 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80011f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f280 823e 	bge.w	8001678 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b29a      	uxth	r2, r3
 8001204:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001208:	4013      	ands	r3, r2
 800120a:	83bb      	strh	r3, [r7, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	8bba      	ldrh	r2, [r7, #28]
 8001212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001216:	b292      	uxth	r2, r2
 8001218:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001222:	b29b      	uxth	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4413      	add	r3, r2
 800122e:	3306      	adds	r3, #6
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	4413      	add	r3, r2
 8001238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d019      	beq.n	8001282 <PCD_EP_ISR_Handler+0x1ee>
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d015      	beq.n	8001282 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	6959      	ldr	r1, [r3, #20]
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001266:	b29b      	uxth	r3, r3
 8001268:	f004 f95b 	bl	8005522 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	695a      	ldr	r2, [r3, #20]
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	441a      	add	r2, r3
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800127a:	2100      	movs	r1, #0
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f006 fa54 	bl	800772a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800128e:	2b00      	cmp	r3, #0
 8001290:	f040 81f2 	bne.w	8001678 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4413      	add	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d112      	bne.n	80012e2 <PCD_EP_ISR_Handler+0x24e>
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	801a      	strh	r2, [r3, #0]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012da:	b29a      	uxth	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	801a      	strh	r2, [r3, #0]
 80012e0:	e02f      	b.n	8001342 <PCD_EP_ISR_Handler+0x2ae>
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	2b3e      	cmp	r3, #62	; 0x3e
 80012e8:	d813      	bhi.n	8001312 <PCD_EP_ISR_Handler+0x27e>
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	085b      	lsrs	r3, r3, #1
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <PCD_EP_ISR_Handler+0x270>
 80012fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001300:	3301      	adds	r3, #1
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
 8001304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001306:	b29b      	uxth	r3, r3
 8001308:	029b      	lsls	r3, r3, #10
 800130a:	b29a      	uxth	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	801a      	strh	r2, [r3, #0]
 8001310:	e017      	b.n	8001342 <PCD_EP_ISR_Handler+0x2ae>
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <PCD_EP_ISR_Handler+0x298>
 8001326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001328:	3b01      	subs	r3, #1
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
 800132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132e:	b29b      	uxth	r3, r3
 8001330:	029b      	lsls	r3, r3, #10
 8001332:	b29b      	uxth	r3, r3
 8001334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800133c:	b29a      	uxth	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800134e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001352:	827b      	strh	r3, [r7, #18]
 8001354:	8a7b      	ldrh	r3, [r7, #18]
 8001356:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800135a:	827b      	strh	r3, [r7, #18]
 800135c:	8a7b      	ldrh	r3, [r7, #18]
 800135e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001362:	827b      	strh	r3, [r7, #18]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	8a7b      	ldrh	r3, [r7, #18]
 800136a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800136e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137a:	b29b      	uxth	r3, r3
 800137c:	8013      	strh	r3, [r2, #0]
 800137e:	e17b      	b.n	8001678 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001392:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001396:	2b00      	cmp	r3, #0
 8001398:	f280 80ea 	bge.w	8001570 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80013b2:	4013      	ands	r3, r2
 80013b4:	853b      	strh	r3, [r7, #40]	; 0x28
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ca:	b292      	uxth	r2, r2
 80013cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80013ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	7b1b      	ldrb	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d122      	bne.n	8001432 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4413      	add	r3, r2
 8001400:	3306      	adds	r3, #6
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	4413      	add	r3, r2
 800140a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001414:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001416:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 8087 	beq.w	800152c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	6959      	ldr	r1, [r3, #20]
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	88da      	ldrh	r2, [r3, #6]
 800142a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800142c:	f004 f879 	bl	8005522 <USB_ReadPMA>
 8001430:	e07c      	b.n	800152c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	78db      	ldrb	r3, [r3, #3]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d108      	bne.n	800144c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800143a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800143c:	461a      	mov	r2, r3
 800143e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f927 	bl	8001694 <HAL_PCD_EP_DB_Receive>
 8001446:	4603      	mov	r3, r0
 8001448:	86fb      	strh	r3, [r7, #54]	; 0x36
 800144a:	e06f      	b.n	800152c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001466:	847b      	strh	r3, [r7, #34]	; 0x22
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	441a      	add	r2, r3
 8001476:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800147c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001484:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001488:	b29b      	uxth	r3, r3
 800148a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d021      	beq.n	80014ea <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	3302      	adds	r3, #2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ce:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80014d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d02a      	beq.n	800152c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	6959      	ldr	r1, [r3, #20]
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	891a      	ldrh	r2, [r3, #8]
 80014e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014e4:	f004 f81d 	bl	8005522 <USB_ReadPMA>
 80014e8:	e020      	b.n	800152c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	3306      	adds	r3, #6
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	4413      	add	r3, r2
 8001508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001512:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001514:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	6959      	ldr	r1, [r3, #20]
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	895a      	ldrh	r2, [r3, #10]
 8001526:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001528:	f003 fffb 	bl	8005522 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	69da      	ldr	r2, [r3, #28]
 8001530:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001532:	441a      	add	r2, r3
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800153e:	441a      	add	r2, r3
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <PCD_EP_ISR_Handler+0x4c2>
 800154c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	429a      	cmp	r2, r3
 8001554:	d206      	bcs.n	8001564 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f006 f8e4 	bl	800772a <HAL_PCD_DataOutStageCallback>
 8001562:	e005      	b.n	8001570 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156a:	4618      	mov	r0, r3
 800156c:	f002 f81e 	bl	80035ac <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001570:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	2b00      	cmp	r3, #0
 8001578:	d07e      	beq.n	8001678 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800157a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015a8:	843b      	strh	r3, [r7, #32]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	441a      	add	r2, r3
 80015b8:	8c3b      	ldrh	r3, [r7, #32]
 80015ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d00c      	beq.n	80015e8 <PCD_EP_ISR_Handler+0x554>
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	78db      	ldrb	r3, [r3, #3]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d146      	bne.n	800166c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80015de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d141      	bne.n	800166c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	3302      	adds	r3, #2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001610:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	699a      	ldr	r2, [r3, #24]
 8001616:	8bfb      	ldrh	r3, [r7, #30]
 8001618:	429a      	cmp	r2, r3
 800161a:	d906      	bls.n	800162a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	8bfb      	ldrh	r3, [r7, #30]
 8001622:	1ad2      	subs	r2, r2, r3
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	619a      	str	r2, [r3, #24]
 8001628:	e002      	b.n	8001630 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d106      	bne.n	8001646 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f006 f88e 	bl	8007760 <HAL_PCD_DataInStageCallback>
 8001644:	e018      	b.n	8001678 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	8bfb      	ldrh	r3, [r7, #30]
 800164c:	441a      	add	r2, r3
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	8bfb      	ldrh	r3, [r7, #30]
 8001658:	441a      	add	r2, r3
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001664:	4618      	mov	r0, r3
 8001666:	f001 ffa1 	bl	80035ac <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800166a:	e005      	b.n	8001678 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800166c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800166e:	461a      	mov	r2, r3
 8001670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f91b 	bl	80018ae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001680:	b29b      	uxth	r3, r3
 8001682:	b21b      	sxth	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	f6ff ad0a 	blt.w	800109e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3738      	adds	r7, #56	; 0x38
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	4613      	mov	r3, r2
 80016a0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d07e      	beq.n	80017aa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	3302      	adds	r3, #2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016d4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	8b7b      	ldrh	r3, [r7, #26]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d306      	bcc.n	80016ee <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	699a      	ldr	r2, [r3, #24]
 80016e4:	8b7b      	ldrh	r3, [r7, #26]
 80016e6:	1ad2      	subs	r2, r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	619a      	str	r2, [r3, #24]
 80016ec:	e002      	b.n	80016f4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d123      	bne.n	8001744 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001716:	833b      	strh	r3, [r7, #24]
 8001718:	8b3b      	ldrh	r3, [r7, #24]
 800171a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800171e:	833b      	strh	r3, [r7, #24]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	441a      	add	r2, r3
 800172e:	8b3b      	ldrh	r3, [r7, #24]
 8001730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001740:	b29b      	uxth	r3, r3
 8001742:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d01f      	beq.n	800178e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001768:	82fb      	strh	r3, [r7, #22]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	441a      	add	r2, r3
 8001778:	8afb      	ldrh	r3, [r7, #22]
 800177a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800177e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001786:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800178a:	b29b      	uxth	r3, r3
 800178c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800178e:	8b7b      	ldrh	r3, [r7, #26]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8087 	beq.w	80018a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	6959      	ldr	r1, [r3, #20]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	891a      	ldrh	r2, [r3, #8]
 80017a2:	8b7b      	ldrh	r3, [r7, #26]
 80017a4:	f003 febd 	bl	8005522 <USB_ReadPMA>
 80017a8:	e07c      	b.n	80018a4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	3306      	adds	r3, #6
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	8b7b      	ldrh	r3, [r7, #26]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d306      	bcc.n	80017ec <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	699a      	ldr	r2, [r3, #24]
 80017e2:	8b7b      	ldrh	r3, [r7, #26]
 80017e4:	1ad2      	subs	r2, r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	619a      	str	r2, [r3, #24]
 80017ea:	e002      	b.n	80017f2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d123      	bne.n	8001842 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001814:	83fb      	strh	r3, [r7, #30]
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800181c:	83fb      	strh	r3, [r7, #30]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	441a      	add	r2, r3
 800182c:	8bfb      	ldrh	r3, [r7, #30]
 800182e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183e:	b29b      	uxth	r3, r3
 8001840:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001848:	2b00      	cmp	r3, #0
 800184a:	d11f      	bne.n	800188c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001866:	83bb      	strh	r3, [r7, #28]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	441a      	add	r2, r3
 8001876:	8bbb      	ldrh	r3, [r7, #28]
 8001878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800187c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001888:	b29b      	uxth	r3, r3
 800188a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800188c:	8b7b      	ldrh	r3, [r7, #26]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	6959      	ldr	r1, [r3, #20]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	895a      	ldrh	r2, [r3, #10]
 800189e:	8b7b      	ldrh	r3, [r7, #26]
 80018a0:	f003 fe3f 	bl	8005522 <USB_ReadPMA>
    }
  }

  return count;
 80018a4:	8b7b      	ldrh	r3, [r7, #26]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b0a2      	sub	sp, #136	; 0x88
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	4613      	mov	r3, r2
 80018ba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 81c7 	beq.w	8001c56 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4413      	add	r3, r2
 80018dc:	3302      	adds	r3, #2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	699a      	ldr	r2, [r3, #24]
 80018f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d907      	bls.n	8001910 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001908:	1ad2      	subs	r2, r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	619a      	str	r2, [r3, #24]
 800190e:	e002      	b.n	8001916 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 80b9 	bne.w	8001a92 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	785b      	ldrb	r3, [r3, #1]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d126      	bne.n	8001976 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001936:	b29b      	uxth	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193c:	4413      	add	r3, r2
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	011a      	lsls	r2, r3, #4
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	4413      	add	r3, r2
 800194a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800195a:	b29a      	uxth	r2, r3
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	801a      	strh	r2, [r3, #0]
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	b29b      	uxth	r3, r3
 8001966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800196a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800196e:	b29a      	uxth	r2, r3
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	801a      	strh	r2, [r3, #0]
 8001974:	e01a      	b.n	80019ac <HAL_PCD_EP_DB_Transmit+0xfe>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d116      	bne.n	80019ac <HAL_PCD_EP_DB_Transmit+0xfe>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198c:	b29b      	uxth	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001992:	4413      	add	r3, r2
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	011a      	lsls	r2, r3, #4
 800199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199e:	4413      	add	r3, r2
 80019a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	2200      	movs	r2, #0
 80019aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	785b      	ldrb	r3, [r3, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d126      	bne.n	8001a08 <HAL_PCD_EP_DB_Transmit+0x15a>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	4413      	add	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	011a      	lsls	r2, r3, #4
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	4413      	add	r3, r2
 80019dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	801a      	strh	r2, [r3, #0]
 8001a06:	e017      	b.n	8001a38 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	785b      	ldrb	r3, [r3, #1]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d113      	bne.n	8001a38 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	4413      	add	r3, r2
 8001a20:	623b      	str	r3, [r7, #32]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	011a      	lsls	r2, r3, #4
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	2200      	movs	r2, #0
 8001a36:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f005 fe8e 	bl	8007760 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 82d4 	beq.w	8001ff8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a6a:	827b      	strh	r3, [r7, #18]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	441a      	add	r2, r3
 8001a7a:	8a7b      	ldrh	r3, [r7, #18]
 8001a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	8013      	strh	r3, [r2, #0]
 8001a90:	e2b2      	b.n	8001ff8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d021      	beq.n	8001ae0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	441a      	add	r2, r3
 8001ac8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	f040 8286 	bne.w	8001ff8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001af4:	441a      	add	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b02:	441a      	add	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d309      	bcc.n	8001b28 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	6a1a      	ldr	r2, [r3, #32]
 8001b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b20:	1ad2      	subs	r2, r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	621a      	str	r2, [r3, #32]
 8001b26:	e015      	b.n	8001b54 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d107      	bne.n	8001b40 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001b30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b34:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b3e:	e009      	b.n	8001b54 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	785b      	ldrb	r3, [r3, #1]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d155      	bne.n	8001c08 <HAL_PCD_EP_DB_Transmit+0x35a>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b70:	4413      	add	r3, r2
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	011a      	lsls	r2, r3, #4
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
 8001b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d112      	bne.n	8001bb0 <HAL_PCD_EP_DB_Transmit+0x302>
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b98:	801a      	strh	r2, [r3, #0]
 8001b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	e047      	b.n	8001c40 <HAL_PCD_EP_DB_Transmit+0x392>
 8001bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8001bb4:	d811      	bhi.n	8001bda <HAL_PCD_EP_DB_Transmit+0x32c>
 8001bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_PCD_EP_DB_Transmit+0x31e>
 8001bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc8:	3301      	adds	r3, #1
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	029b      	lsls	r3, r3, #10
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd6:	801a      	strh	r2, [r3, #0]
 8001bd8:	e032      	b.n	8001c40 <HAL_PCD_EP_DB_Transmit+0x392>
 8001bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8001be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_PCD_EP_DB_Transmit+0x342>
 8001bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bec:	3b01      	subs	r3, #1
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	029b      	lsls	r3, r3, #10
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c04:	801a      	strh	r2, [r3, #0]
 8001c06:	e01b      	b.n	8001c40 <HAL_PCD_EP_DB_Transmit+0x392>
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d117      	bne.n	8001c40 <HAL_PCD_EP_DB_Transmit+0x392>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	643b      	str	r3, [r7, #64]	; 0x40
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c24:	4413      	add	r3, r2
 8001c26:	643b      	str	r3, [r7, #64]	; 0x40
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	011a      	lsls	r2, r3, #4
 8001c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c30:	4413      	add	r3, r2
 8001c32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	6959      	ldr	r1, [r3, #20]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	891a      	ldrh	r2, [r3, #8]
 8001c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	f003 fc22 	bl	8005498 <USB_WritePMA>
 8001c54:	e1d0      	b.n	8001ff8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	3306      	adds	r3, #6
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d307      	bcc.n	8001c9e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c96:	1ad2      	subs	r2, r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	619a      	str	r2, [r3, #24]
 8001c9c:	e002      	b.n	8001ca4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 80c4 	bne.w	8001e36 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	785b      	ldrb	r3, [r3, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d126      	bne.n	8001d04 <HAL_PCD_EP_DB_Transmit+0x456>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cca:	4413      	add	r3, r2
 8001ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	011a      	lsls	r2, r3, #4
 8001cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cec:	801a      	strh	r2, [r3, #0]
 8001cee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d00:	801a      	strh	r2, [r3, #0]
 8001d02:	e01a      	b.n	8001d3a <HAL_PCD_EP_DB_Transmit+0x48c>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d116      	bne.n	8001d3a <HAL_PCD_EP_DB_Transmit+0x48c>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	677b      	str	r3, [r7, #116]	; 0x74
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d20:	4413      	add	r3, r2
 8001d22:	677b      	str	r3, [r7, #116]	; 0x74
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	011a      	lsls	r2, r3, #4
 8001d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d32:	673b      	str	r3, [r7, #112]	; 0x70
 8001d34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d36:	2200      	movs	r2, #0
 8001d38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	785b      	ldrb	r3, [r3, #1]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d12f      	bne.n	8001da8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d60:	4413      	add	r3, r2
 8001d62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	011a      	lsls	r2, r3, #4
 8001d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d70:	4413      	add	r3, r2
 8001d72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da4:	801a      	strh	r2, [r3, #0]
 8001da6:	e017      	b.n	8001dd8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d113      	bne.n	8001dd8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dbe:	4413      	add	r3, r2
 8001dc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	011a      	lsls	r2, r3, #4
 8001dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dca:	4413      	add	r3, r2
 8001dcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001dd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f005 fcbe 	bl	8007760 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 8104 	bne.w	8001ff8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	441a      	add	r2, r3
 8001e1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	8013      	strh	r3, [r2, #0]
 8001e34:	e0e0      	b.n	8001ff8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d121      	bne.n	8001e84 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	441a      	add	r2, r3
 8001e6c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	f040 80b4 	bne.w	8001ff8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e98:	441a      	add	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ea6:	441a      	add	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d309      	bcc.n	8001ecc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec4:	1ad2      	subs	r2, r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	621a      	str	r2, [r3, #32]
 8001eca:	e015      	b.n	8001ef8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8001ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ed8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ee2:	e009      	b.n	8001ef8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	667b      	str	r3, [r7, #100]	; 0x64
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	785b      	ldrb	r3, [r3, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d155      	bne.n	8001fb2 <HAL_PCD_EP_DB_Transmit+0x704>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1a:	4413      	add	r3, r2
 8001f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	011a      	lsls	r2, r3, #4
 8001f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f26:	4413      	add	r3, r2
 8001f28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d112      	bne.n	8001f5a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8001f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	e044      	b.n	8001fe4 <HAL_PCD_EP_DB_Transmit+0x736>
 8001f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f5c:	2b3e      	cmp	r3, #62	; 0x3e
 8001f5e:	d811      	bhi.n	8001f84 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8001f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	657b      	str	r3, [r7, #84]	; 0x54
 8001f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8001f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f72:	3301      	adds	r3, #1
 8001f74:	657b      	str	r3, [r7, #84]	; 0x54
 8001f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	029b      	lsls	r3, r3, #10
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f80:	801a      	strh	r2, [r3, #0]
 8001f82:	e02f      	b.n	8001fe4 <HAL_PCD_EP_DB_Transmit+0x736>
 8001f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	657b      	str	r3, [r7, #84]	; 0x54
 8001f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8001f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f96:	3b01      	subs	r3, #1
 8001f98:	657b      	str	r3, [r7, #84]	; 0x54
 8001f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fae:	801a      	strh	r2, [r3, #0]
 8001fb0:	e018      	b.n	8001fe4 <HAL_PCD_EP_DB_Transmit+0x736>
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d114      	bne.n	8001fe4 <HAL_PCD_EP_DB_Transmit+0x736>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fc8:	4413      	add	r3, r2
 8001fca:	667b      	str	r3, [r7, #100]	; 0x64
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	011a      	lsls	r2, r3, #4
 8001fd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fda:	663b      	str	r3, [r7, #96]	; 0x60
 8001fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fe2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	6959      	ldr	r1, [r3, #20]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	895a      	ldrh	r2, [r3, #10]
 8001ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f003 fa50 	bl	8005498 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800200e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002012:	823b      	strh	r3, [r7, #16]
 8002014:	8a3b      	ldrh	r3, [r7, #16]
 8002016:	f083 0310 	eor.w	r3, r3, #16
 800201a:	823b      	strh	r3, [r7, #16]
 800201c:	8a3b      	ldrh	r3, [r7, #16]
 800201e:	f083 0320 	eor.w	r3, r3, #32
 8002022:	823b      	strh	r3, [r7, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	441a      	add	r2, r3
 8002032:	8a3b      	ldrh	r3, [r7, #16]
 8002034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800203c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002044:	b29b      	uxth	r3, r3
 8002046:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3788      	adds	r7, #136	; 0x88
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002052:	b480      	push	{r7}
 8002054:	b087      	sub	sp, #28
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	817b      	strh	r3, [r7, #10]
 8002060:	4613      	mov	r3, r2
 8002062:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002064:	897b      	ldrh	r3, [r7, #10]
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00b      	beq.n	8002088 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002070:	897b      	ldrh	r3, [r7, #10]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e009      	b.n	800209c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002088:	897a      	ldrh	r2, [r7, #10]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800209c:	893b      	ldrh	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d107      	bne.n	80020b2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2200      	movs	r2, #0
 80020a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	80da      	strh	r2, [r3, #6]
 80020b0:	e00b      	b.n	80020ca <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2201      	movs	r2, #1
 80020b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0c1b      	lsrs	r3, r3, #16
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd PCD handle
  * @param  state connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e272      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8087 	beq.w	800221a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800210c:	4b92      	ldr	r3, [pc, #584]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b04      	cmp	r3, #4
 8002116:	d00c      	beq.n	8002132 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002118:	4b8f      	ldr	r3, [pc, #572]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d112      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
 8002124:	4b8c      	ldr	r3, [pc, #560]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002130:	d10b      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002132:	4b89      	ldr	r3, [pc, #548]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d06c      	beq.n	8002218 <HAL_RCC_OscConfig+0x12c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d168      	bne.n	8002218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e24c      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x76>
 8002154:	4b80      	ldr	r3, [pc, #512]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a7f      	ldr	r2, [pc, #508]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x98>
 800216a:	4b7b      	ldr	r3, [pc, #492]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7a      	ldr	r2, [pc, #488]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b78      	ldr	r3, [pc, #480]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a77      	ldr	r2, [pc, #476]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e01d      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0xbc>
 800218e:	4b72      	ldr	r3, [pc, #456]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a71      	ldr	r2, [pc, #452]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b6f      	ldr	r3, [pc, #444]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a6e      	ldr	r2, [pc, #440]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 80021a8:	4b6b      	ldr	r3, [pc, #428]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6a      	ldr	r2, [pc, #424]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a67      	ldr	r2, [pc, #412]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe f99e 	bl	8000508 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe f99a 	bl	8000508 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e200      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xe4>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe f98a 	bl	8000508 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe f986 	bl	8000508 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e1ec      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b53      	ldr	r3, [pc, #332]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x10c>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d063      	beq.n	80022ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002226:	4b4c      	ldr	r3, [pc, #304]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b08      	cmp	r3, #8
 800223c:	d11c      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
 800223e:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e1c0      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b3d      	ldr	r3, [pc, #244]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4939      	ldr	r1, [pc, #228]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e03a      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_OscConfig+0x270>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe f93f 	bl	8000508 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7fe f93b 	bl	8000508 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1a1      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4927      	ldr	r1, [pc, #156]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	4b26      	ldr	r3, [pc, #152]	; (800235c <HAL_RCC_OscConfig+0x270>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe f91e 	bl	8000508 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d0:	f7fe f91a 	bl	8000508 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e180      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d03a      	beq.n	8002370 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d019      	beq.n	8002336 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7fe f8fe 	bl	8000508 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002310:	f7fe f8fa 	bl	8000508 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e160      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800232e:	2001      	movs	r0, #1
 8002330:	f000 faa6 	bl	8002880 <RCC_Delay>
 8002334:	e01c      	b.n	8002370 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7fe f8e4 	bl	8000508 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002342:	e00f      	b.n	8002364 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002344:	f7fe f8e0 	bl	8000508 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d908      	bls.n	8002364 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e146      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	42420000 	.word	0x42420000
 8002360:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	4b92      	ldr	r3, [pc, #584]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e9      	bne.n	8002344 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a6 	beq.w	80024ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b8b      	ldr	r3, [pc, #556]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10d      	bne.n	80023aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b88      	ldr	r3, [pc, #544]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a87      	ldr	r2, [pc, #540]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002398:	61d3      	str	r3, [r2, #28]
 800239a:	4b85      	ldr	r3, [pc, #532]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a6:	2301      	movs	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	4b82      	ldr	r3, [pc, #520]	; (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b6:	4b7f      	ldr	r3, [pc, #508]	; (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a7e      	ldr	r2, [pc, #504]	; (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7fe f8a1 	bl	8000508 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7fe f89d 	bl	8000508 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	; 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e103      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	4b75      	ldr	r3, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x312>
 80023f0:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a6e      	ldr	r2, [pc, #440]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e02d      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x334>
 8002406:	4b6a      	ldr	r3, [pc, #424]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a69      	ldr	r2, [pc, #420]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a66      	ldr	r2, [pc, #408]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	e01c      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d10c      	bne.n	8002442 <HAL_RCC_OscConfig+0x356>
 8002428:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a60      	ldr	r2, [pc, #384]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	4b5e      	ldr	r3, [pc, #376]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a5d      	ldr	r2, [pc, #372]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	e00b      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002442:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a5a      	ldr	r2, [pc, #360]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b58      	ldr	r3, [pc, #352]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a57      	ldr	r2, [pc, #348]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe f851 	bl	8000508 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe f84d 	bl	8000508 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0b1      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ee      	beq.n	800246a <HAL_RCC_OscConfig+0x37e>
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7fe f83b 	bl	8000508 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe f837 	bl	8000508 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e09b      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a3b      	ldr	r2, [pc, #236]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8087 	beq.w	80025e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d061      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d146      	bne.n	8002576 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe f80b 	bl	8000508 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe f807 	bl	8000508 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e06d      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d108      	bne.n	8002530 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800251e:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	4921      	ldr	r1, [pc, #132]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a19      	ldr	r1, [r3, #32]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	430b      	orrs	r3, r1
 8002542:	491b      	ldr	r1, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fd ffdb 	bl	8000508 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7fd ffd7 	bl	8000508 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e03d      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x46a>
 8002574:	e035      	b.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fd ffc4 	bl	8000508 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002584:	f7fd ffc0 	bl	8000508 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e026      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x498>
 80025a2:	e01e      	b.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e019      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
 80025b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_RCC_OscConfig+0x500>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000

080025f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0d0      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d910      	bls.n	8002634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b67      	ldr	r3, [pc, #412]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 0207 	bic.w	r2, r3, #7
 800261a:	4965      	ldr	r1, [pc, #404]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002656:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800266e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d040      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d115      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e073      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06b      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4936      	ldr	r1, [pc, #216]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fd ff12 	bl	8000508 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fd ff0e 	bl	8000508 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e053      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d210      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4922      	ldr	r1, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1cc>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1d0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fe70 	bl	8000484 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08007c94 	.word	0x08007c94
 80027bc:	20000008 	.word	0x20000008
 80027c0:	2000000c 	.word	0x2000000c

080027c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	b490      	push	{r4, r7}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027ca:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_RCC_GetSysClockFreq+0xac>)
 80027cc:	1d3c      	adds	r4, r7, #4
 80027ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027d4:	f240 2301 	movw	r3, #513	; 0x201
 80027d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d002      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x40>
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d003      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x46>
 8002802:	e02b      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002806:	623b      	str	r3, [r7, #32]
      break;
 8002808:	e02b      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	0c9b      	lsrs	r3, r3, #18
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	3328      	adds	r3, #40	; 0x28
 8002814:	443b      	add	r3, r7
 8002816:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800281a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d012      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	0c5b      	lsrs	r3, r3, #17
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	3328      	adds	r3, #40	; 0x28
 8002832:	443b      	add	r3, r7
 8002834:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002838:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb4>)
 800283e:	fb03 f202 	mul.w	r2, r3, r2
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	e004      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	623b      	str	r3, [r7, #32]
      break;
 800285a:	e002      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb4>)
 800285e:	623b      	str	r3, [r7, #32]
      break;
 8002860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002862:	6a3b      	ldr	r3, [r7, #32]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3728      	adds	r7, #40	; 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bc90      	pop	{r4, r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	08007c10 	.word	0x08007c10
 8002874:	40021000 	.word	0x40021000
 8002878:	007a1200 	.word	0x007a1200
 800287c:	003d0900 	.word	0x003d0900

08002880 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <RCC_Delay+0x34>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <RCC_Delay+0x38>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0a5b      	lsrs	r3, r3, #9
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800289c:	bf00      	nop
  }
  while (Delay --);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1e5a      	subs	r2, r3, #1
 80028a2:	60fa      	str	r2, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f9      	bne.n	800289c <RCC_Delay+0x1c>
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	20000008 	.word	0x20000008
 80028b8:	10624dd3 	.word	0x10624dd3

080028bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d07d      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028d8:	2300      	movs	r3, #0
 80028da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028dc:	4b4f      	ldr	r3, [pc, #316]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10d      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e8:	4b4c      	ldr	r3, [pc, #304]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	4a4b      	ldr	r2, [pc, #300]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f2:	61d3      	str	r3, [r2, #28]
 80028f4:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002900:	2301      	movs	r3, #1
 8002902:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	4b46      	ldr	r3, [pc, #280]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d118      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002910:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a42      	ldr	r2, [pc, #264]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291c:	f7fd fdf4 	bl	8000508 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	e008      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002924:	f7fd fdf0 	bl	8000508 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e06d      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002936:	4b3a      	ldr	r3, [pc, #232]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d02e      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	429a      	cmp	r2, r3
 800295e:	d027      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002960:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002968:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800296a:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002970:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002976:	4a29      	ldr	r2, [pc, #164]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d014      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7fd fdbf 	bl	8000508 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298c:	e00a      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fd fdbb 	bl	8000508 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e036      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ee      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4917      	ldr	r1, [pc, #92]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	490b      	ldr	r1, [pc, #44]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	4904      	ldr	r1, [pc, #16]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40007000 	.word	0x40007000
 8002a24:	42420440 	.word	0x42420440

08002a28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a28:	b084      	sub	sp, #16
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	f107 0014 	add.w	r0, r7, #20
 8002a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	b004      	add	sp, #16
 8002a46:	4770      	bx	lr

08002a48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a58:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a7c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	4013      	ands	r3, r2
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	f107 0014 	add.w	r0, r7, #20
 8002ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	b004      	add	sp, #16
 8002afe:	4770      	bx	lr

08002b00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b09b      	sub	sp, #108	; 0x6c
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	78db      	ldrb	r3, [r3, #3]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d81f      	bhi.n	8002b72 <USB_ActivateEndpoint+0x72>
 8002b32:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <USB_ActivateEndpoint+0x38>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b65 	.word	0x08002b65
 8002b40:	08002b7b 	.word	0x08002b7b
 8002b44:	08002b57 	.word	0x08002b57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002b48:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b50:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002b54:	e012      	b.n	8002b7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002b56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b5a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002b5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002b62:	e00b      	b.n	8002b7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002b64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002b70:	e004      	b.n	8002b7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002b78:	e000      	b.n	8002b7c <USB_ActivateEndpoint+0x7c>
      break;
 8002b7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	441a      	add	r2, r3
 8002b86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	441a      	add	r2, r3
 8002bcc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	7b1b      	ldrb	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f040 8149 	bne.w	8002e80 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	785b      	ldrb	r3, [r3, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8084 	beq.w	8002d00 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	4413      	add	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	011a      	lsls	r2, r3, #4
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	88db      	ldrh	r3, [r3, #6]
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	81fb      	strh	r3, [r7, #14]
 8002c3a:	89fb      	ldrh	r3, [r7, #14]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01b      	beq.n	8002c7c <USB_ActivateEndpoint+0x17c>
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5a:	81bb      	strh	r3, [r7, #12]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	441a      	add	r2, r3
 8002c66:	89bb      	ldrh	r3, [r7, #12]
 8002c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	78db      	ldrb	r3, [r3, #3]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d020      	beq.n	8002cc6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c9a:	813b      	strh	r3, [r7, #8]
 8002c9c:	893b      	ldrh	r3, [r7, #8]
 8002c9e:	f083 0320 	eor.w	r3, r3, #32
 8002ca2:	813b      	strh	r3, [r7, #8]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	893b      	ldrh	r3, [r7, #8]
 8002cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	8013      	strh	r3, [r2, #0]
 8002cc4:	e27f      	b.n	80031c6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cdc:	817b      	strh	r3, [r7, #10]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	441a      	add	r2, r3
 8002ce8:	897b      	ldrh	r3, [r7, #10]
 8002cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	8013      	strh	r3, [r2, #0]
 8002cfe:	e262      	b.n	80031c6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	4413      	add	r3, r2
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	011a      	lsls	r2, r3, #4
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	88db      	ldrh	r3, [r3, #6]
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	4413      	add	r3, r2
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	011a      	lsls	r2, r3, #4
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	4413      	add	r3, r2
 8002d52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d56:	623b      	str	r3, [r7, #32]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d112      	bne.n	8002d86 <USB_ActivateEndpoint+0x286>
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	801a      	strh	r2, [r3, #0]
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	801a      	strh	r2, [r3, #0]
 8002d84:	e02f      	b.n	8002de6 <USB_ActivateEndpoint+0x2e6>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b3e      	cmp	r3, #62	; 0x3e
 8002d8c:	d813      	bhi.n	8002db6 <USB_ActivateEndpoint+0x2b6>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	663b      	str	r3, [r7, #96]	; 0x60
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <USB_ActivateEndpoint+0x2a8>
 8002da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da4:	3301      	adds	r3, #1
 8002da6:	663b      	str	r3, [r7, #96]	; 0x60
 8002da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	029b      	lsls	r3, r3, #10
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	801a      	strh	r2, [r3, #0]
 8002db4:	e017      	b.n	8002de6 <USB_ActivateEndpoint+0x2e6>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <USB_ActivateEndpoint+0x2d0>
 8002dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	663b      	str	r3, [r7, #96]	; 0x60
 8002dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	029b      	lsls	r3, r3, #10
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	83fb      	strh	r3, [r7, #30]
 8002df4:	8bfb      	ldrh	r3, [r7, #30]
 8002df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d01b      	beq.n	8002e36 <USB_ActivateEndpoint+0x336>
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e14:	83bb      	strh	r3, [r7, #28]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	8bbb      	ldrh	r3, [r7, #28]
 8002e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4c:	837b      	strh	r3, [r7, #26]
 8002e4e:	8b7b      	ldrh	r3, [r7, #26]
 8002e50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e54:	837b      	strh	r3, [r7, #26]
 8002e56:	8b7b      	ldrh	r3, [r7, #26]
 8002e58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e5c:	837b      	strh	r3, [r7, #26]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	441a      	add	r2, r3
 8002e68:	8b7b      	ldrh	r3, [r7, #26]
 8002e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	8013      	strh	r3, [r2, #0]
 8002e7e:	e1a2      	b.n	80031c6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	441a      	add	r2, r3
 8002ea4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ecc:	4413      	add	r3, r2
 8002ece:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	011a      	lsls	r2, r3, #4
 8002ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ede:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	891b      	ldrh	r3, [r3, #8]
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f00:	4413      	add	r3, r2
 8002f02:	653b      	str	r3, [r7, #80]	; 0x50
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	011a      	lsls	r2, r3, #4
 8002f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	895b      	ldrh	r3, [r3, #10]
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f22:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f040 8091 	bne.w	8003050 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002f3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01b      	beq.n	8002f7e <USB_ActivateEndpoint+0x47e>
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	441a      	add	r2, r3
 8002f68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	873b      	strh	r3, [r7, #56]	; 0x38
 8002f8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01b      	beq.n	8002fce <USB_ActivateEndpoint+0x4ce>
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fac:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	441a      	add	r2, r3
 8002fb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002fe6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002fe8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002fec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002fee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002ff0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ff4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	441a      	add	r2, r3
 8003000:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800300a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003012:	b29b      	uxth	r3, r3
 8003014:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800302c:	867b      	strh	r3, [r7, #50]	; 0x32
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	441a      	add	r2, r3
 8003038:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800303a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800303e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304a:	b29b      	uxth	r3, r3
 800304c:	8013      	strh	r3, [r2, #0]
 800304e:	e0ba      	b.n	80031c6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003060:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01d      	beq.n	80030a8 <USB_ActivateEndpoint+0x5a8>
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003082:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	441a      	add	r2, r3
 8003090:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80030b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01d      	beq.n	8003100 <USB_ActivateEndpoint+0x600>
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	441a      	add	r2, r3
 80030e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80030ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	78db      	ldrb	r3, [r3, #3]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d024      	beq.n	8003152 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800311a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800311e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003122:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003126:	f083 0320 	eor.w	r3, r3, #32
 800312a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	441a      	add	r2, r3
 8003138:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800313c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314c:	b29b      	uxth	r3, r3
 800314e:	8013      	strh	r3, [r2, #0]
 8003150:	e01d      	b.n	800318e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003168:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800317a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318a:	b29b      	uxth	r3, r3
 800318c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	441a      	add	r2, r3
 80031b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80031b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80031c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	376c      	adds	r7, #108	; 0x6c
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b08d      	sub	sp, #52	; 0x34
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	7b1b      	ldrb	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f040 808e 	bne.w	8003304 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	785b      	ldrb	r3, [r3, #1]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d044      	beq.n	800327a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	81bb      	strh	r3, [r7, #12]
 80031fe:	89bb      	ldrh	r3, [r7, #12]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01b      	beq.n	8003240 <USB_DeactivateEndpoint+0x6c>
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	817b      	strh	r3, [r7, #10]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	441a      	add	r2, r3
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800323c:	b29b      	uxth	r3, r3
 800323e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003256:	813b      	strh	r3, [r7, #8]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	893b      	ldrh	r3, [r7, #8]
 8003264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800326c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003274:	b29b      	uxth	r3, r3
 8003276:	8013      	strh	r3, [r2, #0]
 8003278:	e192      	b.n	80035a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	827b      	strh	r3, [r7, #18]
 8003288:	8a7b      	ldrh	r3, [r7, #18]
 800328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01b      	beq.n	80032ca <USB_DeactivateEndpoint+0xf6>
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a8:	823b      	strh	r3, [r7, #16]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	441a      	add	r2, r3
 80032b4:	8a3b      	ldrh	r3, [r7, #16]
 80032b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e0:	81fb      	strh	r3, [r7, #14]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	441a      	add	r2, r3
 80032ec:	89fb      	ldrh	r3, [r7, #14]
 80032ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fe:	b29b      	uxth	r3, r3
 8003300:	8013      	strh	r3, [r2, #0]
 8003302:	e14d      	b.n	80035a0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	785b      	ldrb	r3, [r3, #1]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 80a5 	bne.w	8003458 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	843b      	strh	r3, [r7, #32]
 800331c:	8c3b      	ldrh	r3, [r7, #32]
 800331e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01b      	beq.n	800335e <USB_DeactivateEndpoint+0x18a>
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333c:	83fb      	strh	r3, [r7, #30]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	441a      	add	r2, r3
 8003348:	8bfb      	ldrh	r3, [r7, #30]
 800334a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800334e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335a:	b29b      	uxth	r3, r3
 800335c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	83bb      	strh	r3, [r7, #28]
 800336c:	8bbb      	ldrh	r3, [r7, #28]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01b      	beq.n	80033ae <USB_DeactivateEndpoint+0x1da>
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338c:	837b      	strh	r3, [r7, #26]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	441a      	add	r2, r3
 8003398:	8b7b      	ldrh	r3, [r7, #26]
 800339a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800339e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c4:	833b      	strh	r3, [r7, #24]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	441a      	add	r2, r3
 80033d0:	8b3b      	ldrh	r3, [r7, #24]
 80033d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fc:	82fb      	strh	r3, [r7, #22]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	441a      	add	r2, r3
 8003408:	8afb      	ldrh	r3, [r7, #22]
 800340a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800340e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341a:	b29b      	uxth	r3, r3
 800341c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003434:	82bb      	strh	r3, [r7, #20]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	441a      	add	r2, r3
 8003440:	8abb      	ldrh	r3, [r7, #20]
 8003442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800344a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003452:	b29b      	uxth	r3, r3
 8003454:	8013      	strh	r3, [r2, #0]
 8003456:	e0a3      	b.n	80035a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003466:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01b      	beq.n	80034a8 <USB_DeactivateEndpoint+0x2d4>
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003486:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800349c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80034b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <USB_DeactivateEndpoint+0x324>
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	441a      	add	r2, r3
 800351a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800351c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003524:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352c:	b29b      	uxth	r3, r3
 800352e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003546:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	b29b      	uxth	r3, r3
 8003566:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800357a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800358c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359c:	b29b      	uxth	r3, r3
 800359e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3734      	adds	r7, #52	; 0x34
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b0cc      	sub	sp, #304	; 0x130
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80035ba:	6018      	str	r0, [r3, #0]
 80035bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035c4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80035c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	785b      	ldrb	r3, [r3, #1]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	f041 817d 	bne.w	80048d2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80035d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d908      	bls.n	8003606 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80035f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003604:	e007      	b.n	8003616 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800360a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800361a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	7b1b      	ldrb	r3, [r3, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d152      	bne.n	80036cc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800362a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6959      	ldr	r1, [r3, #20]
 8003632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	88da      	ldrh	r2, [r3, #6]
 800363e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003642:	b29b      	uxth	r3, r3
 8003644:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003648:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800364c:	6800      	ldr	r0, [r0, #0]
 800364e:	f001 ff23 	bl	8005498 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003656:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800365a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800365e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800366a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003674:	b29b      	uxth	r3, r3
 8003676:	4619      	mov	r1, r3
 8003678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800367c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003680:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003684:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	440a      	add	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	011a      	lsls	r2, r3, #4
 800369c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80036ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	801a      	strh	r2, [r3, #0]
 80036c8:	f001 b8b5 	b.w	8004836 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80036cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	78db      	ldrb	r3, [r3, #3]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	f040 84c6 	bne.w	800406a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80036de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6a1a      	ldr	r2, [r3, #32]
 80036ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	f240 8443 	bls.w	8003f82 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80036fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800370a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800371e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003722:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800372a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	441a      	add	r2, r3
 8003740:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800374c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800375c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003768:	1ad2      	subs	r2, r2, r3
 800376a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800376e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800377a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 823e 	beq.w	8003c1a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800379e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80037aa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f040 809a 	bne.w	80038f8 <USB_EPStartXfer+0x34c>
 80037c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80037d0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	4619      	mov	r1, r3
 80037ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80037f6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	440a      	add	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	011a      	lsls	r2, r3, #4
 800380e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4413      	add	r3, r2
 800381a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800381e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003822:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d122      	bne.n	8003876 <USB_EPStartXfer+0x2ca>
 8003830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003834:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003842:	b29a      	uxth	r2, r3
 8003844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003848:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	801a      	strh	r2, [r3, #0]
 8003850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003854:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003866:	b29a      	uxth	r2, r3
 8003868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800386c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	e079      	b.n	800396a <USB_EPStartXfer+0x3be>
 8003876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800387a:	2b3e      	cmp	r3, #62	; 0x3e
 800387c:	d81b      	bhi.n	80038b6 <USB_EPStartXfer+0x30a>
 800387e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <USB_EPStartXfer+0x2f2>
 8003894:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003898:	3301      	adds	r3, #1
 800389a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800389e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	029b      	lsls	r3, r3, #10
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	801a      	strh	r2, [r3, #0]
 80038b4:	e059      	b.n	800396a <USB_EPStartXfer+0x3be>
 80038b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80038c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <USB_EPStartXfer+0x32a>
 80038cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038d0:	3b01      	subs	r3, #1
 80038d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80038d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038da:	b29b      	uxth	r3, r3
 80038dc:	029b      	lsls	r3, r3, #10
 80038de:	b29b      	uxth	r3, r3
 80038e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	801a      	strh	r2, [r3, #0]
 80038f6:	e038      	b.n	800396a <USB_EPStartXfer+0x3be>
 80038f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	785b      	ldrb	r3, [r3, #1]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d130      	bne.n	800396a <USB_EPStartXfer+0x3be>
 8003908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800390c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003916:	b29b      	uxth	r3, r3
 8003918:	4619      	mov	r1, r3
 800391a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800391e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003922:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003926:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	440a      	add	r2, r1
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	011a      	lsls	r2, r3, #4
 800393e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003942:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4413      	add	r3, r2
 800394a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800394e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800395c:	b29a      	uxth	r2, r3
 800395e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800396a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800396e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	895b      	ldrh	r3, [r3, #10]
 8003976:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800397a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800397e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6959      	ldr	r1, [r3, #20]
 8003986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800398a:	b29b      	uxth	r3, r3
 800398c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003990:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003994:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003998:	6800      	ldr	r0, [r0, #0]
 800399a:	f001 fd7d 	bl	8005498 <USB_WritePMA>
            ep->xfer_buff += len;
 800399e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039ae:	441a      	add	r2, r3
 80039b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80039bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a1a      	ldr	r2, [r3, #32]
 80039c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d90f      	bls.n	80039f8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80039d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039e8:	1ad2      	subs	r2, r2, r3
 80039ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	621a      	str	r2, [r3, #32]
 80039f6:	e00e      	b.n	8003a16 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80039f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	785b      	ldrb	r3, [r3, #1]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f040 809a 	bne.w	8003b5c <USB_EPStartXfer+0x5b0>
 8003a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003a34:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a52:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003a5a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	440a      	add	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	011a      	lsls	r2, r3, #4
 8003a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a76:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d122      	bne.n	8003ada <USB_EPStartXfer+0x52e>
 8003a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003aac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	801a      	strh	r2, [r3, #0]
 8003ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ab8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ad0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	801a      	strh	r2, [r3, #0]
 8003ad8:	e083      	b.n	8003be2 <USB_EPStartXfer+0x636>
 8003ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ade:	2b3e      	cmp	r3, #62	; 0x3e
 8003ae0:	d81b      	bhi.n	8003b1a <USB_EPStartXfer+0x56e>
 8003ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <USB_EPStartXfer+0x556>
 8003af8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003afc:	3301      	adds	r3, #1
 8003afe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	029b      	lsls	r3, r3, #10
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	801a      	strh	r2, [r3, #0]
 8003b18:	e063      	b.n	8003be2 <USB_EPStartXfer+0x636>
 8003b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <USB_EPStartXfer+0x58e>
 8003b30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003b34:	3b01      	subs	r3, #1
 8003b36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	029b      	lsls	r3, r3, #10
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	e042      	b.n	8003be2 <USB_EPStartXfer+0x636>
 8003b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d13a      	bne.n	8003be2 <USB_EPStartXfer+0x636>
 8003b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003b78:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	4619      	mov	r1, r3
 8003b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003b9e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	011a      	lsls	r2, r3, #4
 8003bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003be6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	891b      	ldrh	r3, [r3, #8]
 8003bee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6959      	ldr	r1, [r3, #20]
 8003bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003c08:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003c0c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003c10:	6800      	ldr	r0, [r0, #0]
 8003c12:	f001 fc41 	bl	8005498 <USB_WritePMA>
 8003c16:	f000 be0e 	b.w	8004836 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d16d      	bne.n	8003d06 <USB_EPStartXfer+0x75a>
 8003c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4a:	4413      	add	r3, r2
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	011a      	lsls	r2, r3, #4
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5e:	4413      	add	r3, r2
 8003c60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c64:	647b      	str	r3, [r7, #68]	; 0x44
 8003c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d112      	bne.n	8003c94 <USB_EPStartXfer+0x6e8>
 8003c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c90:	801a      	strh	r2, [r3, #0]
 8003c92:	e063      	b.n	8003d5c <USB_EPStartXfer+0x7b0>
 8003c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c98:	2b3e      	cmp	r3, #62	; 0x3e
 8003c9a:	d817      	bhi.n	8003ccc <USB_EPStartXfer+0x720>
 8003c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <USB_EPStartXfer+0x710>
 8003cb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003cbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	029b      	lsls	r3, r3, #10
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	e047      	b.n	8003d5c <USB_EPStartXfer+0x7b0>
 8003ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d104      	bne.n	8003cec <USB_EPStartXfer+0x740>
 8003ce2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003cec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	029b      	lsls	r3, r3, #10
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d02:	801a      	strh	r2, [r3, #0]
 8003d04:	e02a      	b.n	8003d5c <USB_EPStartXfer+0x7b0>
 8003d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	785b      	ldrb	r3, [r3, #1]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d122      	bne.n	8003d5c <USB_EPStartXfer+0x7b0>
 8003d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	653b      	str	r3, [r7, #80]	; 0x50
 8003d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d36:	4413      	add	r3, r2
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
 8003d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	011a      	lsls	r2, r3, #4
 8003d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	891b      	ldrh	r3, [r3, #8]
 8003d68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6959      	ldr	r1, [r3, #20]
 8003d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003d82:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003d86:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003d8a:	6800      	ldr	r0, [r0, #0]
 8003d8c:	f001 fb84 	bl	8005498 <USB_WritePMA>
            ep->xfer_buff += len;
 8003d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003da0:	441a      	add	r2, r3
 8003da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6a1a      	ldr	r2, [r3, #32]
 8003dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d90f      	bls.n	8003dea <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8003dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6a1a      	ldr	r2, [r3, #32]
 8003dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	621a      	str	r2, [r3, #32]
 8003de8:	e00e      	b.n	8003e08 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8003dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2200      	movs	r2, #0
 8003e06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	643b      	str	r3, [r7, #64]	; 0x40
 8003e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	785b      	ldrb	r3, [r3, #1]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d16d      	bne.n	8003f00 <USB_EPStartXfer+0x954>
 8003e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	4413      	add	r3, r2
 8003e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	011a      	lsls	r2, r3, #4
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	4413      	add	r3, r2
 8003e5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d112      	bne.n	8003e8e <USB_EPStartXfer+0x8e2>
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e76:	801a      	strh	r2, [r3, #0]
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	e05d      	b.n	8003f4a <USB_EPStartXfer+0x99e>
 8003e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e92:	2b3e      	cmp	r3, #62	; 0x3e
 8003e94:	d817      	bhi.n	8003ec6 <USB_EPStartXfer+0x91a>
 8003e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <USB_EPStartXfer+0x90a>
 8003eac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	029b      	lsls	r3, r3, #10
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec2:	801a      	strh	r2, [r3, #0]
 8003ec4:	e041      	b.n	8003f4a <USB_EPStartXfer+0x99e>
 8003ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <USB_EPStartXfer+0x93a>
 8003edc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	029b      	lsls	r3, r3, #10
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efc:	801a      	strh	r2, [r3, #0]
 8003efe:	e024      	b.n	8003f4a <USB_EPStartXfer+0x99e>
 8003f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d11c      	bne.n	8003f4a <USB_EPStartXfer+0x99e>
 8003f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f24:	4413      	add	r3, r2
 8003f26:	643b      	str	r3, [r7, #64]	; 0x40
 8003f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	011a      	lsls	r2, r3, #4
 8003f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f38:	4413      	add	r3, r2
 8003f3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	895b      	ldrh	r3, [r3, #10]
 8003f56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6959      	ldr	r1, [r3, #20]
 8003f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003f70:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003f74:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003f78:	6800      	ldr	r0, [r0, #0]
 8003f7a:	f001 fa8d 	bl	8005498 <USB_WritePMA>
 8003f7e:	f000 bc5a 	b.w	8004836 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	441a      	add	r2, r3
 8003fd6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ff2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ffe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004008:	b29b      	uxth	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800400e:	4413      	add	r3, r2
 8004010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	011a      	lsls	r2, r3, #4
 8004020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004022:	4413      	add	r3, r2
 8004024:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004028:	65bb      	str	r3, [r7, #88]	; 0x58
 800402a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800402e:	b29a      	uxth	r2, r3
 8004030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004032:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	891b      	ldrh	r3, [r3, #8]
 8004040:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6959      	ldr	r1, [r3, #20]
 8004050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004054:	b29b      	uxth	r3, r3
 8004056:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800405a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800405e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004062:	6800      	ldr	r0, [r0, #0]
 8004064:	f001 fa18 	bl	8005498 <USB_WritePMA>
 8004068:	e3e5      	b.n	8004836 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800406a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800406e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004090:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80040b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80040c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6a1a      	ldr	r2, [r3, #32]
 80040d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040d6:	1ad2      	subs	r2, r2, r3
 80040d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 81bc 	beq.w	8004484 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800410c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004110:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800411a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800411e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	785b      	ldrb	r3, [r3, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d16d      	bne.n	8004206 <USB_EPStartXfer+0xc5a>
 800412a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800412e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	67bb      	str	r3, [r7, #120]	; 0x78
 8004136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800413a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004144:	b29b      	uxth	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414a:	4413      	add	r3, r2
 800414c:	67bb      	str	r3, [r7, #120]	; 0x78
 800414e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	011a      	lsls	r2, r3, #4
 800415c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800415e:	4413      	add	r3, r2
 8004160:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004164:	677b      	str	r3, [r7, #116]	; 0x74
 8004166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d112      	bne.n	8004194 <USB_EPStartXfer+0xbe8>
 800416e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004178:	b29a      	uxth	r2, r3
 800417a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800418c:	b29a      	uxth	r2, r3
 800418e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	e060      	b.n	8004256 <USB_EPStartXfer+0xcaa>
 8004194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004198:	2b3e      	cmp	r3, #62	; 0x3e
 800419a:	d817      	bhi.n	80041cc <USB_EPStartXfer+0xc20>
 800419c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041a0:	085b      	lsrs	r3, r3, #1
 80041a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80041a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <USB_EPStartXfer+0xc10>
 80041b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041b6:	3301      	adds	r3, #1
 80041b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80041bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c8:	801a      	strh	r2, [r3, #0]
 80041ca:	e044      	b.n	8004256 <USB_EPStartXfer+0xcaa>
 80041cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80041d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <USB_EPStartXfer+0xc40>
 80041e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041e6:	3b01      	subs	r3, #1
 80041e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80041ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	029b      	lsls	r3, r3, #10
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041fe:	b29a      	uxth	r2, r3
 8004200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004202:	801a      	strh	r2, [r3, #0]
 8004204:	e027      	b.n	8004256 <USB_EPStartXfer+0xcaa>
 8004206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800420a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d11f      	bne.n	8004256 <USB_EPStartXfer+0xcaa>
 8004216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800421a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004224:	b29b      	uxth	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800422c:	4413      	add	r3, r2
 800422e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	011a      	lsls	r2, r3, #4
 8004240:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004244:	4413      	add	r3, r2
 8004246:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800424a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800424c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004250:	b29a      	uxth	r2, r3
 8004252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004254:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800425a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	895b      	ldrh	r3, [r3, #10]
 8004262:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800426a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6959      	ldr	r1, [r3, #20]
 8004272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004276:	b29b      	uxth	r3, r3
 8004278:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800427c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004280:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004284:	6800      	ldr	r0, [r0, #0]
 8004286:	f001 f907 	bl	8005498 <USB_WritePMA>
          ep->xfer_buff += len;
 800428a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800428e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800429a:	441a      	add	r2, r3
 800429c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80042a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a1a      	ldr	r2, [r3, #32]
 80042b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d90f      	bls.n	80042e4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80042c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a1a      	ldr	r2, [r3, #32]
 80042d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042d4:	1ad2      	subs	r2, r2, r3
 80042d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	621a      	str	r2, [r3, #32]
 80042e2:	e00e      	b.n	8004302 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80042e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80042f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2200      	movs	r2, #0
 8004300:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8295 	beq.w	8004836 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800430c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d16d      	bne.n	80043f8 <USB_EPStartXfer+0xe4c>
 800431c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004320:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	66bb      	str	r3, [r7, #104]	; 0x68
 8004328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800432c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004336:	b29b      	uxth	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800433c:	4413      	add	r3, r2
 800433e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	011a      	lsls	r2, r3, #4
 800434e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004350:	4413      	add	r3, r2
 8004352:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004356:	667b      	str	r3, [r7, #100]	; 0x64
 8004358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d112      	bne.n	8004386 <USB_EPStartXfer+0xdda>
 8004360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800436a:	b29a      	uxth	r2, r3
 800436c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436e:	801a      	strh	r2, [r3, #0]
 8004370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800437e:	b29a      	uxth	r2, r3
 8004380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	e063      	b.n	800444e <USB_EPStartXfer+0xea2>
 8004386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800438a:	2b3e      	cmp	r3, #62	; 0x3e
 800438c:	d817      	bhi.n	80043be <USB_EPStartXfer+0xe12>
 800438e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <USB_EPStartXfer+0xe02>
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a8:	3301      	adds	r3, #1
 80043aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ba:	801a      	strh	r2, [r3, #0]
 80043bc:	e047      	b.n	800444e <USB_EPStartXfer+0xea2>
 80043be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d104      	bne.n	80043de <USB_EPStartXfer+0xe32>
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d8:	3b01      	subs	r3, #1
 80043da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	029b      	lsls	r3, r3, #10
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	e02a      	b.n	800444e <USB_EPStartXfer+0xea2>
 80043f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d122      	bne.n	800444e <USB_EPStartXfer+0xea2>
 8004408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800440c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	673b      	str	r3, [r7, #112]	; 0x70
 8004414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004418:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004422:	b29b      	uxth	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004428:	4413      	add	r3, r2
 800442a:	673b      	str	r3, [r7, #112]	; 0x70
 800442c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	011a      	lsls	r2, r3, #4
 800443a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800443c:	4413      	add	r3, r2
 800443e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004442:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004448:	b29a      	uxth	r2, r3
 800444a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800444e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	891b      	ldrh	r3, [r3, #8]
 800445a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800445e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6959      	ldr	r1, [r3, #20]
 800446a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800446e:	b29b      	uxth	r3, r3
 8004470:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004474:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004478:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800447c:	6800      	ldr	r0, [r0, #0]
 800447e:	f001 f80b 	bl	8005498 <USB_WritePMA>
 8004482:	e1d8      	b.n	8004836 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d178      	bne.n	8004586 <USB_EPStartXfer+0xfda>
 8004494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044b8:	4413      	add	r3, r2
 80044ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	011a      	lsls	r2, r3, #4
 80044cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044d0:	4413      	add	r3, r2
 80044d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <USB_EPStartXfer+0xf64>
 80044e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004506:	b29a      	uxth	r2, r3
 8004508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800450c:	801a      	strh	r2, [r3, #0]
 800450e:	e06b      	b.n	80045e8 <USB_EPStartXfer+0x103c>
 8004510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004514:	2b3e      	cmp	r3, #62	; 0x3e
 8004516:	d818      	bhi.n	800454a <USB_EPStartXfer+0xf9e>
 8004518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d004      	beq.n	8004538 <USB_EPStartXfer+0xf8c>
 800452e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004532:	3301      	adds	r3, #1
 8004534:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004538:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800453c:	b29b      	uxth	r3, r3
 800453e:	029b      	lsls	r3, r3, #10
 8004540:	b29a      	uxth	r2, r3
 8004542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	e04e      	b.n	80045e8 <USB_EPStartXfer+0x103c>
 800454a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	2b00      	cmp	r3, #0
 800455e:	d104      	bne.n	800456a <USB_EPStartXfer+0xfbe>
 8004560:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004564:	3b01      	subs	r3, #1
 8004566:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800456a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800456e:	b29b      	uxth	r3, r3
 8004570:	029b      	lsls	r3, r3, #10
 8004572:	b29b      	uxth	r3, r3
 8004574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800457c:	b29a      	uxth	r2, r3
 800457e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	e030      	b.n	80045e8 <USB_EPStartXfer+0x103c>
 8004586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800458a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d128      	bne.n	80045e8 <USB_EPStartXfer+0x103c>
 8004596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800459a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045ba:	4413      	add	r3, r2
 80045bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	011a      	lsls	r2, r3, #4
 80045ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045d2:	4413      	add	r3, r2
 80045d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80045e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	891b      	ldrh	r3, [r3, #8]
 80045f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6959      	ldr	r1, [r3, #20]
 8004604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004608:	b29b      	uxth	r3, r3
 800460a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800460e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004612:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004616:	6800      	ldr	r0, [r0, #0]
 8004618:	f000 ff3e 	bl	8005498 <USB_WritePMA>
          ep->xfer_buff += len;
 800461c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800462c:	441a      	add	r2, r3
 800462e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800463a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800463e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6a1a      	ldr	r2, [r3, #32]
 8004646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800464a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	429a      	cmp	r2, r3
 8004654:	d90f      	bls.n	8004676 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8004656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800465a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6a1a      	ldr	r2, [r3, #32]
 8004662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004666:	1ad2      	subs	r2, r2, r3
 8004668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800466c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	621a      	str	r2, [r3, #32]
 8004674:	e00e      	b.n	8004694 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8004676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800467a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800468a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2200      	movs	r2, #0
 8004692:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80cc 	beq.w	8004836 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800469e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	785b      	ldrb	r3, [r3, #1]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d178      	bne.n	80047ae <USB_EPStartXfer+0x1202>
 80046bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d8:	b29b      	uxth	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046e0:	4413      	add	r3, r2
 80046e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	011a      	lsls	r2, r3, #4
 80046f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046f8:	4413      	add	r3, r2
 80046fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <USB_EPStartXfer+0x118c>
 800470a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004716:	b29a      	uxth	r2, r3
 8004718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800472e:	b29a      	uxth	r2, r3
 8004730:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	e064      	b.n	8004802 <USB_EPStartXfer+0x1256>
 8004738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800473c:	2b3e      	cmp	r3, #62	; 0x3e
 800473e:	d818      	bhi.n	8004772 <USB_EPStartXfer+0x11c6>
 8004740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800474a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d004      	beq.n	8004760 <USB_EPStartXfer+0x11b4>
 8004756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475a:	3301      	adds	r3, #1
 800475c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004764:	b29b      	uxth	r3, r3
 8004766:	029b      	lsls	r3, r3, #10
 8004768:	b29a      	uxth	r2, r3
 800476a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800476e:	801a      	strh	r2, [r3, #0]
 8004770:	e047      	b.n	8004802 <USB_EPStartXfer+0x1256>
 8004772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800477c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <USB_EPStartXfer+0x11e6>
 8004788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478c:	3b01      	subs	r3, #1
 800478e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004796:	b29b      	uxth	r3, r3
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	b29b      	uxth	r3, r3
 800479c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	e029      	b.n	8004802 <USB_EPStartXfer+0x1256>
 80047ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d121      	bne.n	8004802 <USB_EPStartXfer+0x1256>
 80047be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047d4:	4413      	add	r3, r2
 80047d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	011a      	lsls	r2, r3, #4
 80047e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047ec:	4413      	add	r3, r2
 80047ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004800:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	895b      	ldrh	r3, [r3, #10]
 800480e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6959      	ldr	r1, [r3, #20]
 800481e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004822:	b29b      	uxth	r3, r3
 8004824:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004828:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800482c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004830:	6800      	ldr	r0, [r0, #0]
 8004832:	f000 fe31 	bl	8005498 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004858:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800485c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004864:	8013      	strh	r3, [r2, #0]
 8004866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800486e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004872:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004876:	8812      	ldrh	r2, [r2, #0]
 8004878:	f082 0210 	eor.w	r2, r2, #16
 800487c:	801a      	strh	r2, [r3, #0]
 800487e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004882:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004886:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800488a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800488e:	8812      	ldrh	r2, [r2, #0]
 8004890:	f082 0220 	eor.w	r2, r2, #32
 8004894:	801a      	strh	r2, [r3, #0]
 8004896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800489a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	441a      	add	r2, r3
 80048b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	8013      	strh	r3, [r2, #0]
 80048ce:	f000 bc9f 	b.w	8005210 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80048d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	7b1b      	ldrb	r3, [r3, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f040 80ae 	bne.w	8004a40 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80048e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699a      	ldr	r2, [r3, #24]
 80048f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d917      	bls.n	8004930 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8004900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699a      	ldr	r2, [r3, #24]
 800491c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004920:	1ad2      	subs	r2, r2, r3
 8004922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	619a      	str	r2, [r3, #24]
 800492e:	e00e      	b.n	800494e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8004930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800494e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800495c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800496a:	b29b      	uxth	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004972:	4413      	add	r3, r2
 8004974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800497c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	011a      	lsls	r2, r3, #4
 8004986:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800498a:	4413      	add	r3, r2
 800498c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004990:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d116      	bne.n	80049ca <USB_EPStartXfer+0x141e>
 800499c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049ae:	801a      	strh	r2, [r3, #0]
 80049b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	e3e8      	b.n	800519c <USB_EPStartXfer+0x1bf0>
 80049ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ce:	2b3e      	cmp	r3, #62	; 0x3e
 80049d0:	d818      	bhi.n	8004a04 <USB_EPStartXfer+0x1458>
 80049d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80049dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <USB_EPStartXfer+0x1446>
 80049e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049ec:	3301      	adds	r3, #1
 80049ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80049f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	029b      	lsls	r3, r3, #10
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a00:	801a      	strh	r2, [r3, #0]
 8004a02:	e3cb      	b.n	800519c <USB_EPStartXfer+0x1bf0>
 8004a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <USB_EPStartXfer+0x1478>
 8004a1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004a24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	029b      	lsls	r3, r3, #10
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a3c:	801a      	strh	r2, [r3, #0]
 8004a3e:	e3ad      	b.n	800519c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	78db      	ldrb	r3, [r3, #3]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	f040 8200 	bne.w	8004e52 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	785b      	ldrb	r3, [r3, #1]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f040 8091 	bne.w	8004b86 <USB_EPStartXfer+0x15da>
 8004a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a88:	4413      	add	r3, r2
 8004a8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	011a      	lsls	r2, r3, #4
 8004a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d116      	bne.n	8004ae8 <USB_EPStartXfer+0x153c>
 8004aba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004acc:	801a      	strh	r2, [r3, #0]
 8004ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ae4:	801a      	strh	r2, [r3, #0]
 8004ae6:	e083      	b.n	8004bf0 <USB_EPStartXfer+0x1644>
 8004ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b3e      	cmp	r3, #62	; 0x3e
 8004af6:	d820      	bhi.n	8004b3a <USB_EPStartXfer+0x158e>
 8004af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d004      	beq.n	8004b28 <USB_EPStartXfer+0x157c>
 8004b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b22:	3301      	adds	r3, #1
 8004b24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	029b      	lsls	r3, r3, #10
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	e05a      	b.n	8004bf0 <USB_EPStartXfer+0x1644>
 8004b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <USB_EPStartXfer+0x15be>
 8004b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b64:	3b01      	subs	r3, #1
 8004b66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	e034      	b.n	8004bf0 <USB_EPStartXfer+0x1644>
 8004b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	785b      	ldrb	r3, [r3, #1]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d12c      	bne.n	8004bf0 <USB_EPStartXfer+0x1644>
 8004b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bba:	4413      	add	r3, r2
 8004bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	011a      	lsls	r2, r3, #4
 8004bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bee:	801a      	strh	r2, [r3, #0]
 8004bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	785b      	ldrb	r3, [r3, #1]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f040 8091 	bne.w	8004d32 <USB_EPStartXfer+0x1786>
 8004c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c34:	4413      	add	r3, r2
 8004c36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	011a      	lsls	r2, r3, #4
 8004c48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d116      	bne.n	8004c94 <USB_EPStartXfer+0x16e8>
 8004c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c78:	801a      	strh	r2, [r3, #0]
 8004c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	e07c      	b.n	8004d8e <USB_EPStartXfer+0x17e2>
 8004c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ca2:	d820      	bhi.n	8004ce6 <USB_EPStartXfer+0x173a>
 8004ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d004      	beq.n	8004cd4 <USB_EPStartXfer+0x1728>
 8004cca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cd4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	029b      	lsls	r3, r3, #10
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ce2:	801a      	strh	r2, [r3, #0]
 8004ce4:	e053      	b.n	8004d8e <USB_EPStartXfer+0x17e2>
 8004ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d104      	bne.n	8004d16 <USB_EPStartXfer+0x176a>
 8004d0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d10:	3b01      	subs	r3, #1
 8004d12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	029b      	lsls	r3, r3, #10
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d2e:	801a      	strh	r2, [r3, #0]
 8004d30:	e02d      	b.n	8004d8e <USB_EPStartXfer+0x17e2>
 8004d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d125      	bne.n	8004d8e <USB_EPStartXfer+0x17e2>
 8004d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d58:	4413      	add	r3, r2
 8004d5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	011a      	lsls	r2, r3, #4
 8004d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d70:	4413      	add	r3, r2
 8004d72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d8c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 81fe 	beq.w	800519c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004dc0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <USB_EPStartXfer+0x182c>
 8004dcc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10d      	bne.n	8004df4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004dd8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 81db 	bne.w	800519c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004de6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f040 81d4 	bne.w	800519c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8004e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	441a      	add	r2, r3
 8004e38:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	8013      	strh	r3, [r2, #0]
 8004e50:	e1a4      	b.n	800519c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	78db      	ldrb	r3, [r3, #3]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	f040 819a 	bne.w	8005198 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699a      	ldr	r2, [r3, #24]
 8004e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d917      	bls.n	8004eb0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8004e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8004e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	619a      	str	r2, [r3, #24]
 8004eae:	e00e      	b.n	8004ece <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8004eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d178      	bne.n	8004fd0 <USB_EPStartXfer+0x1a24>
 8004ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f02:	4413      	add	r3, r2
 8004f04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	011a      	lsls	r2, r3, #4
 8004f16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d116      	bne.n	8004f5a <USB_EPStartXfer+0x19ae>
 8004f2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	e06b      	b.n	8005032 <USB_EPStartXfer+0x1a86>
 8004f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f5e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f60:	d818      	bhi.n	8004f94 <USB_EPStartXfer+0x19e8>
 8004f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d004      	beq.n	8004f82 <USB_EPStartXfer+0x19d6>
 8004f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	029b      	lsls	r3, r3, #10
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e04e      	b.n	8005032 <USB_EPStartXfer+0x1a86>
 8004f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <USB_EPStartXfer+0x1a08>
 8004faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	029b      	lsls	r3, r3, #10
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	e030      	b.n	8005032 <USB_EPStartXfer+0x1a86>
 8004fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	785b      	ldrb	r3, [r3, #1]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d128      	bne.n	8005032 <USB_EPStartXfer+0x1a86>
 8004fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	4413      	add	r3, r2
 8005006:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800500a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	011a      	lsls	r2, r3, #4
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	4413      	add	r3, r2
 800501e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005022:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800502a:	b29a      	uxth	r2, r3
 800502c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005036:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d178      	bne.n	8005142 <USB_EPStartXfer+0x1b96>
 8005050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005054:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506c:	b29b      	uxth	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005074:	4413      	add	r3, r2
 8005076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800507a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	011a      	lsls	r2, r3, #4
 8005088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800508c:	4413      	add	r3, r2
 800508e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005092:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d116      	bne.n	80050cc <USB_EPStartXfer+0x1b20>
 800509e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050b0:	801a      	strh	r2, [r3, #0]
 80050b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050c8:	801a      	strh	r2, [r3, #0]
 80050ca:	e067      	b.n	800519c <USB_EPStartXfer+0x1bf0>
 80050cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d0:	2b3e      	cmp	r3, #62	; 0x3e
 80050d2:	d818      	bhi.n	8005106 <USB_EPStartXfer+0x1b5a>
 80050d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80050de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <USB_EPStartXfer+0x1b48>
 80050ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ee:	3301      	adds	r3, #1
 80050f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80050f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	029b      	lsls	r3, r3, #10
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	e04a      	b.n	800519c <USB_EPStartXfer+0x1bf0>
 8005106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <USB_EPStartXfer+0x1b7a>
 800511c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005120:	3b01      	subs	r3, #1
 8005122:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800512a:	b29b      	uxth	r3, r3
 800512c:	029b      	lsls	r3, r3, #10
 800512e:	b29b      	uxth	r3, r3
 8005130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005138:	b29a      	uxth	r2, r3
 800513a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800513e:	801a      	strh	r2, [r3, #0]
 8005140:	e02c      	b.n	800519c <USB_EPStartXfer+0x1bf0>
 8005142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d124      	bne.n	800519c <USB_EPStartXfer+0x1bf0>
 8005152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005156:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005160:	b29b      	uxth	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005168:	4413      	add	r3, r2
 800516a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800516e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	011a      	lsls	r2, r3, #4
 800517c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005180:	4413      	add	r3, r2
 8005182:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005186:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800518a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518e:	b29a      	uxth	r2, r3
 8005190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	e001      	b.n	800519c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e03a      	b.n	8005212 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800519c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80051c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80051ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80051d2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80051d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80051de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80051fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520c:	b29b      	uxth	r3, r3
 800520e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d020      	beq.n	8005270 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005244:	81bb      	strh	r3, [r7, #12]
 8005246:	89bb      	ldrh	r3, [r7, #12]
 8005248:	f083 0310 	eor.w	r3, r3, #16
 800524c:	81bb      	strh	r3, [r7, #12]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	89bb      	ldrh	r3, [r7, #12]
 800525a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526a:	b29b      	uxth	r3, r3
 800526c:	8013      	strh	r3, [r2, #0]
 800526e:	e01f      	b.n	80052b0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	81fb      	strh	r3, [r7, #14]
 8005288:	89fb      	ldrh	r3, [r7, #14]
 800528a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800528e:	81fb      	strh	r3, [r7, #14]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	89fb      	ldrh	r3, [r7, #14]
 800529c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	7b1b      	ldrb	r3, [r3, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f040 809d 	bne.w	800540a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d04c      	beq.n	8005372 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	823b      	strh	r3, [r7, #16]
 80052e6:	8a3b      	ldrh	r3, [r7, #16]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01b      	beq.n	8005328 <USB_EPClearStall+0x6c>
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005306:	81fb      	strh	r3, [r7, #14]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	441a      	add	r2, r3
 8005312:	89fb      	ldrh	r3, [r7, #14]
 8005314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800531c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005320:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005324:	b29b      	uxth	r3, r3
 8005326:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	78db      	ldrb	r3, [r3, #3]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d06c      	beq.n	800540a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005346:	81bb      	strh	r3, [r7, #12]
 8005348:	89bb      	ldrh	r3, [r7, #12]
 800534a:	f083 0320 	eor.w	r3, r3, #32
 800534e:	81bb      	strh	r3, [r7, #12]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	89bb      	ldrh	r3, [r7, #12]
 800535c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536c:	b29b      	uxth	r3, r3
 800536e:	8013      	strh	r3, [r2, #0]
 8005370:	e04b      	b.n	800540a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	82fb      	strh	r3, [r7, #22]
 8005380:	8afb      	ldrh	r3, [r7, #22]
 8005382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01b      	beq.n	80053c2 <USB_EPClearStall+0x106>
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a0:	82bb      	strh	r3, [r7, #20]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	8abb      	ldrh	r3, [r7, #20]
 80053ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053be:	b29b      	uxth	r3, r3
 80053c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d8:	827b      	strh	r3, [r7, #18]
 80053da:	8a7b      	ldrh	r3, [r7, #18]
 80053dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053e0:	827b      	strh	r3, [r7, #18]
 80053e2:	8a7b      	ldrh	r3, [r7, #18]
 80053e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053e8:	827b      	strh	r3, [r7, #18]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	441a      	add	r2, r3
 80053f4:	8a7b      	ldrh	r3, [r7, #18]
 80053f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005406:	b29b      	uxth	r3, r3
 8005408:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr

08005416 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	460b      	mov	r3, r1
 8005420:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d103      	bne.n	8005430 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2280      	movs	r2, #128	; 0x80
 800542c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr

0800543c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr

08005450 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr

08005464 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005472:	b29b      	uxth	r3, r3
 8005474:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005476:	68fb      	ldr	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr

08005482 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005498:	b480      	push	{r7}
 800549a:	b08d      	sub	sp, #52	; 0x34
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	4611      	mov	r1, r2
 80054a4:	461a      	mov	r2, r3
 80054a6:	460b      	mov	r3, r1
 80054a8:	80fb      	strh	r3, [r7, #6]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80054ae:	88bb      	ldrh	r3, [r7, #4]
 80054b0:	3301      	adds	r3, #1
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	005a      	lsls	r2, r3, #1
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d0:	e01e      	b.n	8005510 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	3301      	adds	r3, #1
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	3302      	adds	r3, #2
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	3302      	adds	r3, #2
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	3301      	adds	r3, #1
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	3b01      	subs	r3, #1
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1dd      	bne.n	80054d2 <USB_WritePMA+0x3a>
  }
}
 8005516:	bf00      	nop
 8005518:	bf00      	nop
 800551a:	3734      	adds	r7, #52	; 0x34
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005522:	b480      	push	{r7}
 8005524:	b08b      	sub	sp, #44	; 0x2c
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	4611      	mov	r1, r2
 800552e:	461a      	mov	r2, r3
 8005530:	460b      	mov	r3, r1
 8005532:	80fb      	strh	r3, [r7, #6]
 8005534:	4613      	mov	r3, r2
 8005536:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005538:	88bb      	ldrh	r3, [r7, #4]
 800553a:	085b      	lsrs	r3, r3, #1
 800553c:	b29b      	uxth	r3, r3
 800553e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	005a      	lsls	r2, r3, #1
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005554:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
 800555a:	e01b      	b.n	8005594 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	3302      	adds	r3, #2
 8005568:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3301      	adds	r3, #1
 8005576:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	b2da      	uxtb	r2, r3
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	3301      	adds	r3, #1
 8005586:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	3302      	adds	r3, #2
 800558c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	3b01      	subs	r3, #1
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e0      	bne.n	800555c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800559a:	88bb      	ldrh	r3, [r7, #4]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	701a      	strb	r2, [r3, #0]
  }
}
 80055b6:	bf00      	nop
 80055b8:	372c      	adds	r7, #44	; 0x2c
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr

080055c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 80055c4:	f000 fa80 	bl	8005ac8 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 80055c8:	2200      	movs	r2, #0
 80055ca:	490e      	ldr	r1, [pc, #56]	; (8005604 <MX_USB_DEVICE_Init+0x44>)
 80055cc:	480e      	ldr	r0, [pc, #56]	; (8005608 <MX_USB_DEVICE_Init+0x48>)
 80055ce:	f000 ffa7 	bl	8006520 <USBD_Init>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 80055d8:	f7fa fe4f 	bl	800027a <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 80055dc:	490b      	ldr	r1, [pc, #44]	; (800560c <MX_USB_DEVICE_Init+0x4c>)
 80055de:	480a      	ldr	r0, [pc, #40]	; (8005608 <MX_USB_DEVICE_Init+0x48>)
 80055e0:	f000 ffca 	bl	8006578 <USBD_RegisterClass>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80055ea:	f7fa fe46 	bl	800027a <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 80055ee:	4806      	ldr	r0, [pc, #24]	; (8005608 <MX_USB_DEVICE_Init+0x48>)
 80055f0:	f001 f800 	bl	80065f4 <USBD_Start>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <MX_USB_DEVICE_Init+0x3e>
  {
    Error_Handler();
 80055fa:	f7fa fe3e 	bl	800027a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80055fe:	bf00      	nop
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000014 	.word	0x20000014
 8005608:	20000580 	.word	0x20000580
 800560c:	20000064 	.word	0x20000064

08005610 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	6039      	str	r1, [r7, #0]
 800561a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2212      	movs	r2, #18
 8005620:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8005622:	4b03      	ldr	r3, [pc, #12]	; (8005630 <USBD_DeviceDescriptor+0x20>)
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	20000030 	.word	0x20000030

08005634 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	6039      	str	r1, [r7, #0]
 800563e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2204      	movs	r2, #4
 8005644:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005646:	4b03      	ldr	r3, [pc, #12]	; (8005654 <USBD_LangIDStrDescriptor+0x20>)
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000044 	.word	0x20000044

08005658 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	6039      	str	r1, [r7, #0]
 8005662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d105      	bne.n	8005676 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	4907      	ldr	r1, [pc, #28]	; (800568c <USBD_ProductStrDescriptor+0x34>)
 800566e:	4808      	ldr	r0, [pc, #32]	; (8005690 <USBD_ProductStrDescriptor+0x38>)
 8005670:	f001 ff87 	bl	8007582 <USBD_GetString>
 8005674:	e004      	b.n	8005680 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	4904      	ldr	r1, [pc, #16]	; (800568c <USBD_ProductStrDescriptor+0x34>)
 800567a:	4805      	ldr	r0, [pc, #20]	; (8005690 <USBD_ProductStrDescriptor+0x38>)
 800567c:	f001 ff81 	bl	8007582 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005680:	4b02      	ldr	r3, [pc, #8]	; (800568c <USBD_ProductStrDescriptor+0x34>)
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	2000089c 	.word	0x2000089c
 8005690:	08007c20 	.word	0x08007c20

08005694 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	6039      	str	r1, [r7, #0]
 800569e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	4904      	ldr	r1, [pc, #16]	; (80056b4 <USBD_ManufacturerStrDescriptor+0x20>)
 80056a4:	4804      	ldr	r0, [pc, #16]	; (80056b8 <USBD_ManufacturerStrDescriptor+0x24>)
 80056a6:	f001 ff6c 	bl	8007582 <USBD_GetString>
  return USBD_StrDesc;
 80056aa:	4b02      	ldr	r3, [pc, #8]	; (80056b4 <USBD_ManufacturerStrDescriptor+0x20>)
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	2000089c 	.word	0x2000089c
 80056b8:	08007c38 	.word	0x08007c38

080056bc <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	6039      	str	r1, [r7, #0]
 80056c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	221a      	movs	r2, #26
 80056cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80056ce:	f000 f843 	bl	8005758 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80056d2:	4b02      	ldr	r3, [pc, #8]	; (80056dc <USBD_SerialStrDescriptor+0x20>)
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000048 	.word	0x20000048

080056e0 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	6039      	str	r1, [r7, #0]
 80056ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d105      	bne.n	80056fe <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	4907      	ldr	r1, [pc, #28]	; (8005714 <USBD_ConfigStrDescriptor+0x34>)
 80056f6:	4808      	ldr	r0, [pc, #32]	; (8005718 <USBD_ConfigStrDescriptor+0x38>)
 80056f8:	f001 ff43 	bl	8007582 <USBD_GetString>
 80056fc:	e004      	b.n	8005708 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	4904      	ldr	r1, [pc, #16]	; (8005714 <USBD_ConfigStrDescriptor+0x34>)
 8005702:	4805      	ldr	r0, [pc, #20]	; (8005718 <USBD_ConfigStrDescriptor+0x38>)
 8005704:	f001 ff3d 	bl	8007582 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005708:	4b02      	ldr	r3, [pc, #8]	; (8005714 <USBD_ConfigStrDescriptor+0x34>)
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	2000089c 	.word	0x2000089c
 8005718:	08007c4c 	.word	0x08007c4c

0800571c <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	6039      	str	r1, [r7, #0]
 8005726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d105      	bne.n	800573a <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	4907      	ldr	r1, [pc, #28]	; (8005750 <USBD_InterfaceStrDescriptor+0x34>)
 8005732:	4808      	ldr	r0, [pc, #32]	; (8005754 <USBD_InterfaceStrDescriptor+0x38>)
 8005734:	f001 ff25 	bl	8007582 <USBD_GetString>
 8005738:	e004      	b.n	8005744 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	4904      	ldr	r1, [pc, #16]	; (8005750 <USBD_InterfaceStrDescriptor+0x34>)
 800573e:	4805      	ldr	r0, [pc, #20]	; (8005754 <USBD_InterfaceStrDescriptor+0x38>)
 8005740:	f001 ff1f 	bl	8007582 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005744:	4b02      	ldr	r3, [pc, #8]	; (8005750 <USBD_InterfaceStrDescriptor+0x34>)
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	2000089c 	.word	0x2000089c
 8005754:	08007c5c 	.word	0x08007c5c

08005758 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800575e:	4b0f      	ldr	r3, [pc, #60]	; (800579c <Get_SerialNum+0x44>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005764:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <Get_SerialNum+0x48>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800576a:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <Get_SerialNum+0x4c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4413      	add	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800577e:	2208      	movs	r2, #8
 8005780:	4909      	ldr	r1, [pc, #36]	; (80057a8 <Get_SerialNum+0x50>)
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f814 	bl	80057b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005788:	2204      	movs	r2, #4
 800578a:	4908      	ldr	r1, [pc, #32]	; (80057ac <Get_SerialNum+0x54>)
 800578c:	68b8      	ldr	r0, [r7, #8]
 800578e:	f000 f80f 	bl	80057b0 <IntToUnicode>
  }
}
 8005792:	bf00      	nop
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	1ffff7e8 	.word	0x1ffff7e8
 80057a0:	1ffff7ec 	.word	0x1ffff7ec
 80057a4:	1ffff7f0 	.word	0x1ffff7f0
 80057a8:	2000004a 	.word	0x2000004a
 80057ac:	2000005a 	.word	0x2000005a

080057b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]
 80057c6:	e027      	b.n	8005818 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	0f1b      	lsrs	r3, r3, #28
 80057cc:	2b09      	cmp	r3, #9
 80057ce:	d80b      	bhi.n	80057e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	0f1b      	lsrs	r3, r3, #28
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	4619      	mov	r1, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	440b      	add	r3, r1
 80057e0:	3230      	adds	r2, #48	; 0x30
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e00a      	b.n	80057fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	0f1b      	lsrs	r3, r3, #28
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4619      	mov	r1, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	440b      	add	r3, r1
 80057f8:	3237      	adds	r2, #55	; 0x37
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	3301      	adds	r3, #1
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	4413      	add	r3, r2
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	3301      	adds	r3, #1
 8005816:	75fb      	strb	r3, [r7, #23]
 8005818:	7dfa      	ldrb	r2, [r7, #23]
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	429a      	cmp	r2, r3
 800581e:	d3d3      	bcc.n	80057c8 <IntToUnicode+0x18>
  }
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
#endif
#if (USBD_USE_CDC_RNDIS == 1)
  USBD_CDC_RNDIS.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.Init(pdev, cfgidx);
 8005838:	4b08      	ldr	r3, [pc, #32]	; (800585c <USBD_COMPOSITE_Init+0x30>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	4611      	mov	r1, r2
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <USBD_COMPOSITE_Init+0x34>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	78fa      	ldrb	r2, [r7, #3]
 800584a:	4611      	mov	r1, r2
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	2000018c 	.word	0x2000018c
 8005860:	200000b0 	.word	0x200000b0

08005864 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
#endif
#if (USBD_USE_CDC_RNDIS == 1)
  USBD_CDC_RNDIS.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.DeInit(pdev, cfgidx);
 8005870:	4b08      	ldr	r3, [pc, #32]	; (8005894 <USBD_COMPOSITE_DeInit+0x30>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	78fa      	ldrb	r2, [r7, #3]
 8005876:	4611      	mov	r1, r2
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <USBD_COMPOSITE_DeInit+0x34>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	4611      	mov	r1, r2
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	2000018c 	.word	0x2000018c
 8005898:	200000b0 	.word	0x200000b0

0800589c <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  {
    return USBD_CDC_RNDIS.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_MOUSE == 1)
  if (LOBYTE(req->wIndex) == HID_MOUSE_ITF_NBR)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	889b      	ldrh	r3, [r3, #4]
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	4b0e      	ldr	r3, [pc, #56]	; (80058e8 <USBD_COMPOSITE_Setup+0x4c>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d106      	bne.n	80058c2 <USBD_COMPOSITE_Setup+0x26>
  {
    return USBD_HID_MOUSE.Setup(pdev, req);
 80058b4:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <USBD_COMPOSITE_Setup+0x50>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
 80058be:	4603      	mov	r3, r0
 80058c0:	e00e      	b.n	80058e0 <USBD_COMPOSITE_Setup+0x44>
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (LOBYTE(req->wIndex) == HID_KEYBOARD_ITF_NBR)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	889b      	ldrh	r3, [r3, #4]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <USBD_COMPOSITE_Setup+0x54>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d106      	bne.n	80058de <USBD_COMPOSITE_Setup+0x42>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
 80058d0:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <USBD_COMPOSITE_Setup+0x58>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	4798      	blx	r3
 80058da:	4603      	mov	r3, r0
 80058dc:	e000      	b.n	80058e0 <USBD_COMPOSITE_Setup+0x44>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 80058de:	2303      	movs	r3, #3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20000b68 	.word	0x20000b68
 80058ec:	2000018c 	.word	0x2000018c
 80058f0:	20000b54 	.word	0x20000b54
 80058f4:	200000b0 	.word	0x200000b0

080058f8 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	70fb      	strb	r3, [r7, #3]
  {
    return USBD_CDC_RNDIS.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_MOUSE == 1)
  if (epnum == (HID_MOUSE_IN_EP & 0x7F))
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	4b11      	ldr	r3, [pc, #68]	; (800594c <USBD_COMPOSITE_DataIn+0x54>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800590e:	429a      	cmp	r2, r3
 8005910:	d107      	bne.n	8005922 <USBD_COMPOSITE_DataIn+0x2a>
  {
    return USBD_HID_MOUSE.DataIn(pdev, epnum);
 8005912:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <USBD_COMPOSITE_DataIn+0x58>)
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	78fa      	ldrb	r2, [r7, #3]
 8005918:	4611      	mov	r1, r2
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	4798      	blx	r3
 800591e:	4603      	mov	r3, r0
 8005920:	e00f      	b.n	8005942 <USBD_COMPOSITE_DataIn+0x4a>
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (epnum == (HID_KEYBOARD_IN_EP & 0x7F))
 8005922:	78fa      	ldrb	r2, [r7, #3]
 8005924:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <USBD_COMPOSITE_DataIn+0x5c>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592c:	429a      	cmp	r2, r3
 800592e:	d107      	bne.n	8005940 <USBD_COMPOSITE_DataIn+0x48>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
 8005930:	4b09      	ldr	r3, [pc, #36]	; (8005958 <USBD_COMPOSITE_DataIn+0x60>)
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	4611      	mov	r1, r2
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
 800593c:	4603      	mov	r3, r0
 800593e:	e000      	b.n	8005942 <USBD_COMPOSITE_DataIn+0x4a>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005940:	2303      	movs	r3, #3
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	2000018b 	.word	0x2000018b
 8005950:	2000018c 	.word	0x2000018c
 8005954:	200000ae 	.word	0x200000ae
 8005958:	200000b0 	.word	0x200000b0

0800595c <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr

08005970 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr

08005998 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr

080059c8 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 80059d4:	2303      	movs	r3, #3
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	223b      	movs	r2, #59	; 0x3b
 80059ec:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80059ee:	4b03      	ldr	r3, [pc, #12]	; (80059fc <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	20000ad8 	.word	0x20000ad8

08005a00 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	223b      	movs	r2, #59	; 0x3b
 8005a0c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8005a0e:	4b03      	ldr	r3, [pc, #12]	; (8005a1c <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	20000a9c 	.word	0x20000a9c

08005a20 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	223b      	movs	r2, #59	; 0x3b
 8005a2c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005a2e:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20000ad8 	.word	0x20000ad8

08005a40 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	220a      	movs	r2, #10
 8005a4c:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8005a4e:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	200000a4 	.word	0x200000a4

08005a60 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8005a6e:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <USBD_COMPOSITE_GetUsrStringDesc+0x50>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	7afa      	ldrb	r2, [r7, #11]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d815      	bhi.n	8005aa4 <USBD_COMPOSITE_GetUsrStringDesc+0x44>
    {
      USBD_GetString((uint8_t *)CDC_RNDIS_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_MOUSE == 1)
    if (index == HID_MOUSE_STR_DESC_IDX)
 8005a78:	4b0e      	ldr	r3, [pc, #56]	; (8005ab4 <USBD_COMPOSITE_GetUsrStringDesc+0x54>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	7afa      	ldrb	r2, [r7, #11]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d104      	bne.n	8005a8c <USBD_COMPOSITE_GetUsrStringDesc+0x2c>
    {
      USBD_GetString((uint8_t *)HID_MOUSE_STR_DESC, USBD_StrDesc, length);
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	490c      	ldr	r1, [pc, #48]	; (8005ab8 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 8005a86:	480d      	ldr	r0, [pc, #52]	; (8005abc <USBD_COMPOSITE_GetUsrStringDesc+0x5c>)
 8005a88:	f001 fd7b 	bl	8007582 <USBD_GetString>
    }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    if (index == HID_KEYBOARD_STR_DESC_IDX)
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <USBD_COMPOSITE_GetUsrStringDesc+0x60>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	7afa      	ldrb	r2, [r7, #11]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d104      	bne.n	8005aa0 <USBD_COMPOSITE_GetUsrStringDesc+0x40>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	4907      	ldr	r1, [pc, #28]	; (8005ab8 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 8005a9a:	480a      	ldr	r0, [pc, #40]	; (8005ac4 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
 8005a9c:	f001 fd71 	bl	8007582 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 8005aa2:	e000      	b.n	8005aa6 <USBD_COMPOSITE_GetUsrStringDesc+0x46>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8005aa4:	2300      	movs	r3, #0
  }
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200000a0 	.word	0x200000a0
 8005ab4:	20000b69 	.word	0x20000b69
 8005ab8:	20000b14 	.word	0x20000b14
 8005abc:	08007c70 	.word	0x08007c70
 8005ac0:	20000b55 	.word	0x20000b55
 8005ac4:	08007c80 	.word	0x08007c80

08005ac8 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
  uint16_t len = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8005ad6:	2381      	movs	r3, #129	; 0x81
 8005ad8:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8005ada:	2301      	movs	r3, #1
 8005adc:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	727b      	strb	r3, [r7, #9]
  interface_no_track += 2;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_MOUSE == 1)
  ptr = USBD_HID_MOUSE.GetFSConfigDescriptor(&len);
 8005ae2:	4b62      	ldr	r3, [pc, #392]	; (8005c6c <USBD_COMPOSITE_Mount_Class+0x1a4>)
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	1d3a      	adds	r2, r7, #4
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4798      	blx	r3
 8005aec:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Mouse_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8005aee:	4b60      	ldr	r3, [pc, #384]	; (8005c70 <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	7afa      	ldrb	r2, [r7, #11]
 8005af4:	7a79      	ldrb	r1, [r7, #9]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fce4 	bl	80064c4 <USBD_Update_HID_Mouse_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_MOUSE_DESC, ptr + 0x09, len - 0x09);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3309      	adds	r3, #9
 8005b00:	88ba      	ldrh	r2, [r7, #4]
 8005b02:	3a09      	subs	r2, #9
 8005b04:	4619      	mov	r1, r3
 8005b06:	485b      	ldr	r0, [pc, #364]	; (8005c74 <USBD_COMPOSITE_Mount_Class+0x1ac>)
 8005b08:	f002 f860 	bl	8007bcc <memcpy>

  ptr = USBD_HID_MOUSE.GetHSConfigDescriptor(&len);
 8005b0c:	4b57      	ldr	r3, [pc, #348]	; (8005c6c <USBD_COMPOSITE_Mount_Class+0x1a4>)
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	1d3a      	adds	r2, r7, #4
 8005b12:	4610      	mov	r0, r2
 8005b14:	4798      	blx	r3
 8005b16:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Mouse_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8005b18:	4b55      	ldr	r3, [pc, #340]	; (8005c70 <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	7afa      	ldrb	r2, [r7, #11]
 8005b1e:	7a79      	ldrb	r1, [r7, #9]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fccf 	bl	80064c4 <USBD_Update_HID_Mouse_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_MOUSE_DESC, ptr + 0x09, len - 0x09);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3309      	adds	r3, #9
 8005b2a:	88ba      	ldrh	r2, [r7, #4]
 8005b2c:	3a09      	subs	r2, #9
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4851      	ldr	r0, [pc, #324]	; (8005c78 <USBD_COMPOSITE_Mount_Class+0x1b0>)
 8005b32:	f002 f84b 	bl	8007bcc <memcpy>

  in_ep_track += 1;
 8005b36:	7afb      	ldrb	r3, [r7, #11]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 8005b3c:	7a7b      	ldrb	r3, [r7, #9]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8005b42:	4b4b      	ldr	r3, [pc, #300]	; (8005c70 <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	3301      	adds	r3, #1
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	4b49      	ldr	r3, [pc, #292]	; (8005c70 <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005b4c:	701a      	strb	r2, [r3, #0]
#endif

#if (USBD_USE_HID_KEYBOARD == 1)
  ptr = USBD_HID_KEYBOARD.GetFSConfigDescriptor(&len);
 8005b4e:	4b4b      	ldr	r3, [pc, #300]	; (8005c7c <USBD_COMPOSITE_Mount_Class+0x1b4>)
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	1d3a      	adds	r2, r7, #4
 8005b54:	4610      	mov	r0, r2
 8005b56:	4798      	blx	r3
 8005b58:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8005b5a:	4b45      	ldr	r3, [pc, #276]	; (8005c70 <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	7afa      	ldrb	r2, [r7, #11]
 8005b60:	7a79      	ldrb	r1, [r7, #9]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 faa0 	bl	80060a8 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3309      	adds	r3, #9
 8005b6c:	88ba      	ldrh	r2, [r7, #4]
 8005b6e:	3a09      	subs	r2, #9
 8005b70:	4619      	mov	r1, r3
 8005b72:	4843      	ldr	r0, [pc, #268]	; (8005c80 <USBD_COMPOSITE_Mount_Class+0x1b8>)
 8005b74:	f002 f82a 	bl	8007bcc <memcpy>

  ptr = USBD_HID_KEYBOARD.GetHSConfigDescriptor(&len);
 8005b78:	4b40      	ldr	r3, [pc, #256]	; (8005c7c <USBD_COMPOSITE_Mount_Class+0x1b4>)
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	1d3a      	adds	r2, r7, #4
 8005b7e:	4610      	mov	r0, r2
 8005b80:	4798      	blx	r3
 8005b82:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8005b84:	4b3a      	ldr	r3, [pc, #232]	; (8005c70 <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	7afa      	ldrb	r2, [r7, #11]
 8005b8a:	7a79      	ldrb	r1, [r7, #9]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fa8b 	bl	80060a8 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3309      	adds	r3, #9
 8005b96:	88ba      	ldrh	r2, [r7, #4]
 8005b98:	3a09      	subs	r2, #9
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4839      	ldr	r0, [pc, #228]	; (8005c84 <USBD_COMPOSITE_Mount_Class+0x1bc>)
 8005b9e:	f002 f815 	bl	8007bcc <memcpy>

  in_ep_track += 1;
 8005ba2:	7afb      	ldrb	r3, [r7, #11]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 8005ba8:	7a7b      	ldrb	r3, [r7, #9]
 8005baa:	3301      	adds	r3, #1
 8005bac:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8005bae:	4b30      	ldr	r3, [pc, #192]	; (8005c70 <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	4b2e      	ldr	r3, [pc, #184]	; (8005c70 <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005bb8:	701a      	strb	r2, [r3, #0]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8005bba:	233b      	movs	r3, #59	; 0x3b
 8005bbc:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8005bbe:	4b32      	ldr	r3, [pc, #200]	; (8005c88 <USBD_COMPOSITE_Mount_Class+0x1c0>)
 8005bc0:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2209      	movs	r2, #9
 8005bc6:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	2202      	movs	r2, #2
 8005bce:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	88fa      	ldrh	r2, [r7, #6]
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3303      	adds	r3, #3
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3304      	adds	r3, #4
 8005bec:	7a7a      	ldrb	r2, [r7, #9]
 8005bee:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3305      	adds	r3, #5
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3306      	adds	r3, #6
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3307      	adds	r3, #7
 8005c04:	22c0      	movs	r2, #192	; 0xc0
 8005c06:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	2232      	movs	r2, #50	; 0x32
 8005c0e:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8005c10:	4b1e      	ldr	r3, [pc, #120]	; (8005c8c <USBD_COMPOSITE_Mount_Class+0x1c4>)
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2209      	movs	r2, #9
 8005c18:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	2202      	movs	r2, #2
 8005c20:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3302      	adds	r3, #2
 8005c26:	88fa      	ldrh	r2, [r7, #6]
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3303      	adds	r3, #3
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	7a7a      	ldrb	r2, [r7, #9]
 8005c40:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3305      	adds	r3, #5
 8005c46:	2201      	movs	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3306      	adds	r3, #6
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3307      	adds	r3, #7
 8005c56:	22c0      	movs	r2, #192	; 0xc0
 8005c58:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	2232      	movs	r2, #50	; 0x32
 8005c60:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	2000018c 	.word	0x2000018c
 8005c70:	200000a0 	.word	0x200000a0
 8005c74:	20000aa5 	.word	0x20000aa5
 8005c78:	20000ae1 	.word	0x20000ae1
 8005c7c:	200000b0 	.word	0x200000b0
 8005c80:	20000abe 	.word	0x20000abe
 8005c84:	20000afa 	.word	0x20000afa
 8005c88:	20000ad8 	.word	0x20000ad8
 8005c8c:	20000a9c 	.word	0x20000a9c

08005c90 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_Keyboard_HandleTypeDef *hhid;

  hhid = &USBD_HID_KBD_Instace;
 8005c9c:	4b24      	ldr	r3, [pc, #144]	; (8005d30 <USBD_HID_Init+0xa0>)
 8005c9e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d105      	bne.n	8005cb2 <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Keyboard = NULL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    return (uint8_t)USBD_EMEM;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e03a      	b.n	8005d28 <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Keyboard = (void *)hhid;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	7c1b      	ldrb	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10d      	bne.n	8005cde <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_HS_BINTERVAL;
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <USBD_HID_Init+0xa4>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f003 020f 	and.w	r2, r3, #15
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	3326      	adds	r3, #38	; 0x26
 8005cd8:	2207      	movs	r2, #7
 8005cda:	801a      	strh	r2, [r3, #0]
 8005cdc:	e00c      	b.n	8005cf8 <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_FS_BINTERVAL;
 8005cde:	4b15      	ldr	r3, [pc, #84]	; (8005d34 <USBD_HID_Init+0xa4>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f003 020f 	and.w	r2, r3, #15
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	3326      	adds	r3, #38	; 0x26
 8005cf4:	220a      	movs	r2, #10
 8005cf6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_KEYBOARD_IN_EP, USBD_EP_TYPE_INTR, HID_KEYBOARD_EPIN_SIZE);
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <USBD_HID_Init+0xa4>)
 8005cfa:	7819      	ldrb	r1, [r3, #0]
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	2203      	movs	r2, #3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f001 fe02 	bl	800790a <USBD_LL_OpenEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 1U;
 8005d06:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <USBD_HID_Init+0xa4>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f003 020f 	and.w	r2, r3, #15
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	3324      	adds	r3, #36	; 0x24
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	801a      	strh	r2, [r3, #0]

  hhid->state = KEYBOARD_HID_IDLE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20000b58 	.word	0x20000b58
 8005d34:	200000ae 	.word	0x200000ae

08005d38 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_KEYBOARD_IN_EP);
 8005d44:	4b16      	ldr	r3, [pc, #88]	; (8005da0 <USBD_HID_DeInit+0x68>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 fe03 	bl	8007956 <USBD_LL_CloseEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 0U;
 8005d50:	4b13      	ldr	r3, [pc, #76]	; (8005da0 <USBD_HID_DeInit+0x68>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	f003 020f 	and.w	r2, r3, #15
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	3324      	adds	r3, #36	; 0x24
 8005d66:	2200      	movs	r2, #0
 8005d68:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = 0U;
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <USBD_HID_DeInit+0x68>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	f003 020f 	and.w	r2, r3, #15
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	3326      	adds	r3, #38	; 0x26
 8005d80:	2200      	movs	r2, #0
 8005d82:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Keyboard != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Keyboard);
#endif
    pdev->pClassData_HID_Keyboard = NULL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }

  return (uint8_t)USBD_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	200000ae 	.word	0x200000ae

08005da4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005db4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e0e8      	b.n	8005f9a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d046      	beq.n	8005e62 <USBD_HID_Setup+0xbe>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	f040 80d8 	bne.w	8005f8a <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	785b      	ldrb	r3, [r3, #1]
 8005dde:	3b02      	subs	r3, #2
 8005de0:	2b09      	cmp	r3, #9
 8005de2:	d836      	bhi.n	8005e52 <USBD_HID_Setup+0xae>
 8005de4:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <USBD_HID_Setup+0x48>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e43 	.word	0x08005e43
 8005df0:	08005e23 	.word	0x08005e23
 8005df4:	08005e53 	.word	0x08005e53
 8005df8:	08005e53 	.word	0x08005e53
 8005dfc:	08005e53 	.word	0x08005e53
 8005e00:	08005e53 	.word	0x08005e53
 8005e04:	08005e53 	.word	0x08005e53
 8005e08:	08005e53 	.word	0x08005e53
 8005e0c:	08005e31 	.word	0x08005e31
 8005e10:	08005e15 	.word	0x08005e15
    {
    case HID_KEYBOARD_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	885b      	ldrh	r3, [r3, #2]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	601a      	str	r2, [r3, #0]
      break;
 8005e20:	e01e      	b.n	8005e60 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 fc09 	bl	8007640 <USBD_CtlSendData>
      break;
 8005e2e:	e017      	b.n	8005e60 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	885b      	ldrh	r3, [r3, #2]
 8005e34:	0a1b      	lsrs	r3, r3, #8
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	605a      	str	r2, [r3, #4]
      break;
 8005e40:	e00e      	b.n	8005e60 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3304      	adds	r3, #4
 8005e46:	2201      	movs	r2, #1
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 fbf8 	bl	8007640 <USBD_CtlSendData>
      break;
 8005e50:	e006      	b.n	8005e60 <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f001 fb83 	bl	8007560 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5e:	bf00      	nop
    }
    break;
 8005e60:	e09a      	b.n	8005f98 <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	2b0b      	cmp	r3, #11
 8005e68:	f200 8086 	bhi.w	8005f78 <USBD_HID_Setup+0x1d4>
 8005e6c:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <USBD_HID_Setup+0xd0>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005ea5 	.word	0x08005ea5
 8005e78:	08005f87 	.word	0x08005f87
 8005e7c:	08005f79 	.word	0x08005f79
 8005e80:	08005f79 	.word	0x08005f79
 8005e84:	08005f79 	.word	0x08005f79
 8005e88:	08005f79 	.word	0x08005f79
 8005e8c:	08005ecf 	.word	0x08005ecf
 8005e90:	08005f79 	.word	0x08005f79
 8005e94:	08005f79 	.word	0x08005f79
 8005e98:	08005f79 	.word	0x08005f79
 8005e9c:	08005f27 	.word	0x08005f27
 8005ea0:	08005f51 	.word	0x08005f51
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d107      	bne.n	8005ec0 <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005eb0:	f107 030a 	add.w	r3, r7, #10
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 fbc1 	bl	8007640 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005ebe:	e063      	b.n	8005f88 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f001 fb4c 	bl	8007560 <USBD_CtlError>
        ret = USBD_FAIL;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	75fb      	strb	r3, [r7, #23]
      break;
 8005ecc:	e05c      	b.n	8005f88 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_KEYBOARD_REPORT_DESC)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	885b      	ldrh	r3, [r3, #2]
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b22      	cmp	r3, #34	; 0x22
 8005ed8:	d108      	bne.n	8005eec <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	88db      	ldrh	r3, [r3, #6]
 8005ede:	2b3f      	cmp	r3, #63	; 0x3f
 8005ee0:	bf28      	it	cs
 8005ee2:	233f      	movcs	r3, #63	; 0x3f
 8005ee4:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_KEYBOARD_ReportDesc;
 8005ee6:	4b2f      	ldr	r3, [pc, #188]	; (8005fa4 <USBD_HID_Setup+0x200>)
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	e015      	b.n	8005f18 <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_KEYBOARD_DESCRIPTOR_TYPE)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	885b      	ldrh	r3, [r3, #2]
 8005ef0:	0a1b      	lsrs	r3, r3, #8
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b21      	cmp	r3, #33	; 0x21
 8005ef6:	d108      	bne.n	8005f0a <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_KEYBOARD_Desc;
 8005ef8:	4b2b      	ldr	r3, [pc, #172]	; (8005fa8 <USBD_HID_Setup+0x204>)
 8005efa:	613b      	str	r3, [r7, #16]
        len = MIN(HID_KEYBOARD_DESC_SIZE, req->wLength);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	88db      	ldrh	r3, [r3, #6]
 8005f00:	2b09      	cmp	r3, #9
 8005f02:	bf28      	it	cs
 8005f04:	2309      	movcs	r3, #9
 8005f06:	82bb      	strh	r3, [r7, #20]
 8005f08:	e006      	b.n	8005f18 <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 fb27 	bl	8007560 <USBD_CtlError>
        ret = USBD_FAIL;
 8005f12:	2303      	movs	r3, #3
 8005f14:	75fb      	strb	r3, [r7, #23]
        break;
 8005f16:	e037      	b.n	8005f88 <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f18:	8abb      	ldrh	r3, [r7, #20]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	6939      	ldr	r1, [r7, #16]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 fb8e 	bl	8007640 <USBD_CtlSendData>
      break;
 8005f24:	e030      	b.n	8005f88 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d107      	bne.n	8005f42 <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3308      	adds	r3, #8
 8005f36:	2201      	movs	r2, #1
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f001 fb80 	bl	8007640 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005f40:	e022      	b.n	8005f88 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 fb0b 	bl	8007560 <USBD_CtlError>
        ret = USBD_FAIL;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f4e:	e01b      	b.n	8005f88 <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d106      	bne.n	8005f6a <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	885b      	ldrh	r3, [r3, #2]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005f68:	e00e      	b.n	8005f88 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 faf7 	bl	8007560 <USBD_CtlError>
        ret = USBD_FAIL;
 8005f72:	2303      	movs	r3, #3
 8005f74:	75fb      	strb	r3, [r7, #23]
      break;
 8005f76:	e007      	b.n	8005f88 <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 faf0 	bl	8007560 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f80:	2303      	movs	r3, #3
 8005f82:	75fb      	strb	r3, [r7, #23]
      break;
 8005f84:	e000      	b.n	8005f88 <USBD_HID_Setup+0x1e4>
      break;
 8005f86:	bf00      	nop
    }
    break;
 8005f88:	e006      	b.n	8005f98 <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 fae7 	bl	8007560 <USBD_CtlError>
    ret = USBD_FAIL;
 8005f92:	2303      	movs	r3, #3
 8005f94:	75fb      	strb	r3, [r7, #23]
    break;
 8005f96:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	2000014c 	.word	0x2000014c
 8005fa8:	20000134 	.word	0x20000134

08005fac <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2222      	movs	r2, #34	; 0x22
 8005fb8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 8005fba:	4b03      	ldr	r3, [pc, #12]	; (8005fc8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	200000ec 	.word	0x200000ec

08005fcc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgHSDesc);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2222      	movs	r2, #34	; 0x22
 8005fd8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgHSDesc;
 8005fda:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	20000110 	.word	0x20000110

08005fec <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2222      	movs	r2, #34	; 0x22
 8005ff8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 8005ffa:	4b03      	ldr	r3, [pc, #12]	; (8006008 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	bc80      	pop	{r7}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	200000ec 	.word	0x200000ec

0800600c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard)->state = KEYBOARD_HID_IDLE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800601e:	2200      	movs	r2, #0
 8006020:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr
	...

08006030 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	220a      	movs	r2, #10
 800603c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800603e:	4b03      	ldr	r3, [pc, #12]	; (800604c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000140 	.word	0x20000140

08006050 <USBD_HID_Keybaord_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_Keybaord_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006064:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <USBD_HID_Keybaord_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800606c:	2303      	movs	r3, #3
 800606e:	e014      	b.n	800609a <USBD_HID_Keybaord_SendReport+0x4a>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b03      	cmp	r3, #3
 800607a:	d10d      	bne.n	8006098 <USBD_HID_Keybaord_SendReport+0x48>
  {
    if (hhid->state == KEYBOARD_HID_IDLE)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	7b1b      	ldrb	r3, [r3, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <USBD_HID_Keybaord_SendReport+0x48>
    {
      hhid->state = KEYBOARD_HID_BUSY;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2201      	movs	r2, #1
 8006088:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_KEYBOARD_IN_EP, report, len);
 800608a:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <USBD_HID_Keybaord_SendReport+0x54>)
 800608c:	7819      	ldrb	r1, [r3, #0]
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f001 fd07 	bl	8007aa6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	200000ae 	.word	0x200000ae

080060a8 <USBD_Update_HID_KBD_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_KBD_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	4608      	mov	r0, r1
 80060b2:	4611      	mov	r1, r2
 80060b4:	461a      	mov	r2, r3
 80060b6:	4603      	mov	r3, r0
 80060b8:	70fb      	strb	r3, [r7, #3]
 80060ba:	460b      	mov	r3, r1
 80060bc:	70bb      	strb	r3, [r7, #2]
 80060be:	4613      	mov	r3, r2
 80060c0:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	330b      	adds	r3, #11
 80060c6:	78fa      	ldrb	r2, [r7, #3]
 80060c8:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3311      	adds	r3, #17
 80060ce:	787a      	ldrb	r2, [r7, #1]
 80060d0:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	331d      	adds	r3, #29
 80060d6:	78ba      	ldrb	r2, [r7, #2]
 80060d8:	701a      	strb	r2, [r3, #0]

  HID_KEYBOARD_IN_EP = in_ep;
 80060da:	4a07      	ldr	r2, [pc, #28]	; (80060f8 <USBD_Update_HID_KBD_DESC+0x50>)
 80060dc:	78bb      	ldrb	r3, [r7, #2]
 80060de:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_ITF_NBR = itf_no;
 80060e0:	4a06      	ldr	r2, [pc, #24]	; (80060fc <USBD_Update_HID_KBD_DESC+0x54>)
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_STR_DESC_IDX = str_idx;
 80060e6:	4a06      	ldr	r2, [pc, #24]	; (8006100 <USBD_Update_HID_KBD_DESC+0x58>)
 80060e8:	787b      	ldrb	r3, [r7, #1]
 80060ea:	7013      	strb	r3, [r2, #0]
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	200000ae 	.word	0x200000ae
 80060fc:	20000b54 	.word	0x20000b54
 8006100:	20000b55 	.word	0x20000b55

08006104 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = &USBD_HID_Instance;
 8006110:	4b24      	ldr	r3, [pc, #144]	; (80061a4 <USBD_HID_Init+0xa0>)
 8006112:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d105      	bne.n	8006126 <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Mouse = NULL;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
    return (uint8_t)USBD_EMEM;
 8006122:	2302      	movs	r3, #2
 8006124:	e03a      	b.n	800619c <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Mouse = (void *)hhid;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	7c1b      	ldrb	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10d      	bne.n	8006152 <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_MOUSE_IN_EP & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006136:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <USBD_HID_Init+0xa4>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	f003 020f 	and.w	r2, r3, #15
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	3326      	adds	r3, #38	; 0x26
 800614c:	2207      	movs	r2, #7
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	e00c      	b.n	800616c <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_MOUSE_IN_EP & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006152:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <USBD_HID_Init+0xa4>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	f003 020f 	and.w	r2, r3, #15
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	3326      	adds	r3, #38	; 0x26
 8006168:	220a      	movs	r2, #10
 800616a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_MOUSE_IN_EP, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800616c:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <USBD_HID_Init+0xa4>)
 800616e:	7819      	ldrb	r1, [r3, #0]
 8006170:	2304      	movs	r3, #4
 8006172:	2203      	movs	r2, #3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f001 fbc8 	bl	800790a <USBD_LL_OpenEP>
  pdev->ep_in[HID_MOUSE_IN_EP & 0xFU].is_used = 1U;
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <USBD_HID_Init+0xa4>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	f003 020f 	and.w	r2, r3, #15
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	3324      	adds	r3, #36	; 0x24
 8006190:	2201      	movs	r2, #1
 8006192:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20000b6c 	.word	0x20000b6c
 80061a8:	2000018b 	.word	0x2000018b

080061ac <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_MOUSE_IN_EP);
 80061b8:	4b16      	ldr	r3, [pc, #88]	; (8006214 <USBD_HID_DeInit+0x68>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 fbc9 	bl	8007956 <USBD_LL_CloseEP>
  pdev->ep_in[HID_MOUSE_IN_EP & 0xFU].is_used = 0U;
 80061c4:	4b13      	ldr	r3, [pc, #76]	; (8006214 <USBD_HID_DeInit+0x68>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	f003 020f 	and.w	r2, r3, #15
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	3324      	adds	r3, #36	; 0x24
 80061da:	2200      	movs	r2, #0
 80061dc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_MOUSE_IN_EP & 0xFU].bInterval = 0U;
 80061de:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <USBD_HID_DeInit+0x68>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	f003 020f 	and.w	r2, r3, #15
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	3326      	adds	r3, #38	; 0x26
 80061f4:	2200      	movs	r2, #0
 80061f6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Mouse != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Mouse);
#endif
    pdev->pClassData_HID_Mouse = NULL;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }

  return (uint8_t)USBD_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	2000018b 	.word	0x2000018b

08006218 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData_HID_Mouse;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8006228:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006238:	2303      	movs	r3, #3
 800623a:	e0e8      	b.n	800640e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006244:	2b00      	cmp	r3, #0
 8006246:	d046      	beq.n	80062d6 <USBD_HID_Setup+0xbe>
 8006248:	2b20      	cmp	r3, #32
 800624a:	f040 80d8 	bne.w	80063fe <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	3b02      	subs	r3, #2
 8006254:	2b09      	cmp	r3, #9
 8006256:	d836      	bhi.n	80062c6 <USBD_HID_Setup+0xae>
 8006258:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <USBD_HID_Setup+0x48>)
 800625a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625e:	bf00      	nop
 8006260:	080062b7 	.word	0x080062b7
 8006264:	08006297 	.word	0x08006297
 8006268:	080062c7 	.word	0x080062c7
 800626c:	080062c7 	.word	0x080062c7
 8006270:	080062c7 	.word	0x080062c7
 8006274:	080062c7 	.word	0x080062c7
 8006278:	080062c7 	.word	0x080062c7
 800627c:	080062c7 	.word	0x080062c7
 8006280:	080062a5 	.word	0x080062a5
 8006284:	08006289 	.word	0x08006289
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	885b      	ldrh	r3, [r3, #2]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	461a      	mov	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	601a      	str	r2, [r3, #0]
      break;
 8006294:	e01e      	b.n	80062d4 <USBD_HID_Setup+0xbc>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 f9cf 	bl	8007640 <USBD_CtlSendData>
      break;
 80062a2:	e017      	b.n	80062d4 <USBD_HID_Setup+0xbc>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	885b      	ldrh	r3, [r3, #2]
 80062a8:	0a1b      	lsrs	r3, r3, #8
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	605a      	str	r2, [r3, #4]
      break;
 80062b4:	e00e      	b.n	80062d4 <USBD_HID_Setup+0xbc>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3304      	adds	r3, #4
 80062ba:	2201      	movs	r2, #1
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 f9be 	bl	8007640 <USBD_CtlSendData>
      break;
 80062c4:	e006      	b.n	80062d4 <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 f949 	bl	8007560 <USBD_CtlError>
      ret = USBD_FAIL;
 80062ce:	2303      	movs	r3, #3
 80062d0:	75fb      	strb	r3, [r7, #23]
      break;
 80062d2:	bf00      	nop
    }
    break;
 80062d4:	e09a      	b.n	800640c <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	2b0b      	cmp	r3, #11
 80062dc:	f200 8086 	bhi.w	80063ec <USBD_HID_Setup+0x1d4>
 80062e0:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <USBD_HID_Setup+0xd0>)
 80062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e6:	bf00      	nop
 80062e8:	08006319 	.word	0x08006319
 80062ec:	080063fb 	.word	0x080063fb
 80062f0:	080063ed 	.word	0x080063ed
 80062f4:	080063ed 	.word	0x080063ed
 80062f8:	080063ed 	.word	0x080063ed
 80062fc:	080063ed 	.word	0x080063ed
 8006300:	08006343 	.word	0x08006343
 8006304:	080063ed 	.word	0x080063ed
 8006308:	080063ed 	.word	0x080063ed
 800630c:	080063ed 	.word	0x080063ed
 8006310:	0800639b 	.word	0x0800639b
 8006314:	080063c5 	.word	0x080063c5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b03      	cmp	r3, #3
 8006322:	d107      	bne.n	8006334 <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006324:	f107 030a 	add.w	r3, r7, #10
 8006328:	2202      	movs	r2, #2
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 f987 	bl	8007640 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006332:	e063      	b.n	80063fc <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 f912 	bl	8007560 <USBD_CtlError>
        ret = USBD_FAIL;
 800633c:	2303      	movs	r3, #3
 800633e:	75fb      	strb	r3, [r7, #23]
      break;
 8006340:	e05c      	b.n	80063fc <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	885b      	ldrh	r3, [r3, #2]
 8006346:	0a1b      	lsrs	r3, r3, #8
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b22      	cmp	r3, #34	; 0x22
 800634c:	d108      	bne.n	8006360 <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	88db      	ldrh	r3, [r3, #6]
 8006352:	2b4a      	cmp	r3, #74	; 0x4a
 8006354:	bf28      	it	cs
 8006356:	234a      	movcs	r3, #74	; 0x4a
 8006358:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 800635a:	4b2f      	ldr	r3, [pc, #188]	; (8006418 <USBD_HID_Setup+0x200>)
 800635c:	613b      	str	r3, [r7, #16]
 800635e:	e015      	b.n	800638c <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	885b      	ldrh	r3, [r3, #2]
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b21      	cmp	r3, #33	; 0x21
 800636a:	d108      	bne.n	800637e <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_Desc;
 800636c:	4b2b      	ldr	r3, [pc, #172]	; (800641c <USBD_HID_Setup+0x204>)
 800636e:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	88db      	ldrh	r3, [r3, #6]
 8006374:	2b09      	cmp	r3, #9
 8006376:	bf28      	it	cs
 8006378:	2309      	movcs	r3, #9
 800637a:	82bb      	strh	r3, [r7, #20]
 800637c:	e006      	b.n	800638c <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 f8ed 	bl	8007560 <USBD_CtlError>
        ret = USBD_FAIL;
 8006386:	2303      	movs	r3, #3
 8006388:	75fb      	strb	r3, [r7, #23]
        break;
 800638a:	e037      	b.n	80063fc <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800638c:	8abb      	ldrh	r3, [r7, #20]
 800638e:	461a      	mov	r2, r3
 8006390:	6939      	ldr	r1, [r7, #16]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 f954 	bl	8007640 <USBD_CtlSendData>
      break;
 8006398:	e030      	b.n	80063fc <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d107      	bne.n	80063b6 <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3308      	adds	r3, #8
 80063aa:	2201      	movs	r2, #1
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 f946 	bl	8007640 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80063b4:	e022      	b.n	80063fc <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 f8d1 	bl	8007560 <USBD_CtlError>
        ret = USBD_FAIL;
 80063be:	2303      	movs	r3, #3
 80063c0:	75fb      	strb	r3, [r7, #23]
      break;
 80063c2:	e01b      	b.n	80063fc <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d106      	bne.n	80063de <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	885b      	ldrh	r3, [r3, #2]
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80063dc:	e00e      	b.n	80063fc <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 f8bd 	bl	8007560 <USBD_CtlError>
        ret = USBD_FAIL;
 80063e6:	2303      	movs	r3, #3
 80063e8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ea:	e007      	b.n	80063fc <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 f8b6 	bl	8007560 <USBD_CtlError>
      ret = USBD_FAIL;
 80063f4:	2303      	movs	r3, #3
 80063f6:	75fb      	strb	r3, [r7, #23]
      break;
 80063f8:	e000      	b.n	80063fc <USBD_HID_Setup+0x1e4>
      break;
 80063fa:	bf00      	nop
    }
    break;
 80063fc:	e006      	b.n	800640c <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 f8ad 	bl	8007560 <USBD_CtlError>
    ret = USBD_FAIL;
 8006406:	2303      	movs	r3, #3
 8006408:	75fb      	strb	r3, [r7, #23]
    break;
 800640a:	bf00      	nop
  }

  return (uint8_t)ret;
 800640c:	7dfb      	ldrb	r3, [r7, #23]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000228 	.word	0x20000228
 800641c:	20000210 	.word	0x20000210

08006420 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2222      	movs	r2, #34	; 0x22
 800642c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800642e:	4b03      	ldr	r3, [pc, #12]	; (800643c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	200001c8 	.word	0x200001c8

08006440 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2222      	movs	r2, #34	; 0x22
 800644c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800644e:	4b03      	ldr	r3, [pc, #12]	; (800645c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	200001ec 	.word	0x200001ec

08006460 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2222      	movs	r2, #34	; 0x22
 800646c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800646e:	4b03      	ldr	r3, [pc, #12]	; (800647c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	200001c8 	.word	0x200001c8

08006480 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData_HID_Mouse)->state = HID_IDLE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8006492:	2200      	movs	r2, #0
 8006494:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr
	...

080064a4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	220a      	movs	r2, #10
 80064b0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80064b2:	4b03      	ldr	r3, [pc, #12]	; (80064c0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	2000021c 	.word	0x2000021c

080064c4 <USBD_Update_HID_Mouse_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_Mouse_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	4608      	mov	r0, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	461a      	mov	r2, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	70fb      	strb	r3, [r7, #3]
 80064d6:	460b      	mov	r3, r1
 80064d8:	70bb      	strb	r3, [r7, #2]
 80064da:	4613      	mov	r3, r2
 80064dc:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	330b      	adds	r3, #11
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3311      	adds	r3, #17
 80064ea:	787a      	ldrb	r2, [r7, #1]
 80064ec:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	331d      	adds	r3, #29
 80064f2:	78ba      	ldrb	r2, [r7, #2]
 80064f4:	701a      	strb	r2, [r3, #0]

  HID_MOUSE_IN_EP = in_ep;
 80064f6:	4a07      	ldr	r2, [pc, #28]	; (8006514 <USBD_Update_HID_Mouse_DESC+0x50>)
 80064f8:	78bb      	ldrb	r3, [r7, #2]
 80064fa:	7013      	strb	r3, [r2, #0]
  HID_MOUSE_ITF_NBR = itf_no;
 80064fc:	4a06      	ldr	r2, [pc, #24]	; (8006518 <USBD_Update_HID_Mouse_DESC+0x54>)
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	7013      	strb	r3, [r2, #0]
  HID_MOUSE_STR_DESC_IDX = str_idx;
 8006502:	4a06      	ldr	r2, [pc, #24]	; (800651c <USBD_Update_HID_Mouse_DESC+0x58>)
 8006504:	787b      	ldrb	r3, [r7, #1]
 8006506:	7013      	strb	r3, [r2, #0]
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	bc80      	pop	{r7}
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	2000018b 	.word	0x2000018b
 8006518:	20000b68 	.word	0x20000b68
 800651c:	20000b69 	.word	0x20000b69

08006520 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	4613      	mov	r3, r2
 800652c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006534:	2303      	movs	r3, #3
 8006536:	e01b      	b.n	8006570 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	79fa      	ldrb	r2, [r7, #7]
 8006562:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f001 f961 	bl	800782c <USBD_LL_Init>
 800656a:	4603      	mov	r3, r0
 800656c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800656e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	e02d      	b.n	80065ec <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	7c1b      	ldrb	r3, [r3, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d112      	bne.n	80065c6 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01e      	beq.n	80065ea <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b4:	f107 020e 	add.w	r2, r7, #14
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
 80065bc:	4602      	mov	r2, r0
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 80065c4:	e011      	b.n	80065ea <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065da:	f107 020e 	add.w	r2, r7, #14
 80065de:	4610      	mov	r0, r2
 80065e0:	4798      	blx	r3
 80065e2:	4602      	mov	r2, r0
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 f969 	bl	80078d4 <USBD_LL_Start>
 8006602:	4603      	mov	r3, r0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800662c:	2303      	movs	r3, #3
 800662e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d009      	beq.n	800664e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	78fa      	ldrb	r2, [r7, #3]
 8006644:	4611      	mov	r1, r2
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
 800664a:	4603      	mov	r3, r0
 800664c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	78fa      	ldrb	r2, [r7, #3]
 8006678:	4611      	mov	r1, r2
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
  }

  return USBD_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 ff26 	bl	80074ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80066ae:	461a      	mov	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d01a      	beq.n	80066fa <USBD_LL_SetupStage+0x72>
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d822      	bhi.n	800670e <USBD_LL_SetupStage+0x86>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <USBD_LL_SetupStage+0x4a>
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d00a      	beq.n	80066e6 <USBD_LL_SetupStage+0x5e>
 80066d0:	e01d      	b.n	800670e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9e6 	bl	8006aac <USBD_StdDevReq>
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]
      break;
 80066e4:	e020      	b.n	8006728 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa4a 	bl	8006b88 <USBD_StdItfReq>
 80066f4:	4603      	mov	r3, r0
 80066f6:	73fb      	strb	r3, [r7, #15]
      break;
 80066f8:	e016      	b.n	8006728 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa89 	bl	8006c1a <USBD_StdEPReq>
 8006708:	4603      	mov	r3, r0
 800670a:	73fb      	strb	r3, [r7, #15]
      break;
 800670c:	e00c      	b.n	8006728 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006714:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006718:	b2db      	uxtb	r3, r3
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 f939 	bl	8007994 <USBD_LL_StallEP>
 8006722:	4603      	mov	r3, r0
 8006724:	73fb      	strb	r3, [r7, #15]
      break;
 8006726:	bf00      	nop
  }

  return ret;
 8006728:	7bfb      	ldrb	r3, [r7, #15]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b086      	sub	sp, #24
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	460b      	mov	r3, r1
 800673c:	607a      	str	r2, [r7, #4]
 800673e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006740:	7afb      	ldrb	r3, [r7, #11]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d138      	bne.n	80067b8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800674c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006754:	2b03      	cmp	r3, #3
 8006756:	d14a      	bne.n	80067ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	429a      	cmp	r2, r3
 8006762:	d913      	bls.n	800678c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	1ad2      	subs	r2, r2, r3
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	4293      	cmp	r3, r2
 800677c:	bf28      	it	cs
 800677e:	4613      	movcs	r3, r2
 8006780:	461a      	mov	r2, r3
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 ff87 	bl	8007698 <USBD_CtlContinueRx>
 800678a:	e030      	b.n	80067ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b03      	cmp	r3, #3
 8006796:	d10b      	bne.n	80067b0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 ff82 	bl	80076ba <USBD_CtlSendStatus>
 80067b6:	e01a      	b.n	80067ee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d114      	bne.n	80067ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00e      	beq.n	80067ee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	7afa      	ldrb	r2, [r7, #11]
 80067da:	4611      	mov	r1, r2
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	4798      	blx	r3
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
 80067ec:	e000      	b.n	80067f0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	460b      	mov	r3, r1
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006806:	7afb      	ldrb	r3, [r7, #11]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d16b      	bne.n	80068e4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3314      	adds	r3, #20
 8006810:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006818:	2b02      	cmp	r3, #2
 800681a:	d156      	bne.n	80068ca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	429a      	cmp	r2, r3
 8006826:	d914      	bls.n	8006852 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	1ad2      	subs	r2, r2, r3
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	461a      	mov	r2, r3
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 ff19 	bl	8007676 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006844:	2300      	movs	r3, #0
 8006846:	2200      	movs	r2, #0
 8006848:	2100      	movs	r1, #0
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f001 f94c 	bl	8007ae8 <USBD_LL_PrepareReceive>
 8006850:	e03b      	b.n	80068ca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	429a      	cmp	r2, r3
 800685c:	d11c      	bne.n	8006898 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006866:	429a      	cmp	r2, r3
 8006868:	d316      	bcc.n	8006898 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006874:	429a      	cmp	r2, r3
 8006876:	d20f      	bcs.n	8006898 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006878:	2200      	movs	r2, #0
 800687a:	2100      	movs	r1, #0
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 fefa 	bl	8007676 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800688a:	2300      	movs	r3, #0
 800688c:	2200      	movs	r2, #0
 800688e:	2100      	movs	r1, #0
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f001 f929 	bl	8007ae8 <USBD_LL_PrepareReceive>
 8006896:	e018      	b.n	80068ca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d10b      	bne.n	80068bc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068bc:	2180      	movs	r1, #128	; 0x80
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f001 f868 	bl	8007994 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 ff0b 	bl	80076e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d122      	bne.n	800691a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f7ff fe99 	bl	800660c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80068e2:	e01a      	b.n	800691a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d114      	bne.n	800691a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00e      	beq.n	800691a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	7afa      	ldrb	r2, [r7, #11]
 8006906:	4611      	mov	r1, r2
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	4798      	blx	r3
 800690c:	4603      	mov	r3, r0
 800690e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	e000      	b.n	800691c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006954:	2303      	movs	r3, #3
 8006956:	e02a      	b.n	80069ae <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6852      	ldr	r2, [r2, #4]
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	4611      	mov	r1, r2
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006978:	2340      	movs	r3, #64	; 0x40
 800697a:	2200      	movs	r2, #0
 800697c:	2100      	movs	r1, #0
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 ffc3 	bl	800790a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2240      	movs	r2, #64	; 0x40
 8006990:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006994:	2340      	movs	r3, #64	; 0x40
 8006996:	2200      	movs	r2, #0
 8006998:	2180      	movs	r1, #128	; 0x80
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 ffb5 	bl	800790a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2240      	movs	r2, #64	; 0x40
 80069aa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	78fa      	ldrb	r2, [r7, #3]
 80069c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr

080069d4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2204      	movs	r2, #4
 80069ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d106      	bne.n	8006a20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e012      	b.n	8006a68 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d10b      	bne.n	8006a66 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	3301      	adds	r3, #1
 8006a86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a8e:	8a3b      	ldrh	r3, [r7, #16]
 8006a90:	021b      	lsls	r3, r3, #8
 8006a92:	b21a      	sxth	r2, r3
 8006a94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	b21b      	sxth	r3, r3
 8006a9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a9e:	89fb      	ldrh	r3, [r7, #14]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr
	...

08006aac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d005      	beq.n	8006ad2 <USBD_StdDevReq+0x26>
 8006ac6:	2b40      	cmp	r3, #64	; 0x40
 8006ac8:	d853      	bhi.n	8006b72 <USBD_StdDevReq+0xc6>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <USBD_StdDevReq+0x3a>
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d14f      	bne.n	8006b72 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae4:	e04a      	b.n	8006b7c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	785b      	ldrb	r3, [r3, #1]
 8006aea:	2b09      	cmp	r3, #9
 8006aec:	d83b      	bhi.n	8006b66 <USBD_StdDevReq+0xba>
 8006aee:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <USBD_StdDevReq+0x48>)
 8006af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af4:	08006b49 	.word	0x08006b49
 8006af8:	08006b5d 	.word	0x08006b5d
 8006afc:	08006b67 	.word	0x08006b67
 8006b00:	08006b53 	.word	0x08006b53
 8006b04:	08006b67 	.word	0x08006b67
 8006b08:	08006b27 	.word	0x08006b27
 8006b0c:	08006b1d 	.word	0x08006b1d
 8006b10:	08006b67 	.word	0x08006b67
 8006b14:	08006b3f 	.word	0x08006b3f
 8006b18:	08006b31 	.word	0x08006b31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f9de 	bl	8006ee0 <USBD_GetDescriptor>
          break;
 8006b24:	e024      	b.n	8006b70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fb55 	bl	80071d8 <USBD_SetAddress>
          break;
 8006b2e:	e01f      	b.n	8006b70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fb94 	bl	8007260 <USBD_SetConfig>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]
          break;
 8006b3c:	e018      	b.n	8006b70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fc33 	bl	80073ac <USBD_GetConfig>
          break;
 8006b46:	e013      	b.n	8006b70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fc64 	bl	8007418 <USBD_GetStatus>
          break;
 8006b50:	e00e      	b.n	8006b70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fc93 	bl	8007480 <USBD_SetFeature>
          break;
 8006b5a:	e009      	b.n	8006b70 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fca2 	bl	80074a8 <USBD_ClrFeature>
          break;
 8006b64:	e004      	b.n	8006b70 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fcf9 	bl	8007560 <USBD_CtlError>
          break;
 8006b6e:	bf00      	nop
      }
      break;
 8006b70:	e004      	b.n	8006b7c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fcf3 	bl	8007560 <USBD_CtlError>
      break;
 8006b7a:	bf00      	nop
  }

  return ret;
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop

08006b88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b9e:	2b40      	cmp	r3, #64	; 0x40
 8006ba0:	d005      	beq.n	8006bae <USBD_StdItfReq+0x26>
 8006ba2:	2b40      	cmp	r3, #64	; 0x40
 8006ba4:	d82f      	bhi.n	8006c06 <USBD_StdItfReq+0x7e>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <USBD_StdItfReq+0x26>
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d12b      	bne.n	8006c06 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d81d      	bhi.n	8006bf8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	889b      	ldrh	r3, [r3, #4]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b0f      	cmp	r3, #15
 8006bc4:	d813      	bhi.n	8006bee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	4798      	blx	r3
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	88db      	ldrh	r3, [r3, #6]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d110      	bne.n	8006c02 <USBD_StdItfReq+0x7a>
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10d      	bne.n	8006c02 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fd67 	bl	80076ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006bec:	e009      	b.n	8006c02 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fcb5 	bl	8007560 <USBD_CtlError>
          break;
 8006bf6:	e004      	b.n	8006c02 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fcb0 	bl	8007560 <USBD_CtlError>
          break;
 8006c00:	e000      	b.n	8006c04 <USBD_StdItfReq+0x7c>
          break;
 8006c02:	bf00      	nop
      }
      break;
 8006c04:	e004      	b.n	8006c10 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fca9 	bl	8007560 <USBD_CtlError>
      break;
 8006c0e:	bf00      	nop
  }

  return ret;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	889b      	ldrh	r3, [r3, #4]
 8006c2c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d007      	beq.n	8006c4a <USBD_StdEPReq+0x30>
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	f200 8145 	bhi.w	8006eca <USBD_StdEPReq+0x2b0>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00c      	beq.n	8006c5e <USBD_StdEPReq+0x44>
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	f040 8140 	bne.w	8006eca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c5c:	e13a      	b.n	8006ed4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d007      	beq.n	8006c76 <USBD_StdEPReq+0x5c>
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	f300 8129 	bgt.w	8006ebe <USBD_StdEPReq+0x2a4>
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d07f      	beq.n	8006d70 <USBD_StdEPReq+0x156>
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d03c      	beq.n	8006cee <USBD_StdEPReq+0xd4>
 8006c74:	e123      	b.n	8006ebe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d002      	beq.n	8006c88 <USBD_StdEPReq+0x6e>
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d016      	beq.n	8006cb4 <USBD_StdEPReq+0x9a>
 8006c86:	e02c      	b.n	8006ce2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00d      	beq.n	8006caa <USBD_StdEPReq+0x90>
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	2b80      	cmp	r3, #128	; 0x80
 8006c92:	d00a      	beq.n	8006caa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fe7b 	bl	8007994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c9e:	2180      	movs	r1, #128	; 0x80
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fe77 	bl	8007994 <USBD_LL_StallEP>
 8006ca6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ca8:	e020      	b.n	8006cec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fc57 	bl	8007560 <USBD_CtlError>
              break;
 8006cb2:	e01b      	b.n	8006cec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	885b      	ldrh	r3, [r3, #2]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10e      	bne.n	8006cda <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <USBD_StdEPReq+0xc0>
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	2b80      	cmp	r3, #128	; 0x80
 8006cc6:	d008      	beq.n	8006cda <USBD_StdEPReq+0xc0>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	88db      	ldrh	r3, [r3, #6]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d104      	bne.n	8006cda <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fe5d 	bl	8007994 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fced 	bl	80076ba <USBD_CtlSendStatus>

              break;
 8006ce0:	e004      	b.n	8006cec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fc3b 	bl	8007560 <USBD_CtlError>
              break;
 8006cea:	bf00      	nop
          }
          break;
 8006cec:	e0ec      	b.n	8006ec8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d002      	beq.n	8006d00 <USBD_StdEPReq+0xe6>
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d016      	beq.n	8006d2c <USBD_StdEPReq+0x112>
 8006cfe:	e030      	b.n	8006d62 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00d      	beq.n	8006d22 <USBD_StdEPReq+0x108>
 8006d06:	7bbb      	ldrb	r3, [r7, #14]
 8006d08:	2b80      	cmp	r3, #128	; 0x80
 8006d0a:	d00a      	beq.n	8006d22 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fe3f 	bl	8007994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d16:	2180      	movs	r1, #128	; 0x80
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fe3b 	bl	8007994 <USBD_LL_StallEP>
 8006d1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d20:	e025      	b.n	8006d6e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fc1b 	bl	8007560 <USBD_CtlError>
              break;
 8006d2a:	e020      	b.n	8006d6e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	885b      	ldrh	r3, [r3, #2]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11b      	bne.n	8006d6c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d004      	beq.n	8006d48 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d3e:	7bbb      	ldrb	r3, [r7, #14]
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fe45 	bl	80079d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fcb6 	bl	80076ba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006d60:	e004      	b.n	8006d6c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fbfb 	bl	8007560 <USBD_CtlError>
              break;
 8006d6a:	e000      	b.n	8006d6e <USBD_StdEPReq+0x154>
              break;
 8006d6c:	bf00      	nop
          }
          break;
 8006d6e:	e0ab      	b.n	8006ec8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d002      	beq.n	8006d82 <USBD_StdEPReq+0x168>
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d032      	beq.n	8006de6 <USBD_StdEPReq+0x1cc>
 8006d80:	e097      	b.n	8006eb2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d007      	beq.n	8006d98 <USBD_StdEPReq+0x17e>
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	2b80      	cmp	r3, #128	; 0x80
 8006d8c:	d004      	beq.n	8006d98 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fbe5 	bl	8007560 <USBD_CtlError>
                break;
 8006d96:	e091      	b.n	8006ebc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da0b      	bge.n	8006db8 <USBD_StdEPReq+0x19e>
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	3310      	adds	r3, #16
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	4413      	add	r3, r2
 8006db4:	3304      	adds	r3, #4
 8006db6:	e00b      	b.n	8006dd0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
 8006dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	3304      	adds	r3, #4
 8006dd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fc2e 	bl	8007640 <USBD_CtlSendData>
              break;
 8006de4:	e06a      	b.n	8006ebc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006de6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	da11      	bge.n	8006e12 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	f003 020f 	and.w	r2, r3, #15
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	3324      	adds	r3, #36	; 0x24
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d117      	bne.n	8006e38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fba8 	bl	8007560 <USBD_CtlError>
                  break;
 8006e10:	e054      	b.n	8006ebc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d104      	bne.n	8006e38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb95 	bl	8007560 <USBD_CtlError>
                  break;
 8006e36:	e041      	b.n	8006ebc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da0b      	bge.n	8006e58 <USBD_StdEPReq+0x23e>
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	3310      	adds	r3, #16
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	4413      	add	r3, r2
 8006e54:	3304      	adds	r3, #4
 8006e56:	e00b      	b.n	8006e70 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	3304      	adds	r3, #4
 8006e70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <USBD_StdEPReq+0x264>
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	2b80      	cmp	r3, #128	; 0x80
 8006e7c:	d103      	bne.n	8006e86 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e00e      	b.n	8006ea4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fdc0 	bl	8007a10 <USBD_LL_IsStallEP>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	e002      	b.n	8006ea4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fbc8 	bl	8007640 <USBD_CtlSendData>
              break;
 8006eb0:	e004      	b.n	8006ebc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fb53 	bl	8007560 <USBD_CtlError>
              break;
 8006eba:	bf00      	nop
          }
          break;
 8006ebc:	e004      	b.n	8006ec8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fb4d 	bl	8007560 <USBD_CtlError>
          break;
 8006ec6:	bf00      	nop
      }
      break;
 8006ec8:	e004      	b.n	8006ed4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fb47 	bl	8007560 <USBD_CtlError>
      break;
 8006ed2:	bf00      	nop
  }

  return ret;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	885b      	ldrh	r3, [r3, #2]
 8006efa:	0a1b      	lsrs	r3, r3, #8
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	2b06      	cmp	r3, #6
 8006f02:	f200 813b 	bhi.w	800717c <USBD_GetDescriptor+0x29c>
 8006f06:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <USBD_GetDescriptor+0x2c>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f29 	.word	0x08006f29
 8006f10:	08006f41 	.word	0x08006f41
 8006f14:	08006f81 	.word	0x08006f81
 8006f18:	0800717d 	.word	0x0800717d
 8006f1c:	0800717d 	.word	0x0800717d
 8006f20:	0800711d 	.word	0x0800711d
 8006f24:	08007149 	.word	0x08007149
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	7c12      	ldrb	r2, [r2, #16]
 8006f34:	f107 0108 	add.w	r1, r7, #8
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	60f8      	str	r0, [r7, #12]
      break;
 8006f3e:	e125      	b.n	800718c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	7c1b      	ldrb	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10d      	bne.n	8006f64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	f107 0208 	add.w	r2, r7, #8
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	2202      	movs	r2, #2
 8006f60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f62:	e113      	b.n	800718c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	f107 0208 	add.w	r2, r7, #8
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
      break;
 8006f7e:	e105      	b.n	800718c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	885b      	ldrh	r3, [r3, #2]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b05      	cmp	r3, #5
 8006f88:	f200 80ac 	bhi.w	80070e4 <USBD_GetDescriptor+0x204>
 8006f8c:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <USBD_GetDescriptor+0xb4>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fad 	.word	0x08006fad
 8006f98:	08006fe1 	.word	0x08006fe1
 8006f9c:	08007015 	.word	0x08007015
 8006fa0:	08007049 	.word	0x08007049
 8006fa4:	0800707d 	.word	0x0800707d
 8006fa8:	080070b1 	.word	0x080070b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	7c12      	ldrb	r2, [r2, #16]
 8006fc4:	f107 0108 	add.w	r1, r7, #8
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
 8006fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fce:	e0a4      	b.n	800711a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fac4 	bl	8007560 <USBD_CtlError>
            err++;
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006fde:	e09c      	b.n	800711a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00b      	beq.n	8007004 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	7c12      	ldrb	r2, [r2, #16]
 8006ff8:	f107 0108 	add.w	r1, r7, #8
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
 8007000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007002:	e08a      	b.n	800711a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 faaa 	bl	8007560 <USBD_CtlError>
            err++;
 800700c:	7afb      	ldrb	r3, [r7, #11]
 800700e:	3301      	adds	r3, #1
 8007010:	72fb      	strb	r3, [r7, #11]
          break;
 8007012:	e082      	b.n	800711a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00b      	beq.n	8007038 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	7c12      	ldrb	r2, [r2, #16]
 800702c:	f107 0108 	add.w	r1, r7, #8
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
 8007034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007036:	e070      	b.n	800711a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa90 	bl	8007560 <USBD_CtlError>
            err++;
 8007040:	7afb      	ldrb	r3, [r7, #11]
 8007042:	3301      	adds	r3, #1
 8007044:	72fb      	strb	r3, [r7, #11]
          break;
 8007046:	e068      	b.n	800711a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00b      	beq.n	800706c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	7c12      	ldrb	r2, [r2, #16]
 8007060:	f107 0108 	add.w	r1, r7, #8
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
 8007068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800706a:	e056      	b.n	800711a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa76 	bl	8007560 <USBD_CtlError>
            err++;
 8007074:	7afb      	ldrb	r3, [r7, #11]
 8007076:	3301      	adds	r3, #1
 8007078:	72fb      	strb	r3, [r7, #11]
          break;
 800707a:	e04e      	b.n	800711a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00b      	beq.n	80070a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	7c12      	ldrb	r2, [r2, #16]
 8007094:	f107 0108 	add.w	r1, r7, #8
 8007098:	4610      	mov	r0, r2
 800709a:	4798      	blx	r3
 800709c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800709e:	e03c      	b.n	800711a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa5c 	bl	8007560 <USBD_CtlError>
            err++;
 80070a8:	7afb      	ldrb	r3, [r7, #11]
 80070aa:	3301      	adds	r3, #1
 80070ac:	72fb      	strb	r3, [r7, #11]
          break;
 80070ae:	e034      	b.n	800711a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	7c12      	ldrb	r2, [r2, #16]
 80070c8:	f107 0108 	add.w	r1, r7, #8
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
 80070d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070d2:	e022      	b.n	800711a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa42 	bl	8007560 <USBD_CtlError>
            err++;
 80070dc:	7afb      	ldrb	r3, [r7, #11]
 80070de:	3301      	adds	r3, #1
 80070e0:	72fb      	strb	r3, [r7, #11]
          break;
 80070e2:	e01a      	b.n	800711a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00c      	beq.n	800710a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	8852      	ldrh	r2, [r2, #2]
 80070fc:	b2d1      	uxtb	r1, r2
 80070fe:	f107 0208 	add.w	r2, r7, #8
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	4798      	blx	r3
 8007106:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8007108:	e006      	b.n	8007118 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fa27 	bl	8007560 <USBD_CtlError>
            err++;
 8007112:	7afb      	ldrb	r3, [r7, #11]
 8007114:	3301      	adds	r3, #1
 8007116:	72fb      	strb	r3, [r7, #11]
          break;
 8007118:	bf00      	nop
      }
      break;
 800711a:	e037      	b.n	800718c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	7c1b      	ldrb	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d109      	bne.n	8007138 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712c:	f107 0208 	add.w	r2, r7, #8
 8007130:	4610      	mov	r0, r2
 8007132:	4798      	blx	r3
 8007134:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007136:	e029      	b.n	800718c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa10 	bl	8007560 <USBD_CtlError>
        err++;
 8007140:	7afb      	ldrb	r3, [r7, #11]
 8007142:	3301      	adds	r3, #1
 8007144:	72fb      	strb	r3, [r7, #11]
      break;
 8007146:	e021      	b.n	800718c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	7c1b      	ldrb	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10d      	bne.n	800716c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007158:	f107 0208 	add.w	r2, r7, #8
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
 8007160:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	2207      	movs	r2, #7
 8007168:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800716a:	e00f      	b.n	800718c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f9f6 	bl	8007560 <USBD_CtlError>
        err++;
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	3301      	adds	r3, #1
 8007178:	72fb      	strb	r3, [r7, #11]
      break;
 800717a:	e007      	b.n	800718c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f9ee 	bl	8007560 <USBD_CtlError>
      err++;
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	3301      	adds	r3, #1
 8007188:	72fb      	strb	r3, [r7, #11]
      break;
 800718a:	bf00      	nop
  }

  if (err != 0U)
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d11e      	bne.n	80071d0 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	88db      	ldrh	r3, [r3, #6]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d016      	beq.n	80071c8 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800719a:	893b      	ldrh	r3, [r7, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00e      	beq.n	80071be <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	88da      	ldrh	r2, [r3, #6]
 80071a4:	893b      	ldrh	r3, [r7, #8]
 80071a6:	4293      	cmp	r3, r2
 80071a8:	bf28      	it	cs
 80071aa:	4613      	movcs	r3, r2
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071b0:	893b      	ldrh	r3, [r7, #8]
 80071b2:	461a      	mov	r2, r3
 80071b4:	68f9      	ldr	r1, [r7, #12]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa42 	bl	8007640 <USBD_CtlSendData>
 80071bc:	e009      	b.n	80071d2 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f9cd 	bl	8007560 <USBD_CtlError>
 80071c6:	e004      	b.n	80071d2 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fa76 	bl	80076ba <USBD_CtlSendStatus>
 80071ce:	e000      	b.n	80071d2 <USBD_GetDescriptor+0x2f2>
    return;
 80071d0:	bf00      	nop
  }
}
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	889b      	ldrh	r3, [r3, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d131      	bne.n	800724e <USBD_SetAddress+0x76>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	88db      	ldrh	r3, [r3, #6]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d12d      	bne.n	800724e <USBD_SetAddress+0x76>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	885b      	ldrh	r3, [r3, #2]
 80071f6:	2b7f      	cmp	r3, #127	; 0x7f
 80071f8:	d829      	bhi.n	800724e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	885b      	ldrh	r3, [r3, #2]
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007204:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b03      	cmp	r3, #3
 8007210:	d104      	bne.n	800721c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f9a3 	bl	8007560 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721a:	e01d      	b.n	8007258 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	7bfa      	ldrb	r2, [r7, #15]
 8007220:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fc1d 	bl	8007a68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fa43 	bl	80076ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007242:	e009      	b.n	8007258 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724c:	e004      	b.n	8007258 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f985 	bl	8007560 <USBD_CtlError>
  }
}
 8007256:	bf00      	nop
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	885b      	ldrh	r3, [r3, #2]
 8007272:	b2da      	uxtb	r2, r3
 8007274:	4b4c      	ldr	r3, [pc, #304]	; (80073a8 <USBD_SetConfig+0x148>)
 8007276:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007278:	4b4b      	ldr	r3, [pc, #300]	; (80073a8 <USBD_SetConfig+0x148>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d905      	bls.n	800728c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f96c 	bl	8007560 <USBD_CtlError>
    return USBD_FAIL;
 8007288:	2303      	movs	r3, #3
 800728a:	e088      	b.n	800739e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d002      	beq.n	800729e <USBD_SetConfig+0x3e>
 8007298:	2b03      	cmp	r3, #3
 800729a:	d025      	beq.n	80072e8 <USBD_SetConfig+0x88>
 800729c:	e071      	b.n	8007382 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800729e:	4b42      	ldr	r3, [pc, #264]	; (80073a8 <USBD_SetConfig+0x148>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01c      	beq.n	80072e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80072a6:	4b40      	ldr	r3, [pc, #256]	; (80073a8 <USBD_SetConfig+0x148>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072b0:	4b3d      	ldr	r3, [pc, #244]	; (80073a8 <USBD_SetConfig+0x148>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff f9b2 	bl	8006620 <USBD_SetClassConfig>
 80072bc:	4603      	mov	r3, r0
 80072be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f949 	bl	8007560 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072ce:	e065      	b.n	800739c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f9f2 	bl	80076ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2203      	movs	r2, #3
 80072da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072de:	e05d      	b.n	800739c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f9ea 	bl	80076ba <USBD_CtlSendStatus>
      break;
 80072e6:	e059      	b.n	800739c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072e8:	4b2f      	ldr	r3, [pc, #188]	; (80073a8 <USBD_SetConfig+0x148>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d112      	bne.n	8007316 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072f8:	4b2b      	ldr	r3, [pc, #172]	; (80073a8 <USBD_SetConfig+0x148>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007302:	4b29      	ldr	r3, [pc, #164]	; (80073a8 <USBD_SetConfig+0x148>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff f9a5 	bl	8006658 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9d3 	bl	80076ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007314:	e042      	b.n	800739c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007316:	4b24      	ldr	r3, [pc, #144]	; (80073a8 <USBD_SetConfig+0x148>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	429a      	cmp	r2, r3
 8007322:	d02a      	beq.n	800737a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff f993 	bl	8006658 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007332:	4b1d      	ldr	r3, [pc, #116]	; (80073a8 <USBD_SetConfig+0x148>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800733c:	4b1a      	ldr	r3, [pc, #104]	; (80073a8 <USBD_SetConfig+0x148>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff f96c 	bl	8006620 <USBD_SetClassConfig>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00f      	beq.n	8007372 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f903 	bl	8007560 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7ff f978 	bl	8006658 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007370:	e014      	b.n	800739c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9a1 	bl	80076ba <USBD_CtlSendStatus>
      break;
 8007378:	e010      	b.n	800739c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f99d 	bl	80076ba <USBD_CtlSendStatus>
      break;
 8007380:	e00c      	b.n	800739c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f8eb 	bl	8007560 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800738a:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <USBD_SetConfig+0x148>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff f961 	bl	8006658 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007396:	2303      	movs	r3, #3
 8007398:	73fb      	strb	r3, [r7, #15]
      break;
 800739a:	bf00      	nop
  }

  return ret;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000b7c 	.word	0x20000b7c

080073ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	88db      	ldrh	r3, [r3, #6]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d004      	beq.n	80073c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f8cd 	bl	8007560 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073c6:	e023      	b.n	8007410 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	dc02      	bgt.n	80073da <USBD_GetConfig+0x2e>
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dc03      	bgt.n	80073e0 <USBD_GetConfig+0x34>
 80073d8:	e015      	b.n	8007406 <USBD_GetConfig+0x5a>
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d00b      	beq.n	80073f6 <USBD_GetConfig+0x4a>
 80073de:	e012      	b.n	8007406 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3308      	adds	r3, #8
 80073ea:	2201      	movs	r2, #1
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f926 	bl	8007640 <USBD_CtlSendData>
        break;
 80073f4:	e00c      	b.n	8007410 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3304      	adds	r3, #4
 80073fa:	2201      	movs	r2, #1
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f91e 	bl	8007640 <USBD_CtlSendData>
        break;
 8007404:	e004      	b.n	8007410 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f8a9 	bl	8007560 <USBD_CtlError>
        break;
 800740e:	bf00      	nop
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007428:	b2db      	uxtb	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	2b02      	cmp	r3, #2
 800742e:	d81e      	bhi.n	800746e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	88db      	ldrh	r3, [r3, #6]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d004      	beq.n	8007442 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f890 	bl	8007560 <USBD_CtlError>
        break;
 8007440:	e01a      	b.n	8007478 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f043 0202 	orr.w	r2, r3, #2
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	330c      	adds	r3, #12
 8007462:	2202      	movs	r2, #2
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f8ea 	bl	8007640 <USBD_CtlSendData>
      break;
 800746c:	e004      	b.n	8007478 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f875 	bl	8007560 <USBD_CtlError>
      break;
 8007476:	bf00      	nop
  }
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	885b      	ldrh	r3, [r3, #2]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d106      	bne.n	80074a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f90d 	bl	80076ba <USBD_CtlSendStatus>
  }
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d80b      	bhi.n	80074d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	885b      	ldrh	r3, [r3, #2]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d10c      	bne.n	80074e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f8f2 	bl	80076ba <USBD_CtlSendStatus>
      }
      break;
 80074d6:	e004      	b.n	80074e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f840 	bl	8007560 <USBD_CtlError>
      break;
 80074e0:	e000      	b.n	80074e4 <USBD_ClrFeature+0x3c>
      break;
 80074e2:	bf00      	nop
  }
}
 80074e4:	bf00      	nop
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	781a      	ldrb	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3301      	adds	r3, #1
 8007506:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	781a      	ldrb	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3301      	adds	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff faaa 	bl	8006a70 <SWAPBYTE>
 800751c:	4603      	mov	r3, r0
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	3301      	adds	r3, #1
 8007528:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3301      	adds	r3, #1
 800752e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff fa9d 	bl	8006a70 <SWAPBYTE>
 8007536:	4603      	mov	r3, r0
 8007538:	461a      	mov	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3301      	adds	r3, #1
 8007548:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7ff fa90 	bl	8006a70 <SWAPBYTE>
 8007550:	4603      	mov	r3, r0
 8007552:	461a      	mov	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	80da      	strh	r2, [r3, #6]
}
 8007558:	bf00      	nop
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800756a:	2180      	movs	r1, #128	; 0x80
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fa11 	bl	8007994 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007572:	2100      	movs	r1, #0
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa0d 	bl	8007994 <USBD_LL_StallEP>
}
 800757a:	bf00      	nop
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b086      	sub	sp, #24
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d036      	beq.n	8007606 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800759c:	6938      	ldr	r0, [r7, #16]
 800759e:	f000 f836 	bl	800760e <USBD_GetLen>
 80075a2:	4603      	mov	r3, r0
 80075a4:	3301      	adds	r3, #1
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	4413      	add	r3, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	7812      	ldrb	r2, [r2, #0]
 80075ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	3301      	adds	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	4413      	add	r3, r2
 80075c8:	2203      	movs	r2, #3
 80075ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	3301      	adds	r3, #1
 80075d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075d2:	e013      	b.n	80075fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	4413      	add	r3, r2
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	7812      	ldrb	r2, [r2, #0]
 80075de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	3301      	adds	r3, #1
 80075e4:	613b      	str	r3, [r7, #16]
    idx++;
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	3301      	adds	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4413      	add	r3, r2
 80075f2:	2200      	movs	r2, #0
 80075f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	3301      	adds	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e7      	bne.n	80075d4 <USBD_GetString+0x52>
 8007604:	e000      	b.n	8007608 <USBD_GetString+0x86>
    return;
 8007606:	bf00      	nop
  }
}
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800760e:	b480      	push	{r7}
 8007610:	b085      	sub	sp, #20
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800761e:	e005      	b.n	800762c <USBD_GetLen+0x1e>
  {
    len++;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	3301      	adds	r3, #1
 8007624:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	3301      	adds	r3, #1
 800762a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1f5      	bne.n	8007620 <USBD_GetLen+0x12>
  }

  return len;
 8007634:	7bfb      	ldrb	r3, [r7, #15]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr

08007640 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2202      	movs	r2, #2
 8007650:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	2100      	movs	r1, #0
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 fa1d 	bl	8007aa6 <USBD_LL_Transmit>

  return USBD_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	2100      	movs	r1, #0
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 fa0c 	bl	8007aa6 <USBD_LL_Transmit>

  return USBD_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	2100      	movs	r1, #0
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 fa1c 	bl	8007ae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2204      	movs	r2, #4
 80076c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076ca:	2300      	movs	r3, #0
 80076cc:	2200      	movs	r2, #0
 80076ce:	2100      	movs	r1, #0
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f9e8 	bl	8007aa6 <USBD_LL_Transmit>

  return USBD_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2205      	movs	r2, #5
 80076ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076f0:	2300      	movs	r3, #0
 80076f2:	2200      	movs	r2, #0
 80076f4:	2100      	movs	r1, #0
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f9f6 	bl	8007ae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800771a:	4619      	mov	r1, r3
 800771c:	4610      	mov	r0, r2
 800771e:	f7fe ffb3 	bl	8006688 <USBD_LL_SetupStage>
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	460b      	mov	r3, r1
 8007734:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800773c:	78fa      	ldrb	r2, [r7, #3]
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	4613      	mov	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	440b      	add	r3, r1
 800774a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	4619      	mov	r1, r3
 8007754:	f7fe ffed 	bl	8006732 <USBD_LL_DataOutStage>
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	00db      	lsls	r3, r3, #3
 800777e:	440b      	add	r3, r1
 8007780:	333c      	adds	r3, #60	; 0x3c
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	4619      	mov	r1, r3
 8007788:	f7ff f836 	bl	80067f8 <USBD_LL_DataInStage>
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff f942 	bl	8006a2c <USBD_LL_SOF>
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80077b8:	2301      	movs	r3, #1
 80077ba:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d102      	bne.n	80077ca <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
 80077c8:	e001      	b.n	80077ce <HAL_PCD_ResetCallback+0x1e>
    speed = USBD_SPEED_HIGH;
  }
  #endif
  else
  {
    Error_Handler();
 80077ca:	f7f8 fd56 	bl	800027a <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80077d4:	7bfa      	ldrb	r2, [r7, #15]
 80077d6:	4611      	mov	r1, r2
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff f8ec 	bl	80069b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7ff f89d 	bl	8006924 <USBD_LL_Reset>
}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff f8e7 	bl	80069d4 <USBD_LL_Suspend>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
  }
#endif
  /* USER CODE END 2 */
}
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800781c:	4618      	mov	r0, r3
 800781e:	f7ff f8ee 	bl	80069fe <USBD_LL_Resume>
}
 8007822:	bf00      	nop
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
#endif
  }
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8007834:	4b23      	ldr	r3, [pc, #140]	; (80078c4 <USBD_LL_Init+0x98>)
 8007836:	4a24      	ldr	r2, [pc, #144]	; (80078c8 <USBD_LL_Init+0x9c>)
 8007838:	601a      	str	r2, [r3, #0]
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#endif

  if (pdev->id == DEVICE_FS)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d13b      	bne.n	80078ba <USBD_LL_Init+0x8e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 8007842:	4b20      	ldr	r3, [pc, #128]	; (80078c4 <USBD_LL_Init+0x98>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
    pdev->pData = hpcd_USB_OTG_PTR;
 800784c:	4b1d      	ldr	r3, [pc, #116]	; (80078c4 <USBD_LL_Init+0x98>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310

    /* @see HAL_PCD_Init() usb_otg.c generated by cube **/

#if (STM32F1_DEVICE)
    /** Device is F1 or similar or if HAL_PCDEx_PMAConfig() is used by HAL driver */
    uint16_t pma_track = 0x40; /** PMA offset*/
 8007856:	2340      	movs	r3, #64	; 0x40
 8007858:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x00, PCD_SNG_BUF, pma_track);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8007860:	89fb      	ldrh	r3, [r7, #14]
 8007862:	2200      	movs	r2, #0
 8007864:	2100      	movs	r1, #0
 8007866:	f7fa fbf4 	bl	8002052 <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 800786a:	89fb      	ldrh	r3, [r7, #14]
 800786c:	3340      	adds	r3, #64	; 0x40
 800786e:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x80, PCD_SNG_BUF, pma_track);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8007876:	89fb      	ldrh	r3, [r7, #14]
 8007878:	2200      	movs	r2, #0
 800787a:	2180      	movs	r1, #128	; 0x80
 800787c:	f7fa fbe9 	bl	8002052 <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 8007880:	89fb      	ldrh	r3, [r7, #14]
 8007882:	3340      	adds	r3, #64	; 0x40
 8007884:	81fb      	strh	r3, [r7, #14]
    pma_track += 48;
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_ECM_CMD_EP, PCD_SNG_BUF, pma_track);
    pma_track += 8;
#endif
#if (USBD_USE_HID_MOUSE == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_MOUSE_IN_EP, PCD_SNG_BUF, pma_track);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800788c:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <USBD_LL_Init+0xa0>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	b299      	uxth	r1, r3
 8007892:	89fb      	ldrh	r3, [r7, #14]
 8007894:	2200      	movs	r2, #0
 8007896:	f7fa fbdc 	bl	8002052 <HAL_PCDEx_PMAConfig>
    pma_track += 8;
 800789a:	89fb      	ldrh	r3, [r7, #14]
 800789c:	3308      	adds	r3, #8
 800789e:	81fb      	strh	r3, [r7, #14]
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_KEYBOARD_IN_EP, PCD_SNG_BUF, pma_track);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80078a6:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <USBD_LL_Init+0xa4>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	b299      	uxth	r1, r3
 80078ac:	89fb      	ldrh	r3, [r7, #14]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f7fa fbcf 	bl	8002052 <HAL_PCDEx_PMAConfig>
    pma_track += 8;
 80078b4:	89fb      	ldrh	r3, [r7, #14]
 80078b6:	3308      	adds	r3, #8
 80078b8:	81fb      	strh	r3, [r7, #14]
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	20000b80 	.word	0x20000b80
 80078c8:	20000290 	.word	0x20000290
 80078cc:	2000018b 	.word	0x2000018b
 80078d0:	200000ae 	.word	0x200000ae

080078d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7f9 f852 	bl	8000994 <HAL_PCD_Start>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 f918 	bl	8007b2c <USBD_Get_USB_Status>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007900:	7bbb      	ldrb	r3, [r7, #14]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	4608      	mov	r0, r1
 8007914:	4611      	mov	r1, r2
 8007916:	461a      	mov	r2, r3
 8007918:	4603      	mov	r3, r0
 800791a:	70fb      	strb	r3, [r7, #3]
 800791c:	460b      	mov	r3, r1
 800791e:	70bb      	strb	r3, [r7, #2]
 8007920:	4613      	mov	r3, r2
 8007922:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8007932:	78bb      	ldrb	r3, [r7, #2]
 8007934:	883a      	ldrh	r2, [r7, #0]
 8007936:	78f9      	ldrb	r1, [r7, #3]
 8007938:	f7f9 f9ca 	bl	8000cd0 <HAL_PCD_EP_Open>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 f8f2 	bl	8007b2c <USBD_Get_USB_Status>
 8007948:	4603      	mov	r3, r0
 800794a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800794c:	7bbb      	ldrb	r3, [r7, #14]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	460b      	mov	r3, r1
 8007960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	4611      	mov	r1, r2
 8007974:	4618      	mov	r0, r3
 8007976:	f7f9 fa11 	bl	8000d9c <HAL_PCD_EP_Close>
 800797a:	4603      	mov	r3, r0
 800797c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f8d3 	bl	8007b2c <USBD_Get_USB_Status>
 8007986:	4603      	mov	r3, r0
 8007988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800798a:	7bbb      	ldrb	r3, [r7, #14]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80079ae:	78fa      	ldrb	r2, [r7, #3]
 80079b0:	4611      	mov	r1, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7f9 faba 	bl	8000f2c <HAL_PCD_EP_SetStall>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f8b4 	bl	8007b2c <USBD_Get_USB_Status>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80079ec:	78fa      	ldrb	r2, [r7, #3]
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7f9 fafb 	bl	8000fec <HAL_PCD_EP_ClrStall>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 f895 	bl	8007b2c <USBD_Get_USB_Status>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007a22:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 8007a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	da0c      	bge.n	8007a46 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a32:	68f9      	ldr	r1, [r7, #12]
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	4613      	mov	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	440b      	add	r3, r1
 8007a40:	3302      	adds	r3, #2
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	e00b      	b.n	8007a5e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a4c:	68f9      	ldr	r1, [r7, #12]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	440b      	add	r3, r1
 8007a58:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007a5c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr

08007a68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007a82:	78fa      	ldrb	r2, [r7, #3]
 8007a84:	4611      	mov	r1, r2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7f9 f8fd 	bl	8000c86 <HAL_PCD_SetAddress>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 f84a 	bl	8007b2c <USBD_Get_USB_Status>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b086      	sub	sp, #24
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8007ac4:	7af9      	ldrb	r1, [r7, #11]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	f7f9 f9ec 	bl	8000ea6 <HAL_PCD_EP_Transmit>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 f829 	bl	8007b2c <USBD_Get_USB_Status>
 8007ada:	4603      	mov	r3, r0
 8007adc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ade:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	607a      	str	r2, [r7, #4]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	460b      	mov	r3, r1
 8007af6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8007b06:	7af9      	ldrb	r1, [r7, #11]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	f7f9 f98e 	bl	8000e2c <HAL_PCD_EP_Receive>
 8007b10:	4603      	mov	r3, r0
 8007b12:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 f808 	bl	8007b2c <USBD_Get_USB_Status>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b20:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d817      	bhi.n	8007b70 <USBD_Get_USB_Status+0x44>
 8007b40:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <USBD_Get_USB_Status+0x1c>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007b59 	.word	0x08007b59
 8007b4c:	08007b5f 	.word	0x08007b5f
 8007b50:	08007b65 	.word	0x08007b65
 8007b54:	08007b6b 	.word	0x08007b6b
  {
  case HAL_OK:
    usb_status = USBD_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5c:	e00b      	b.n	8007b76 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	73fb      	strb	r3, [r7, #15]
    break;
 8007b62:	e008      	b.n	8007b76 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 8007b64:	2301      	movs	r3, #1
 8007b66:	73fb      	strb	r3, [r7, #15]
    break;
 8007b68:	e005      	b.n	8007b76 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b6e:	e002      	b.n	8007b76 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8007b70:	2303      	movs	r3, #3
 8007b72:	73fb      	strb	r3, [r7, #15]
    break;
 8007b74:	bf00      	nop
  }
  return usb_status;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc80      	pop	{r7}
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop

08007b84 <__libc_init_array>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	2600      	movs	r6, #0
 8007b88:	4d0c      	ldr	r5, [pc, #48]	; (8007bbc <__libc_init_array+0x38>)
 8007b8a:	4c0d      	ldr	r4, [pc, #52]	; (8007bc0 <__libc_init_array+0x3c>)
 8007b8c:	1b64      	subs	r4, r4, r5
 8007b8e:	10a4      	asrs	r4, r4, #2
 8007b90:	42a6      	cmp	r6, r4
 8007b92:	d109      	bne.n	8007ba8 <__libc_init_array+0x24>
 8007b94:	f000 f830 	bl	8007bf8 <_init>
 8007b98:	2600      	movs	r6, #0
 8007b9a:	4d0a      	ldr	r5, [pc, #40]	; (8007bc4 <__libc_init_array+0x40>)
 8007b9c:	4c0a      	ldr	r4, [pc, #40]	; (8007bc8 <__libc_init_array+0x44>)
 8007b9e:	1b64      	subs	r4, r4, r5
 8007ba0:	10a4      	asrs	r4, r4, #2
 8007ba2:	42a6      	cmp	r6, r4
 8007ba4:	d105      	bne.n	8007bb2 <__libc_init_array+0x2e>
 8007ba6:	bd70      	pop	{r4, r5, r6, pc}
 8007ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bac:	4798      	blx	r3
 8007bae:	3601      	adds	r6, #1
 8007bb0:	e7ee      	b.n	8007b90 <__libc_init_array+0xc>
 8007bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb6:	4798      	blx	r3
 8007bb8:	3601      	adds	r6, #1
 8007bba:	e7f2      	b.n	8007ba2 <__libc_init_array+0x1e>
 8007bbc:	08007ca4 	.word	0x08007ca4
 8007bc0:	08007ca4 	.word	0x08007ca4
 8007bc4:	08007ca4 	.word	0x08007ca4
 8007bc8:	08007ca8 	.word	0x08007ca8

08007bcc <memcpy>:
 8007bcc:	440a      	add	r2, r1
 8007bce:	4291      	cmp	r1, r2
 8007bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bd4:	d100      	bne.n	8007bd8 <memcpy+0xc>
 8007bd6:	4770      	bx	lr
 8007bd8:	b510      	push	{r4, lr}
 8007bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bde:	4291      	cmp	r1, r2
 8007be0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007be4:	d1f9      	bne.n	8007bda <memcpy+0xe>
 8007be6:	bd10      	pop	{r4, pc}

08007be8 <memset>:
 8007be8:	4603      	mov	r3, r0
 8007bea:	4402      	add	r2, r0
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d100      	bne.n	8007bf2 <memset+0xa>
 8007bf0:	4770      	bx	lr
 8007bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf6:	e7f9      	b.n	8007bec <memset+0x4>

08007bf8 <_init>:
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfa:	bf00      	nop
 8007bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfe:	bc08      	pop	{r3}
 8007c00:	469e      	mov	lr, r3
 8007c02:	4770      	bx	lr

08007c04 <_fini>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	bf00      	nop
 8007c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0a:	bc08      	pop	{r3}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	4770      	bx	lr
