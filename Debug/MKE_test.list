
MKE_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007538  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d8  080076d8  00020284  2**0
                  CONTENTS
  4 .ARM          00000000  080076d8  080076d8  00020284  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076d8  080076d8  00020284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d8  080076d8  000176d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076dc  080076dc  000176dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  080076e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  20000284  08007964  00020284  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ba0  08007964  00020ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014330  00000000  00000000  000202ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b0  00000000  00000000  000345dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00037790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  00038280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e46  00000000  00000000  00038c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7ad  00000000  00000000  00052a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000855e7  00000000  00000000  000621fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e77e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b0  00000000  00000000  000e7838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000284 	.word	0x20000284
 8000128:	00000000 	.word	0x00000000
 800012c:	0800762c 	.word	0x0800762c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000288 	.word	0x20000288
 8000148:	0800762c 	.word	0x0800762c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 f98b 	bl	80004b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f83f 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f7ff ffd5 	bl	800014c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80001a2:	f000 f90f 	bl	80003c4 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80001a6:	f004 fef9 	bl	8004f9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //mousehid.mouse_x=10;
	  for (int y=0; y<4; y++)
 80001aa:	2300      	movs	r3, #0
 80001ac:	607b      	str	r3, [r7, #4]
 80001ae:	e026      	b.n	80001fe <main+0x6e>
	  {

		  for (int i=0; i < 30; i++)
 80001b0:	2300      	movs	r3, #0
 80001b2:	603b      	str	r3, [r7, #0]
 80001b4:	e010      	b.n	80001d8 <main+0x48>
		  {
			  HAL_Delay(50);
 80001b6:	2032      	movs	r0, #50	; 0x32
 80001b8:	f000 f9dc 	bl	8000574 <HAL_Delay>
			  mousehid=mousemove[y];
 80001bc:	4a12      	ldr	r2, [pc, #72]	; (8000208 <main+0x78>)
 80001be:	4913      	ldr	r1, [pc, #76]	; (800020c <main+0x7c>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c6:	6013      	str	r3, [r2, #0]
			  USBD_HID_Mouse_SendReport(&hUsbDevice, &mousehid, sizeof (mousehid));
 80001c8:	2204      	movs	r2, #4
 80001ca:	490f      	ldr	r1, [pc, #60]	; (8000208 <main+0x78>)
 80001cc:	4810      	ldr	r0, [pc, #64]	; (8000210 <main+0x80>)
 80001ce:	f005 fe67 	bl	8005ea0 <USBD_HID_Mouse_SendReport>
		  for (int i=0; i < 30; i++)
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	3301      	adds	r3, #1
 80001d6:	603b      	str	r3, [r7, #0]
 80001d8:	683b      	ldr	r3, [r7, #0]
 80001da:	2b1d      	cmp	r3, #29
 80001dc:	ddeb      	ble.n	80001b6 <main+0x26>
		  }
		  USBD_HID_Keybaord_SendReport(&hUsbDevice, &kbdPress, 8);
 80001de:	2208      	movs	r2, #8
 80001e0:	490c      	ldr	r1, [pc, #48]	; (8000214 <main+0x84>)
 80001e2:	480b      	ldr	r0, [pc, #44]	; (8000210 <main+0x80>)
 80001e4:	f005 fc22 	bl	8005a2c <USBD_HID_Keybaord_SendReport>
		  HAL_Delay(50);
 80001e8:	2032      	movs	r0, #50	; 0x32
 80001ea:	f000 f9c3 	bl	8000574 <HAL_Delay>
		  USBD_HID_Keybaord_SendReport(&hUsbDevice, &kbdRelease, 8);
 80001ee:	2208      	movs	r2, #8
 80001f0:	4909      	ldr	r1, [pc, #36]	; (8000218 <main+0x88>)
 80001f2:	4807      	ldr	r0, [pc, #28]	; (8000210 <main+0x80>)
 80001f4:	f005 fc1a 	bl	8005a2c <USBD_HID_Keybaord_SendReport>
	  for (int y=0; y<4; y++)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3301      	adds	r3, #1
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2b03      	cmp	r3, #3
 8000202:	ddd5      	ble.n	80001b0 <main+0x20>
 8000204:	e7d1      	b.n	80001aa <main+0x1a>
 8000206:	bf00      	nop
 8000208:	200002a8 	.word	0x200002a8
 800020c:	20000008 	.word	0x20000008
 8000210:	20000608 	.word	0x20000608
 8000214:	20000000 	.word	0x20000000
 8000218:	200002a0 	.word	0x200002a0

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b094      	sub	sp, #80	; 0x50
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000226:	2228      	movs	r2, #40	; 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f007 f9f6 	bl	800761c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	f107 0314 	add.w	r3, r7, #20
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024c:	2301      	movs	r3, #1
 800024e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000268:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800026c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000272:	4618      	mov	r0, r3
 8000274:	f001 ff68 	bl	8002148 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800027e:	f000 f828 	bl	80002d2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000292:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	2101      	movs	r1, #1
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 f9d2 	bl	8002648 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002aa:	f000 f812 	bl	80002d2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ae:	2310      	movs	r3, #16
 80002b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002b6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fb2c 	bl	8002918 <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002c6:	f000 f804 	bl	80002d2 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3750      	adds	r7, #80	; 0x50
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d6:	b672      	cpsid	i
}
 80002d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002da:	e7fe      	b.n	80002da <Error_Handler+0x8>

080002dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <HAL_MspInit+0x5c>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	4a14      	ldr	r2, [pc, #80]	; (8000338 <HAL_MspInit+0x5c>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6193      	str	r3, [r2, #24]
 80002ee:	4b12      	ldr	r3, [pc, #72]	; (8000338 <HAL_MspInit+0x5c>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	60bb      	str	r3, [r7, #8]
 80002f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <HAL_MspInit+0x5c>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <HAL_MspInit+0x5c>)
 8000300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000304:	61d3      	str	r3, [r2, #28]
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <HAL_MspInit+0x5c>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <HAL_MspInit+0x60>)
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <HAL_MspInit+0x60>)
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000
 800033c:	40010000 	.word	0x40010000

08000340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000344:	e7fe      	b.n	8000344 <NMI_Handler+0x4>

08000346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034a:	e7fe      	b.n	800034a <HardFault_Handler+0x4>

0800034c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <MemManage_Handler+0x4>

08000352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000356:	e7fe      	b.n	8000356 <BusFault_Handler+0x4>

08000358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800035c:	e7fe      	b.n	800035c <UsageFault_Handler+0x4>

0800035e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr

08000376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr

08000382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000386:	f000 f8d9 	bl	800053c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000394:	4802      	ldr	r0, [pc, #8]	; (80003a0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000396:	f000 fb4f 	bl	8000a38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000318 	.word	0x20000318

080003a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003a8:	4802      	ldr	r0, [pc, #8]	; (80003b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003aa:	f000 fb45 	bl	8000a38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000318 	.word	0x20000318

080003b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <MX_USB_PCD_Init+0x3c>)
 80003ca:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <MX_USB_PCD_Init+0x40>)
 80003cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USB_PCD_Init+0x3c>)
 80003d0:	2208      	movs	r2, #8
 80003d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <MX_USB_PCD_Init+0x3c>)
 80003d6:	2202      	movs	r2, #2
 80003d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USB_PCD_Init+0x3c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <MX_USB_PCD_Init+0x3c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USB_PCD_Init+0x3c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80003ec:	4804      	ldr	r0, [pc, #16]	; (8000400 <MX_USB_PCD_Init+0x3c>)
 80003ee:	f000 f9f2 	bl	80007d6 <HAL_PCD_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80003f8:	f7ff ff6b 	bl	80002d2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000318 	.word	0x20000318
 8000404:	40005c00 	.word	0x40005c00

08000408 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a11      	ldr	r2, [pc, #68]	; (800045c <HAL_PCD_MspInit+0x54>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d11b      	bne.n	8000452 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <HAL_PCD_MspInit+0x58>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a10      	ldr	r2, [pc, #64]	; (8000460 <HAL_PCD_MspInit+0x58>)
 8000420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <HAL_PCD_MspInit+0x58>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]

    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	2013      	movs	r0, #19
 8000438:	f000 f997 	bl	800076a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800043c:	2013      	movs	r0, #19
 800043e:	f000 f9b0 	bl	80007a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	2100      	movs	r1, #0
 8000446:	2014      	movs	r0, #20
 8000448:	f000 f98f 	bl	800076a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800044c:	2014      	movs	r0, #20
 800044e:	f000 f9a8 	bl	80007a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000452:	bf00      	nop
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40005c00 	.word	0x40005c00
 8000460:	40021000 	.word	0x40021000

08000464 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000466:	490d      	ldr	r1, [pc, #52]	; (800049c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800046c:	e002      	b.n	8000474 <LoopCopyDataInit>

0800046e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000472:	3304      	adds	r3, #4

08000474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000478:	d3f9      	bcc.n	800046e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047a:	4a0a      	ldr	r2, [pc, #40]	; (80004a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800047c:	4c0a      	ldr	r4, [pc, #40]	; (80004a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000480:	e001      	b.n	8000486 <LoopFillZerobss>

08000482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000484:	3204      	adds	r2, #4

08000486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000488:	d3fb      	bcc.n	8000482 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800048a:	f7ff ff95 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800048e:	f007 f893 	bl	80075b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000492:	f7ff fe7d 	bl	8000190 <main>
  bx lr
 8000496:	4770      	bx	lr
  ldr r0, =_sdata
 8000498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800049c:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 80004a0:	080076e0 	.word	0x080076e0
  ldr r2, =_sbss
 80004a4:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 80004a8:	20000ba0 	.word	0x20000ba0

080004ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC1_2_IRQHandler>
	...

080004b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <HAL_Init+0x28>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <HAL_Init+0x28>)
 80004ba:	f043 0310 	orr.w	r3, r3, #16
 80004be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004c0:	2003      	movs	r0, #3
 80004c2:	f000 f947 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004c6:	200f      	movs	r0, #15
 80004c8:	f000 f808 	bl	80004dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004cc:	f7ff ff06 	bl	80002dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40022000 	.word	0x40022000

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_InitTick+0x54>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <HAL_InitTick+0x58>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f95f 	bl	80007be <HAL_SYSTICK_Config>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000506:	2301      	movs	r3, #1
 8000508:	e00e      	b.n	8000528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b0f      	cmp	r3, #15
 800050e:	d80a      	bhi.n	8000526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000510:	2200      	movs	r2, #0
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	f04f 30ff 	mov.w	r0, #4294967295
 8000518:	f000 f927 	bl	800076a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <HAL_InitTick+0x5c>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000522:	2300      	movs	r3, #0
 8000524:	e000      	b.n	8000528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000526:	2301      	movs	r3, #1
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000018 	.word	0x20000018
 8000534:	20000020 	.word	0x20000020
 8000538:	2000001c 	.word	0x2000001c

0800053c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <HAL_IncTick+0x1c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <HAL_IncTick+0x20>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4413      	add	r3, r2
 800054c:	4a03      	ldr	r2, [pc, #12]	; (800055c <HAL_IncTick+0x20>)
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	20000020 	.word	0x20000020
 800055c:	20000604 	.word	0x20000604

08000560 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  return uwTick;
 8000564:	4b02      	ldr	r3, [pc, #8]	; (8000570 <HAL_GetTick+0x10>)
 8000566:	681b      	ldr	r3, [r3, #0]
}
 8000568:	4618      	mov	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	20000604 	.word	0x20000604

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff0 	bl	8000560 <HAL_GetTick>
 8000580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800058c:	d005      	beq.n	800059a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_Delay+0x44>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4413      	add	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800059a:	bf00      	nop
 800059c:	f7ff ffe0 	bl	8000560 <HAL_GetTick>
 80005a0:	4602      	mov	r2, r0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d8f7      	bhi.n	800059c <HAL_Delay+0x28>
  {
  }
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000020 	.word	0x20000020

080005bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ee:	4a04      	ldr	r2, [pc, #16]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	60d3      	str	r3, [r2, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__NVIC_GetPriorityGrouping+0x18>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	f003 0307 	and.w	r3, r3, #7
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db0b      	blt.n	800064a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 021f 	and.w	r2, r3, #31
 8000638:	4906      	ldr	r1, [pc, #24]	; (8000654 <__NVIC_EnableIRQ+0x34>)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	095b      	lsrs	r3, r3, #5
 8000640:	2001      	movs	r0, #1
 8000642:	fa00 f202 	lsl.w	r2, r0, r2
 8000646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f7ff ff90 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff2d 	bl	80005bc <__NVIC_SetPriorityGrouping>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800077c:	f7ff ff42 	bl	8000604 <__NVIC_GetPriorityGrouping>
 8000780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f7ff ff90 	bl	80006ac <NVIC_EncodePriority>
 800078c:	4602      	mov	r2, r0
 800078e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff5f 	bl	8000658 <__NVIC_SetPriority>
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff35 	bl	8000620 <__NVIC_EnableIRQ>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ffa2 	bl	8000710 <SysTick_Config>
 80007cc:	4603      	mov	r3, r0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80007d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d8:	b08b      	sub	sp, #44	; 0x2c
 80007da:	af06      	add	r7, sp, #24
 80007dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d101      	bne.n	80007e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e0fd      	b.n	80009e4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d106      	bne.n	8000802 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fe03 	bl	8000408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2203      	movs	r2, #3
 8000806:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f002 f95e 	bl	8002ad0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	687e      	ldr	r6, [r7, #4]
 800081c:	466d      	mov	r5, sp
 800081e:	f106 0410 	add.w	r4, r6, #16
 8000822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	602b      	str	r3, [r5, #0]
 800082a:	1d33      	adds	r3, r6, #4
 800082c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800082e:	6838      	ldr	r0, [r7, #0]
 8000830:	f002 f928 	bl	8002a84 <USB_CoreInit>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d005      	beq.n	8000846 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2202      	movs	r2, #2
 800083e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e0ce      	b.n	80009e4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f002 f959 	bl	8002b04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	e04c      	b.n	80008f2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	1c5a      	adds	r2, r3, #1
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	440b      	add	r3, r1
 8000868:	3301      	adds	r3, #1
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	440b      	add	r3, r1
 800087e:	7bfa      	ldrb	r2, [r7, #15]
 8000880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000882:	7bfa      	ldrb	r2, [r7, #15]
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	b298      	uxth	r0, r3
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	4613      	mov	r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	4413      	add	r3, r2
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	440b      	add	r3, r1
 8000894:	3336      	adds	r3, #54	; 0x36
 8000896:	4602      	mov	r2, r0
 8000898:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	6879      	ldr	r1, [r7, #4]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	440b      	add	r3, r1
 80008aa:	3303      	adds	r3, #3
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80008b0:	7bfa      	ldrb	r2, [r7, #15]
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	4613      	mov	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	440b      	add	r3, r1
 80008be:	3338      	adds	r3, #56	; 0x38
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80008c4:	7bfa      	ldrb	r2, [r7, #15]
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	440b      	add	r3, r1
 80008d2:	333c      	adds	r3, #60	; 0x3c
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80008d8:	7bfa      	ldrb	r2, [r7, #15]
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	440b      	add	r3, r1
 80008e6:	3340      	adds	r3, #64	; 0x40
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	3301      	adds	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
 80008f2:	7bfa      	ldrb	r2, [r7, #15]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d3ad      	bcc.n	8000858 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	e044      	b.n	800098c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000902:	7bfa      	ldrb	r2, [r7, #15]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	440b      	add	r3, r1
 8000910:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000918:	7bfa      	ldrb	r2, [r7, #15]
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	4613      	mov	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	440b      	add	r3, r1
 8000926:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800092a:	7bfa      	ldrb	r2, [r7, #15]
 800092c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800092e:	7bfa      	ldrb	r2, [r7, #15]
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	4613      	mov	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	440b      	add	r3, r1
 800093c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000944:	7bfa      	ldrb	r2, [r7, #15]
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	4613      	mov	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	440b      	add	r3, r1
 8000952:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800095a:	7bfa      	ldrb	r2, [r7, #15]
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	440b      	add	r3, r1
 8000968:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000970:	7bfa      	ldrb	r2, [r7, #15]
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	4613      	mov	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	440b      	add	r3, r1
 800097e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	3301      	adds	r3, #1
 800098a:	73fb      	strb	r3, [r7, #15]
 800098c:	7bfa      	ldrb	r2, [r7, #15]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	429a      	cmp	r2, r3
 8000994:	d3b5      	bcc.n	8000902 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	687e      	ldr	r6, [r7, #4]
 800099e:	466d      	mov	r5, sp
 80009a0:	f106 0410 	add.w	r4, r6, #16
 80009a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a8:	6823      	ldr	r3, [r4, #0]
 80009aa:	602b      	str	r3, [r5, #0]
 80009ac:	1d33      	adds	r3, r6, #4
 80009ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009b0:	6838      	ldr	r0, [r7, #0]
 80009b2:	f002 f8b3 	bl	8002b1c <USB_DevInit>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d005      	beq.n	80009c8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2202      	movs	r2, #2
 80009c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	e00d      	b.n	80009e4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2201      	movs	r2, #1
 80009d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fa24 	bl	8004e2a <USB_DevDisconnect>

  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d101      	bne.n	8000a02 <HAL_PCD_Start+0x16>
 80009fe:	2302      	movs	r3, #2
 8000a00:	e016      	b.n	8000a30 <HAL_PCD_Start+0x44>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2201      	movs	r2, #1
 8000a06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 f848 	bl	8002aa4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000a14:	2101      	movs	r1, #1
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f001 fb8b 	bl	8002132 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f004 f9f8 	bl	8004e16 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 f9fa 	bl	8004e3e <USB_ReadInterrupts>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a54:	d102      	bne.n	8000a5c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 fb4a 	bl	80010f0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 f9ec 	bl	8004e3e <USB_ReadInterrupts>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a70:	d112      	bne.n	8000a98 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a84:	b292      	uxth	r2, r2
 8000a86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f006 fbaa 	bl	80071e4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000a90:	2100      	movs	r1, #0
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f925 	bl	8000ce2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f004 f9ce 	bl	8004e3e <USB_ReadInterrupts>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000aac:	d10b      	bne.n	8000ac6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ac0:	b292      	uxth	r2, r2
 8000ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f004 f9b7 	bl	8004e3e <USB_ReadInterrupts>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ada:	d10b      	bne.n	8000af4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000aee:	b292      	uxth	r2, r2
 8000af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 f9a0 	bl	8004e3e <USB_ReadInterrupts>
 8000afe:	4603      	mov	r3, r0
 8000b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b08:	d126      	bne.n	8000b58 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f022 0204 	bic.w	r2, r2, #4
 8000b1c:	b292      	uxth	r2, r2
 8000b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f022 0208 	bic.w	r2, r2, #8
 8000b34:	b292      	uxth	r2, r2
 8000b36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f006 fb81 	bl	8007242 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b52:	b292      	uxth	r2, r2
 8000b54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f004 f96e 	bl	8004e3e <USB_ReadInterrupts>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b6c:	f040 8084 	bne.w	8000c78 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	77fb      	strb	r3, [r7, #31]
 8000b74:	e011      	b.n	8000b9a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	7ffb      	ldrb	r3, [r7, #31]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	441a      	add	r2, r3
 8000b82:	7ffb      	ldrb	r3, [r7, #31]
 8000b84:	8812      	ldrh	r2, [r2, #0]
 8000b86:	b292      	uxth	r2, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	f107 0120 	add.w	r1, r7, #32
 8000b8e:	440b      	add	r3, r1
 8000b90:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000b94:	7ffb      	ldrb	r3, [r7, #31]
 8000b96:	3301      	adds	r3, #1
 8000b98:	77fb      	strb	r3, [r7, #31]
 8000b9a:	7ffb      	ldrb	r3, [r7, #31]
 8000b9c:	2b07      	cmp	r3, #7
 8000b9e:	d9ea      	bls.n	8000b76 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f042 0201 	orr.w	r2, r2, #1
 8000bb2:	b292      	uxth	r2, r2
 8000bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0201 	bic.w	r2, r2, #1
 8000bca:	b292      	uxth	r2, r2
 8000bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000bd0:	bf00      	nop
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0f6      	beq.n	8000bd2 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bf6:	b292      	uxth	r2, r2
 8000bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	77fb      	strb	r3, [r7, #31]
 8000c00:	e010      	b.n	8000c24 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000c02:	7ffb      	ldrb	r3, [r7, #31]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	7ffa      	ldrb	r2, [r7, #31]
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	440a      	add	r2, r1
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	f107 0120 	add.w	r1, r7, #32
 8000c16:	440b      	add	r3, r1
 8000c18:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000c1c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000c1e:	7ffb      	ldrb	r3, [r7, #31]
 8000c20:	3301      	adds	r3, #1
 8000c22:	77fb      	strb	r3, [r7, #31]
 8000c24:	7ffb      	ldrb	r3, [r7, #31]
 8000c26:	2b07      	cmp	r3, #7
 8000c28:	d9eb      	bls.n	8000c02 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f042 0208 	orr.w	r2, r2, #8
 8000c3c:	b292      	uxth	r2, r2
 8000c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c54:	b292      	uxth	r2, r2
 8000c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f042 0204 	orr.w	r2, r2, #4
 8000c6c:	b292      	uxth	r2, r2
 8000c6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f006 fad7 	bl	8007226 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 f8de 	bl	8004e3e <USB_ReadInterrupts>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c8c:	d10e      	bne.n	8000cac <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ca0:	b292      	uxth	r2, r2
 8000ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f006 fa8e 	bl	80071c8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 f8c4 	bl	8004e3e <USB_ReadInterrupts>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cc0:	d10b      	bne.n	8000cda <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cd4:	b292      	uxth	r2, r2
 8000cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3720      	adds	r7, #32
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	460b      	mov	r3, r1
 8000cec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d101      	bne.n	8000cfc <HAL_PCD_SetAddress+0x1a>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e013      	b.n	8000d24 <HAL_PCD_SetAddress+0x42>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	78fa      	ldrb	r2, [r7, #3]
 8000d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	78fa      	ldrb	r2, [r7, #3]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 f86b 	bl	8004df0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	4608      	mov	r0, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	70fb      	strb	r3, [r7, #3]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	803b      	strh	r3, [r7, #0]
 8000d42:	4613      	mov	r3, r2
 8000d44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da0e      	bge.n	8000d70 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	705a      	strb	r2, [r3, #1]
 8000d6e:	e00e      	b.n	8000d8e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	f003 0207 	and.w	r2, r3, #7
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000d9a:	883a      	ldrh	r2, [r7, #0]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	78ba      	ldrb	r2, [r7, #2]
 8000da4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d004      	beq.n	8000db8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000db8:	78bb      	ldrb	r3, [r7, #2]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d102      	bne.n	8000dc4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d101      	bne.n	8000dd2 <HAL_PCD_EP_Open+0xa6>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e00e      	b.n	8000df0 <HAL_PCD_EP_Open+0xc4>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68f9      	ldr	r1, [r7, #12]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 febb 	bl	8002b5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000dee:	7afb      	ldrb	r3, [r7, #11]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	da0e      	bge.n	8000e2a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2201      	movs	r2, #1
 8000e26:	705a      	strb	r2, [r3, #1]
 8000e28:	e00e      	b.n	8000e48 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	f003 0207 	and.w	r2, r3, #7
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2200      	movs	r2, #0
 8000e46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d101      	bne.n	8000e62 <HAL_PCD_EP_Close+0x6a>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e00e      	b.n	8000e80 <HAL_PCD_EP_Close+0x88>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2201      	movs	r2, #1
 8000e66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68f9      	ldr	r1, [r7, #12]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 f9dd 	bl	8003230 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	460b      	mov	r3, r1
 8000e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e98:	7afb      	ldrb	r3, [r7, #11]
 8000e9a:	f003 0207 	and.w	r2, r3, #7
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4413      	add	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ec8:	7afb      	ldrb	r3, [r7, #11]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000ed4:	7afb      	ldrb	r3, [r7, #11]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d106      	bne.n	8000eec <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6979      	ldr	r1, [r7, #20]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f002 fb8f 	bl	8003608 <USB_EPStartXfer>
 8000eea:	e005      	b.n	8000ef8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6979      	ldr	r1, [r7, #20]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 fb88 	bl	8003608 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f12:	7afb      	ldrb	r3, [r7, #11]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4413      	add	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f4e:	7afb      	ldrb	r3, [r7, #11]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000f5a:	7afb      	ldrb	r3, [r7, #11]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d106      	bne.n	8000f72 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6979      	ldr	r1, [r7, #20]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fb4c 	bl	8003608 <USB_EPStartXfer>
 8000f70:	e005      	b.n	8000f7e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6979      	ldr	r1, [r7, #20]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fb45 	bl	8003608 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	f003 0207 	and.w	r2, r3, #7
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d901      	bls.n	8000fa6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e04c      	b.n	8001040 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	da0e      	bge.n	8000fcc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	705a      	strb	r2, [r3, #1]
 8000fca:	e00c      	b.n	8000fe6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <HAL_PCD_EP_SetStall+0x7e>
 8001002:	2302      	movs	r3, #2
 8001004:	e01c      	b.n	8001040 <HAL_PCD_EP_SetStall+0xb8>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68f9      	ldr	r1, [r7, #12]
 8001014:	4618      	mov	r0, r3
 8001016:	f003 fdee 	bl	8004bf6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	2b00      	cmp	r3, #0
 8001022:	d108      	bne.n	8001036 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800102e:	4619      	mov	r1, r3
 8001030:	4610      	mov	r0, r2
 8001032:	f003 ff13 	bl	8004e5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	f003 020f 	and.w	r2, r3, #15
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	429a      	cmp	r2, r3
 8001060:	d901      	bls.n	8001066 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e040      	b.n	80010e8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800106a:	2b00      	cmp	r3, #0
 800106c:	da0e      	bge.n	800108c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2201      	movs	r2, #1
 8001088:	705a      	strb	r2, [r3, #1]
 800108a:	e00e      	b.n	80010aa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	f003 0207 	and.w	r2, r3, #7
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d101      	bne.n	80010ca <HAL_PCD_EP_ClrStall+0x82>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e00e      	b.n	80010e8 <HAL_PCD_EP_ClrStall+0xa0>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 fddc 	bl	8004c96 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08e      	sub	sp, #56	; 0x38
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80010f8:	e2ec      	b.n	80016d4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001102:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001104:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001110:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001114:	2b00      	cmp	r3, #0
 8001116:	f040 8161 	bne.w	80013dc <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800111a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800111c:	f003 0310 	and.w	r3, r3, #16
 8001120:	2b00      	cmp	r3, #0
 8001122:	d152      	bne.n	80011ca <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001134:	81fb      	strh	r3, [r7, #14]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001144:	b29b      	uxth	r3, r3
 8001146:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3328      	adds	r3, #40	; 0x28
 800114c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001156:	b29b      	uxth	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	3302      	adds	r3, #2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	4413      	add	r3, r2
 800116c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	441a      	add	r2, r3
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001188:	2100      	movs	r1, #0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f006 f802 	bl	8007194 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 829b 	beq.w	80016d4 <PCD_EP_ISR_Handler+0x5e4>
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f040 8296 	bne.w	80016d4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b292      	uxth	r2, r2
 80011bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80011c8:	e284      	b.n	80016d4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80011da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80011dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d034      	beq.n	800124e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	461a      	mov	r2, r3
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4413      	add	r3, r2
 80011f8:	3306      	adds	r3, #6
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	4413      	add	r3, r2
 8001202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001222:	b29b      	uxth	r3, r3
 8001224:	f003 fe6a 	bl	8004efc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29a      	uxth	r2, r3
 8001230:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001234:	4013      	ands	r3, r2
 8001236:	823b      	strh	r3, [r7, #16]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	8a3a      	ldrh	r2, [r7, #16]
 800123e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001242:	b292      	uxth	r2, r2
 8001244:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f005 ff77 	bl	800713a <HAL_PCD_SetupStageCallback>
 800124c:	e242      	b.n	80016d4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800124e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001252:	2b00      	cmp	r3, #0
 8001254:	f280 823e 	bge.w	80016d4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b29a      	uxth	r2, r3
 8001260:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001264:	4013      	ands	r3, r2
 8001266:	83bb      	strh	r3, [r7, #28]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	8bba      	ldrh	r2, [r7, #28]
 800126e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001272:	b292      	uxth	r2, r2
 8001274:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800127e:	b29b      	uxth	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	3306      	adds	r3, #6
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	4413      	add	r3, r2
 8001294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d019      	beq.n	80012de <PCD_EP_ISR_Handler+0x1ee>
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d015      	beq.n	80012de <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	6959      	ldr	r1, [r3, #20]
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	f003 fe1a 	bl	8004efc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	441a      	add	r2, r3
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80012d6:	2100      	movs	r1, #0
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f005 ff40 	bl	800715e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 81f2 	bne.w	80016d4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012fe:	b29b      	uxth	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4413      	add	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d112      	bne.n	800133e <PCD_EP_ISR_Handler+0x24e>
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001322:	b29a      	uxth	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	801a      	strh	r2, [r3, #0]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001336:	b29a      	uxth	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	801a      	strh	r2, [r3, #0]
 800133c:	e02f      	b.n	800139e <PCD_EP_ISR_Handler+0x2ae>
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b3e      	cmp	r3, #62	; 0x3e
 8001344:	d813      	bhi.n	800136e <PCD_EP_ISR_Handler+0x27e>
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <PCD_EP_ISR_Handler+0x270>
 800135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135c:	3301      	adds	r3, #1
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
 8001360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001362:	b29b      	uxth	r3, r3
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	b29a      	uxth	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	801a      	strh	r2, [r3, #0]
 800136c:	e017      	b.n	800139e <PCD_EP_ISR_Handler+0x2ae>
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <PCD_EP_ISR_Handler+0x298>
 8001382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001384:	3b01      	subs	r3, #1
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
 8001388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138a:	b29b      	uxth	r3, r3
 800138c:	029b      	lsls	r3, r3, #10
 800138e:	b29b      	uxth	r3, r3
 8001390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001398:	b29a      	uxth	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ae:	827b      	strh	r3, [r7, #18]
 80013b0:	8a7b      	ldrh	r3, [r7, #18]
 80013b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80013b6:	827b      	strh	r3, [r7, #18]
 80013b8:	8a7b      	ldrh	r3, [r7, #18]
 80013ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80013be:	827b      	strh	r3, [r7, #18]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	8a7b      	ldrh	r3, [r7, #18]
 80013c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80013ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80013ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	8013      	strh	r3, [r2, #0]
 80013da:	e17b      	b.n	80016d4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80013ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f280 80ea 	bge.w	80015cc <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b29a      	uxth	r2, r3
 800140a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800140e:	4013      	ands	r3, r2
 8001410:	853b      	strh	r3, [r7, #40]	; 0x28
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001426:	b292      	uxth	r2, r2
 8001428:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800142a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	7b1b      	ldrb	r3, [r3, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d122      	bne.n	800148e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001450:	b29b      	uxth	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	3306      	adds	r3, #6
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	4413      	add	r3, r2
 8001466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001470:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001472:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 8087 	beq.w	8001588 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	6959      	ldr	r1, [r3, #20]
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	88da      	ldrh	r2, [r3, #6]
 8001486:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001488:	f003 fd38 	bl	8004efc <USB_ReadPMA>
 800148c:	e07c      	b.n	8001588 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	78db      	ldrb	r3, [r3, #3]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d108      	bne.n	80014a8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001496:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001498:	461a      	mov	r2, r3
 800149a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f927 	bl	80016f0 <HAL_PCD_EP_DB_Receive>
 80014a2:	4603      	mov	r3, r0
 80014a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80014a6:	e06f      	b.n	8001588 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	441a      	add	r2, r3
 80014d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80014d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80014dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d021      	beq.n	8001546 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800150a:	b29b      	uxth	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	3302      	adds	r3, #2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	4413      	add	r3, r2
 8001520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800152a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800152c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800152e:	2b00      	cmp	r3, #0
 8001530:	d02a      	beq.n	8001588 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	6959      	ldr	r1, [r3, #20]
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	891a      	ldrh	r2, [r3, #8]
 800153e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001540:	f003 fcdc 	bl	8004efc <USB_ReadPMA>
 8001544:	e020      	b.n	8001588 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4413      	add	r3, r2
 800155a:	3306      	adds	r3, #6
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	4413      	add	r3, r2
 8001564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800156e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001570:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	6959      	ldr	r1, [r3, #20]
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	895a      	ldrh	r2, [r3, #10]
 8001582:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001584:	f003 fcba 	bl	8004efc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	69da      	ldr	r2, [r3, #28]
 800158c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800158e:	441a      	add	r2, r3
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	695a      	ldr	r2, [r3, #20]
 8001598:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800159a:	441a      	add	r2, r3
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <PCD_EP_ISR_Handler+0x4c2>
 80015a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d206      	bcs.n	80015c0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f005 fdd0 	bl	800715e <HAL_PCD_DataOutStageCallback>
 80015be:	e005      	b.n	80015cc <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 f81e 	bl	8003608 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80015cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d07e      	beq.n	80016d4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80015d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4413      	add	r3, r2
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001604:	843b      	strh	r3, [r7, #32]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	441a      	add	r2, r3
 8001614:	8c3b      	ldrh	r3, [r7, #32]
 8001616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800161a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800161e:	b29b      	uxth	r3, r3
 8001620:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	78db      	ldrb	r3, [r3, #3]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d00c      	beq.n	8001644 <PCD_EP_ISR_Handler+0x554>
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	78db      	ldrb	r3, [r3, #3]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d008      	beq.n	8001644 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001636:	2b02      	cmp	r3, #2
 8001638:	d146      	bne.n	80016c8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800163a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d141      	bne.n	80016c8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800164c:	b29b      	uxth	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4413      	add	r3, r2
 8001658:	3302      	adds	r3, #2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	4413      	add	r3, r2
 8001662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800166c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	8bfb      	ldrh	r3, [r7, #30]
 8001674:	429a      	cmp	r2, r3
 8001676:	d906      	bls.n	8001686 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	8bfb      	ldrh	r3, [r7, #30]
 800167e:	1ad2      	subs	r2, r2, r3
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	619a      	str	r2, [r3, #24]
 8001684:	e002      	b.n	800168c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d106      	bne.n	80016a2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f005 fd7a 	bl	8007194 <HAL_PCD_DataInStageCallback>
 80016a0:	e018      	b.n	80016d4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	8bfb      	ldrh	r3, [r7, #30]
 80016a8:	441a      	add	r2, r3
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	8bfb      	ldrh	r3, [r7, #30]
 80016b4:	441a      	add	r2, r3
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 ffa1 	bl	8003608 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80016c6:	e005      	b.n	80016d4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80016c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016ca:	461a      	mov	r2, r3
 80016cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f91b 	bl	800190a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016dc:	b29b      	uxth	r3, r3
 80016de:	b21b      	sxth	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f6ff ad0a 	blt.w	80010fa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3738      	adds	r7, #56	; 0x38
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	4613      	mov	r3, r2
 80016fc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d07e      	beq.n	8001806 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001710:	b29b      	uxth	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	3302      	adds	r3, #2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	4413      	add	r3, r2
 8001726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001730:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	8b7b      	ldrh	r3, [r7, #26]
 8001738:	429a      	cmp	r2, r3
 800173a:	d306      	bcc.n	800174a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	8b7b      	ldrh	r3, [r7, #26]
 8001742:	1ad2      	subs	r2, r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	619a      	str	r2, [r3, #24]
 8001748:	e002      	b.n	8001750 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d123      	bne.n	80017a0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800176e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001772:	833b      	strh	r3, [r7, #24]
 8001774:	8b3b      	ldrh	r3, [r7, #24]
 8001776:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800177a:	833b      	strh	r3, [r7, #24]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	441a      	add	r2, r3
 800178a:	8b3b      	ldrh	r3, [r7, #24]
 800178c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179c:	b29b      	uxth	r3, r3
 800179e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01f      	beq.n	80017ea <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017c4:	82fb      	strh	r3, [r7, #22]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	441a      	add	r2, r3
 80017d4:	8afb      	ldrh	r3, [r7, #22]
 80017d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80017ea:	8b7b      	ldrh	r3, [r7, #26]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8087 	beq.w	8001900 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	6959      	ldr	r1, [r3, #20]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	891a      	ldrh	r2, [r3, #8]
 80017fe:	8b7b      	ldrh	r3, [r7, #26]
 8001800:	f003 fb7c 	bl	8004efc <USB_ReadPMA>
 8001804:	e07c      	b.n	8001900 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800180e:	b29b      	uxth	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	3306      	adds	r3, #6
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	4413      	add	r3, r2
 8001824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800182e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	699a      	ldr	r2, [r3, #24]
 8001834:	8b7b      	ldrh	r3, [r7, #26]
 8001836:	429a      	cmp	r2, r3
 8001838:	d306      	bcc.n	8001848 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	8b7b      	ldrh	r3, [r7, #26]
 8001840:	1ad2      	subs	r2, r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	619a      	str	r2, [r3, #24]
 8001846:	e002      	b.n	800184e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d123      	bne.n	800189e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b29b      	uxth	r3, r3
 8001868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800186c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001870:	83fb      	strh	r3, [r7, #30]
 8001872:	8bfb      	ldrh	r3, [r7, #30]
 8001874:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001878:	83fb      	strh	r3, [r7, #30]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	441a      	add	r2, r3
 8001888:	8bfb      	ldrh	r3, [r7, #30]
 800188a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800188e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189a:	b29b      	uxth	r3, r3
 800189c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d11f      	bne.n	80018e8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c2:	83bb      	strh	r3, [r7, #28]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	441a      	add	r2, r3
 80018d2:	8bbb      	ldrh	r3, [r7, #28]
 80018d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80018e8:	8b7b      	ldrh	r3, [r7, #26]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	6959      	ldr	r1, [r3, #20]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	895a      	ldrh	r2, [r3, #10]
 80018fa:	8b7b      	ldrh	r3, [r7, #26]
 80018fc:	f003 fafe 	bl	8004efc <USB_ReadPMA>
    }
  }

  return count;
 8001900:	8b7b      	ldrh	r3, [r7, #26]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b0a2      	sub	sp, #136	; 0x88
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	4613      	mov	r3, r2
 8001916:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 81c7 	beq.w	8001cb2 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800192c:	b29b      	uxth	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	3302      	adds	r3, #2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	4413      	add	r3, r2
 8001942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800194c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	699a      	ldr	r2, [r3, #24]
 8001954:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001958:	429a      	cmp	r2, r3
 800195a:	d907      	bls.n	800196c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	699a      	ldr	r2, [r3, #24]
 8001960:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001964:	1ad2      	subs	r2, r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	619a      	str	r2, [r3, #24]
 800196a:	e002      	b.n	8001972 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 80b9 	bne.w	8001aee <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d126      	bne.n	80019d2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001998:	4413      	add	r3, r2
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	011a      	lsls	r2, r3, #4
 80019a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a4:	4413      	add	r3, r2
 80019a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	801a      	strh	r2, [r3, #0]
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	801a      	strh	r2, [r3, #0]
 80019d0:	e01a      	b.n	8001a08 <HAL_PCD_EP_DB_Transmit+0xfe>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	785b      	ldrb	r3, [r3, #1]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d116      	bne.n	8001a08 <HAL_PCD_EP_DB_Transmit+0xfe>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ee:	4413      	add	r3, r2
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	011a      	lsls	r2, r3, #4
 80019f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fa:	4413      	add	r3, r2
 80019fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	2200      	movs	r2, #0
 8001a06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	623b      	str	r3, [r7, #32]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d126      	bne.n	8001a64 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	011a      	lsls	r2, r3, #4
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	4413      	add	r3, r2
 8001a38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	801a      	strh	r2, [r3, #0]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	801a      	strh	r2, [r3, #0]
 8001a62:	e017      	b.n	8001a94 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	785b      	ldrb	r3, [r3, #1]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d113      	bne.n	8001a94 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	623b      	str	r3, [r7, #32]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	011a      	lsls	r2, r3, #4
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	4413      	add	r3, r2
 8001a88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	2200      	movs	r2, #0
 8001a92:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f005 fb7a 	bl	8007194 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 82d4 	beq.w	8002054 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ac6:	827b      	strh	r3, [r7, #18]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	441a      	add	r2, r3
 8001ad6:	8a7b      	ldrh	r3, [r7, #18]
 8001ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	8013      	strh	r3, [r2, #0]
 8001aec:	e2b2      	b.n	8002054 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d021      	beq.n	8001b3c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	441a      	add	r2, r3
 8001b24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	f040 8286 	bne.w	8002054 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	695a      	ldr	r2, [r3, #20]
 8001b4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b50:	441a      	add	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b5e:	441a      	add	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d309      	bcc.n	8001b84 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	6a1a      	ldr	r2, [r3, #32]
 8001b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b7c:	1ad2      	subs	r2, r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	621a      	str	r2, [r3, #32]
 8001b82:	e015      	b.n	8001bb0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001b8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b9a:	e009      	b.n	8001bb0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	785b      	ldrb	r3, [r3, #1]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d155      	bne.n	8001c64 <HAL_PCD_EP_DB_Transmit+0x35a>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bcc:	4413      	add	r3, r2
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	011a      	lsls	r2, r3, #4
 8001bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd8:	4413      	add	r3, r2
 8001bda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
 8001be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d112      	bne.n	8001c0c <HAL_PCD_EP_DB_Transmit+0x302>
 8001be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	e047      	b.n	8001c9c <HAL_PCD_EP_DB_Transmit+0x392>
 8001c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c10:	d811      	bhi.n	8001c36 <HAL_PCD_EP_DB_Transmit+0x32c>
 8001c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_PCD_EP_DB_Transmit+0x31e>
 8001c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c24:	3301      	adds	r3, #1
 8001c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	029b      	lsls	r3, r3, #10
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c32:	801a      	strh	r2, [r3, #0]
 8001c34:	e032      	b.n	8001c9c <HAL_PCD_EP_DB_Transmit+0x392>
 8001c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <HAL_PCD_EP_DB_Transmit+0x342>
 8001c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	029b      	lsls	r3, r3, #10
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	e01b      	b.n	8001c9c <HAL_PCD_EP_DB_Transmit+0x392>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	785b      	ldrb	r3, [r3, #1]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d117      	bne.n	8001c9c <HAL_PCD_EP_DB_Transmit+0x392>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	643b      	str	r3, [r7, #64]	; 0x40
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c80:	4413      	add	r3, r2
 8001c82:	643b      	str	r3, [r7, #64]	; 0x40
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	011a      	lsls	r2, r3, #4
 8001c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c9a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	6959      	ldr	r1, [r3, #20]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	891a      	ldrh	r2, [r3, #8]
 8001ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	f003 f8e1 	bl	8004e72 <USB_WritePMA>
 8001cb0:	e1d0      	b.n	8002054 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3306      	adds	r3, #6
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d307      	bcc.n	8001cfa <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cf2:	1ad2      	subs	r2, r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	619a      	str	r2, [r3, #24]
 8001cf8:	e002      	b.n	8001d00 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 80c4 	bne.w	8001e92 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	785b      	ldrb	r3, [r3, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d126      	bne.n	8001d60 <HAL_PCD_EP_DB_Transmit+0x456>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d26:	4413      	add	r3, r2
 8001d28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	011a      	lsls	r2, r3, #4
 8001d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d32:	4413      	add	r3, r2
 8001d34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d48:	801a      	strh	r2, [r3, #0]
 8001d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d5c:	801a      	strh	r2, [r3, #0]
 8001d5e:	e01a      	b.n	8001d96 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d116      	bne.n	8001d96 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	677b      	str	r3, [r7, #116]	; 0x74
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d7c:	4413      	add	r3, r2
 8001d7e:	677b      	str	r3, [r7, #116]	; 0x74
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	011a      	lsls	r2, r3, #4
 8001d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d88:	4413      	add	r3, r2
 8001d8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d8e:	673b      	str	r3, [r7, #112]	; 0x70
 8001d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d92:	2200      	movs	r2, #0
 8001d94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d12f      	bne.n	8001e04 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	011a      	lsls	r2, r3, #4
 8001dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dcc:	4413      	add	r3, r2
 8001dce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e00:	801a      	strh	r2, [r3, #0]
 8001e02:	e017      	b.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	785b      	ldrb	r3, [r3, #1]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d113      	bne.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e1a:	4413      	add	r3, r2
 8001e1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	011a      	lsls	r2, r3, #4
 8001e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e26:	4413      	add	r3, r2
 8001e28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e30:	2200      	movs	r2, #0
 8001e32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f005 f9aa 	bl	8007194 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 8104 	bne.w	8002054 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	441a      	add	r2, r3
 8001e78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	8013      	strh	r3, [r2, #0]
 8001e90:	e0e0      	b.n	8002054 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d121      	bne.n	8001ee0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	441a      	add	r2, r3
 8001ec8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	f040 80b4 	bne.w	8002054 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ef4:	441a      	add	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f02:	441a      	add	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	6a1a      	ldr	r2, [r3, #32]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d309      	bcc.n	8001f28 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f20:	1ad2      	subs	r2, r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	621a      	str	r2, [r3, #32]
 8001f26:	e015      	b.n	8001f54 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8001f30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f34:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f3e:	e009      	b.n	8001f54 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	667b      	str	r3, [r7, #100]	; 0x64
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	785b      	ldrb	r3, [r3, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d155      	bne.n	800200e <HAL_PCD_EP_DB_Transmit+0x704>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f76:	4413      	add	r3, r2
 8001f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	011a      	lsls	r2, r3, #4
 8001f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f82:	4413      	add	r3, r2
 8001f84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f88:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d112      	bne.n	8001fb6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8001f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f9e:	801a      	strh	r2, [r3, #0]
 8001fa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fb2:	801a      	strh	r2, [r3, #0]
 8001fb4:	e044      	b.n	8002040 <HAL_PCD_EP_DB_Transmit+0x736>
 8001fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8001fba:	d811      	bhi.n	8001fe0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8001fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8001fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8001fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fce:	3301      	adds	r3, #1
 8001fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	029b      	lsls	r3, r3, #10
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	e02f      	b.n	8002040 <HAL_PCD_EP_DB_Transmit+0x736>
 8001fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	657b      	str	r3, [r7, #84]	; 0x54
 8001fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	657b      	str	r3, [r7, #84]	; 0x54
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	029b      	lsls	r3, r3, #10
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002006:	b29a      	uxth	r2, r3
 8002008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800200a:	801a      	strh	r2, [r3, #0]
 800200c:	e018      	b.n	8002040 <HAL_PCD_EP_DB_Transmit+0x736>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	785b      	ldrb	r3, [r3, #1]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d114      	bne.n	8002040 <HAL_PCD_EP_DB_Transmit+0x736>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800201e:	b29b      	uxth	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002024:	4413      	add	r3, r2
 8002026:	667b      	str	r3, [r7, #100]	; 0x64
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	011a      	lsls	r2, r3, #4
 800202e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002030:	4413      	add	r3, r2
 8002032:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002036:	663b      	str	r3, [r7, #96]	; 0x60
 8002038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203a:	b29a      	uxth	r2, r3
 800203c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800203e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	6959      	ldr	r1, [r3, #20]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	895a      	ldrh	r2, [r3, #10]
 800204c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800204e:	b29b      	uxth	r3, r3
 8002050:	f002 ff0f 	bl	8004e72 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800206a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800206e:	823b      	strh	r3, [r7, #16]
 8002070:	8a3b      	ldrh	r3, [r7, #16]
 8002072:	f083 0310 	eor.w	r3, r3, #16
 8002076:	823b      	strh	r3, [r7, #16]
 8002078:	8a3b      	ldrh	r3, [r7, #16]
 800207a:	f083 0320 	eor.w	r3, r3, #32
 800207e:	823b      	strh	r3, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	441a      	add	r2, r3
 800208e:	8a3b      	ldrh	r3, [r7, #16]
 8002090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3788      	adds	r7, #136	; 0x88
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b087      	sub	sp, #28
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	817b      	strh	r3, [r7, #10]
 80020bc:	4613      	mov	r3, r2
 80020be:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80020c0:	897b      	ldrh	r3, [r7, #10]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00b      	beq.n	80020e4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020cc:	897b      	ldrh	r3, [r7, #10]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	e009      	b.n	80020f8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020e4:	897a      	ldrh	r2, [r7, #10]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4413      	add	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80020f8:	893b      	ldrh	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d107      	bne.n	800210e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2200      	movs	r2, #0
 8002102:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	b29a      	uxth	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	80da      	strh	r2, [r3, #6]
 800210c:	e00b      	b.n	8002126 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2201      	movs	r2, #1
 8002112:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	b29a      	uxth	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	0c1b      	lsrs	r3, r3, #16
 8002120:	b29a      	uxth	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd PCD handle
  * @param  state connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e26c      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8087 	beq.w	8002276 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002168:	4b92      	ldr	r3, [pc, #584]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b04      	cmp	r3, #4
 8002172:	d00c      	beq.n	800218e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002174:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d112      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5e>
 8002180:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218c:	d10b      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218e:	4b89      	ldr	r3, [pc, #548]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d06c      	beq.n	8002274 <HAL_RCC_OscConfig+0x12c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d168      	bne.n	8002274 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e246      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x76>
 80021b0:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a7f      	ldr	r2, [pc, #508]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e02e      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x98>
 80021c6:	4b7b      	ldr	r3, [pc, #492]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7a      	ldr	r2, [pc, #488]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b78      	ldr	r3, [pc, #480]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a77      	ldr	r2, [pc, #476]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e01d      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0xbc>
 80021ea:	4b72      	ldr	r3, [pc, #456]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a71      	ldr	r2, [pc, #452]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6e      	ldr	r2, [pc, #440]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 8002204:	4b6b      	ldr	r3, [pc, #428]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6a      	ldr	r2, [pc, #424]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b68      	ldr	r3, [pc, #416]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a67      	ldr	r2, [pc, #412]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe f99c 	bl	8000560 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7fe f998 	bl	8000560 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e1fa      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0xe4>
 800224a:	e014      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe f988 	bl	8000560 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002254:	f7fe f984 	bl	8000560 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1e6      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x10c>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d063      	beq.n	800234a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002282:	4b4c      	ldr	r3, [pc, #304]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800228e:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b08      	cmp	r3, #8
 8002298:	d11c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x18c>
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d116      	bne.n	80022d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x176>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e1ba      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4939      	ldr	r1, [pc, #228]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	e03a      	b.n	800234a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7fe f93d 	bl	8000560 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ea:	f7fe f939 	bl	8000560 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e19b      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4927      	ldr	r1, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7fe f91c 	bl	8000560 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232c:	f7fe f918 	bl	8000560 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e17a      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d03a      	beq.n	80023cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d019      	beq.n	8002392 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7fe f8fc 	bl	8000560 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	f7fe f8f8 	bl	8000560 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e15a      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800238a:	2001      	movs	r0, #1
 800238c:	f000 faa6 	bl	80028dc <RCC_Delay>
 8002390:	e01c      	b.n	80023cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7fe f8e2 	bl	8000560 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239e:	e00f      	b.n	80023c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a0:	f7fe f8de 	bl	8000560 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d908      	bls.n	80023c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e140      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	42420000 	.word	0x42420000
 80023bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	4b9e      	ldr	r3, [pc, #632]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e9      	bne.n	80023a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a6 	beq.w	8002526 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b97      	ldr	r3, [pc, #604]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b94      	ldr	r3, [pc, #592]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4a93      	ldr	r2, [pc, #588]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	61d3      	str	r3, [r2, #28]
 80023f6:	4b91      	ldr	r3, [pc, #580]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b8e      	ldr	r3, [pc, #568]	; (8002640 <HAL_RCC_OscConfig+0x4f8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d118      	bne.n	8002444 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b8b      	ldr	r3, [pc, #556]	; (8002640 <HAL_RCC_OscConfig+0x4f8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a8a      	ldr	r2, [pc, #552]	; (8002640 <HAL_RCC_OscConfig+0x4f8>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7fe f89f 	bl	8000560 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7fe f89b 	bl	8000560 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0fd      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b81      	ldr	r3, [pc, #516]	; (8002640 <HAL_RCC_OscConfig+0x4f8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x312>
 800244c:	4b7b      	ldr	r3, [pc, #492]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a7a      	ldr	r2, [pc, #488]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6213      	str	r3, [r2, #32]
 8002458:	e02d      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x334>
 8002462:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a75      	ldr	r2, [pc, #468]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	4b73      	ldr	r3, [pc, #460]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a72      	ldr	r2, [pc, #456]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	e01c      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b05      	cmp	r3, #5
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x356>
 8002484:	4b6d      	ldr	r3, [pc, #436]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a6c      	ldr	r2, [pc, #432]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6213      	str	r3, [r2, #32]
 8002490:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a69      	ldr	r2, [pc, #420]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	e00b      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800249e:	4b67      	ldr	r3, [pc, #412]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a66      	ldr	r2, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b64      	ldr	r3, [pc, #400]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a63      	ldr	r2, [pc, #396]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d015      	beq.n	80024ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7fe f84f 	bl	8000560 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe f84b 	bl	8000560 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0ab      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	4b57      	ldr	r3, [pc, #348]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ee      	beq.n	80024c6 <HAL_RCC_OscConfig+0x37e>
 80024e8:	e014      	b.n	8002514 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ea:	f7fe f839 	bl	8000560 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7fe f835 	bl	8000560 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e095      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	4b4c      	ldr	r3, [pc, #304]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ee      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b48      	ldr	r3, [pc, #288]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a47      	ldr	r2, [pc, #284]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8081 	beq.w	8002632 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002530:	4b42      	ldr	r3, [pc, #264]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d061      	beq.n	8002600 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d146      	bne.n	80025d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	4b3f      	ldr	r3, [pc, #252]	; (8002644 <HAL_RCC_OscConfig+0x4fc>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7fe f809 	bl	8000560 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002552:	f7fe f805 	bl	8000560 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e067      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002578:	d108      	bne.n	800258c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800257a:	4b30      	ldr	r3, [pc, #192]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	492d      	ldr	r1, [pc, #180]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258c:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a19      	ldr	r1, [r3, #32]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	430b      	orrs	r3, r1
 800259e:	4927      	ldr	r1, [pc, #156]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_RCC_OscConfig+0x4fc>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fd ffd9 	bl	8000560 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7fd ffd5 	bl	8000560 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e037      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x46a>
 80025d0:	e02f      	b.n	8002632 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <HAL_RCC_OscConfig+0x4fc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fd ffc2 	bl	8000560 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fd ffbe 	bl	8000560 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e020      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x498>
 80025fe:	e018      	b.n	8002632 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e013      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	429a      	cmp	r2, r3
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
 8002644:	42420060 	.word	0x42420060

08002648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0d0      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d910      	bls.n	800268c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b67      	ldr	r3, [pc, #412]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 0207 	bic.w	r2, r3, #7
 8002672:	4965      	ldr	r1, [pc, #404]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d040      	beq.n	8002768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d115      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e073      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e06b      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002726:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f023 0203 	bic.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4936      	ldr	r1, [pc, #216]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002738:	f7fd ff12 	bl	8000560 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	e00a      	b.n	8002756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7fd ff0e 	bl	8000560 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e053      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 020c 	and.w	r2, r3, #12
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	429a      	cmp	r2, r3
 8002766:	d1eb      	bne.n	8002740 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d210      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 0207 	bic.w	r2, r3, #7
 800277e:	4922      	ldr	r1, [pc, #136]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 f821 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490a      	ldr	r1, [pc, #40]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1cc>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1d0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fe70 	bl	80004dc <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40022000 	.word	0x40022000
 800280c:	40021000 	.word	0x40021000
 8002810:	080076c8 	.word	0x080076c8
 8002814:	20000018 	.word	0x20000018
 8002818:	2000001c 	.word	0x2000001c

0800281c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	b490      	push	{r4, r7}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002822:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002824:	1d3c      	adds	r4, r7, #4
 8002826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800282c:	f240 2301 	movw	r3, #513	; 0x201
 8002830:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b04      	cmp	r3, #4
 8002854:	d002      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x40>
 8002856:	2b08      	cmp	r3, #8
 8002858:	d003      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x46>
 800285a:	e02d      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800285e:	623b      	str	r3, [r7, #32]
      break;
 8002860:	e02d      	b.n	80028be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	0c9b      	lsrs	r3, r3, #18
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800286e:	4413      	add	r3, r2
 8002870:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002874:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	0c5b      	lsrs	r3, r3, #17
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800288e:	4413      	add	r3, r2
 8002890:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002894:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800289a:	fb02 f203 	mul.w	r2, r2, r3
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	e004      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	623b      	str	r3, [r7, #32]
      break;
 80028b6:	e002      	b.n	80028be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ba:	623b      	str	r3, [r7, #32]
      break;
 80028bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028be:	6a3b      	ldr	r3, [r7, #32]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3728      	adds	r7, #40	; 0x28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc90      	pop	{r4, r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	08007644 	.word	0x08007644
 80028d0:	40021000 	.word	0x40021000
 80028d4:	007a1200 	.word	0x007a1200
 80028d8:	003d0900 	.word	0x003d0900

080028dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCC_Delay+0x34>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <RCC_Delay+0x38>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a5b      	lsrs	r3, r3, #9
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f8:	bf00      	nop
  }
  while (Delay --);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	60fa      	str	r2, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f9      	bne.n	80028f8 <RCC_Delay+0x1c>
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000018 	.word	0x20000018
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d07d      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002934:	2300      	movs	r3, #0
 8002936:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002938:	4b4f      	ldr	r3, [pc, #316]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10d      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	4b4c      	ldr	r3, [pc, #304]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294e:	61d3      	str	r3, [r2, #28]
 8002950:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295c:	2301      	movs	r3, #1
 800295e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	4b46      	ldr	r3, [pc, #280]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d118      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296c:	4b43      	ldr	r3, [pc, #268]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a42      	ldr	r2, [pc, #264]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002976:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002978:	f7fd fdf2 	bl	8000560 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297e:	e008      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002980:	f7fd fdee 	bl	8000560 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e06d      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002992:	4b3a      	ldr	r3, [pc, #232]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800299e:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d02e      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d027      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029bc:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029cc:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029d2:	4a29      	ldr	r2, [pc, #164]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d014      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fd fdbd 	bl	8000560 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fd fdb9 	bl	8000560 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e036      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ee      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4917      	ldr	r1, [pc, #92]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	490b      	ldr	r1, [pc, #44]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	4904      	ldr	r1, [pc, #16]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	42420440 	.word	0x42420440

08002a84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a84:	b084      	sub	sp, #16
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	f107 0014 	add.w	r0, r7, #20
 8002a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	b004      	add	sp, #16
 8002aa2:	4770      	bx	lr

08002aa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ab4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002ab8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ad8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002adc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	4013      	ands	r3, r2
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	f107 0014 	add.w	r0, r7, #20
 8002b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	b004      	add	sp, #16
 8002b5a:	4770      	bx	lr

08002b5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b09b      	sub	sp, #108	; 0x6c
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	78db      	ldrb	r3, [r3, #3]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d81f      	bhi.n	8002bce <USB_ActivateEndpoint+0x72>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <USB_ActivateEndpoint+0x38>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002bc1 	.word	0x08002bc1
 8002b9c:	08002bd7 	.word	0x08002bd7
 8002ba0:	08002bb3 	.word	0x08002bb3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ba4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002bb0:	e012      	b.n	8002bd8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002bb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002bb6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002bba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002bbe:	e00b      	b.n	8002bd8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002bc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002bc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002bcc:	e004      	b.n	8002bd8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002bd4:	e000      	b.n	8002bd8 <USB_ActivateEndpoint+0x7c>
      break;
 8002bd6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	441a      	add	r2, r3
 8002be2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	441a      	add	r2, r3
 8002c28:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	7b1b      	ldrb	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f040 8149 	bne.w	8002edc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8084 	beq.w	8002d5c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	4413      	add	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	011a      	lsls	r2, r3, #4
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	88db      	ldrh	r3, [r3, #6]
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	81fb      	strh	r3, [r7, #14]
 8002c96:	89fb      	ldrh	r3, [r7, #14]
 8002c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01b      	beq.n	8002cd8 <USB_ActivateEndpoint+0x17c>
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	81bb      	strh	r3, [r7, #12]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	89bb      	ldrh	r3, [r7, #12]
 8002cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	78db      	ldrb	r3, [r3, #3]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d020      	beq.n	8002d22 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf6:	813b      	strh	r3, [r7, #8]
 8002cf8:	893b      	ldrh	r3, [r7, #8]
 8002cfa:	f083 0320 	eor.w	r3, r3, #32
 8002cfe:	813b      	strh	r3, [r7, #8]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	441a      	add	r2, r3
 8002d0a:	893b      	ldrh	r3, [r7, #8]
 8002d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	8013      	strh	r3, [r2, #0]
 8002d20:	e27f      	b.n	8003222 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d38:	817b      	strh	r3, [r7, #10]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	441a      	add	r2, r3
 8002d44:	897b      	ldrh	r3, [r7, #10]
 8002d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	8013      	strh	r3, [r2, #0]
 8002d5a:	e262      	b.n	8003222 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	4413      	add	r3, r2
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	011a      	lsls	r2, r3, #4
 8002d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	88db      	ldrh	r3, [r3, #6]
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	4413      	add	r3, r2
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	011a      	lsls	r2, r3, #4
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	4413      	add	r3, r2
 8002dae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002db2:	623b      	str	r3, [r7, #32]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d112      	bne.n	8002de2 <USB_ActivateEndpoint+0x286>
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	801a      	strh	r2, [r3, #0]
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	e02f      	b.n	8002e42 <USB_ActivateEndpoint+0x2e6>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b3e      	cmp	r3, #62	; 0x3e
 8002de8:	d813      	bhi.n	8002e12 <USB_ActivateEndpoint+0x2b6>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	663b      	str	r3, [r7, #96]	; 0x60
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <USB_ActivateEndpoint+0x2a8>
 8002dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e00:	3301      	adds	r3, #1
 8002e02:	663b      	str	r3, [r7, #96]	; 0x60
 8002e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	029b      	lsls	r3, r3, #10
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	801a      	strh	r2, [r3, #0]
 8002e10:	e017      	b.n	8002e42 <USB_ActivateEndpoint+0x2e6>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	663b      	str	r3, [r7, #96]	; 0x60
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <USB_ActivateEndpoint+0x2d0>
 8002e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	029b      	lsls	r3, r3, #10
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	83fb      	strh	r3, [r7, #30]
 8002e50:	8bfb      	ldrh	r3, [r7, #30]
 8002e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01b      	beq.n	8002e92 <USB_ActivateEndpoint+0x336>
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e70:	83bb      	strh	r3, [r7, #28]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	8bbb      	ldrh	r3, [r7, #28]
 8002e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea8:	837b      	strh	r3, [r7, #26]
 8002eaa:	8b7b      	ldrh	r3, [r7, #26]
 8002eac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002eb0:	837b      	strh	r3, [r7, #26]
 8002eb2:	8b7b      	ldrh	r3, [r7, #26]
 8002eb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002eb8:	837b      	strh	r3, [r7, #26]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	441a      	add	r2, r3
 8002ec4:	8b7b      	ldrh	r3, [r7, #26]
 8002ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	8013      	strh	r3, [r2, #0]
 8002eda:	e1a2      	b.n	8003222 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	441a      	add	r2, r3
 8002f00:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f0c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	461a      	mov	r2, r3
 8002f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f28:	4413      	add	r3, r2
 8002f2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	011a      	lsls	r2, r3, #4
 8002f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	891b      	ldrh	r3, [r3, #8]
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f4a:	801a      	strh	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5c:	4413      	add	r3, r2
 8002f5e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	011a      	lsls	r2, r3, #4
 8002f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	895b      	ldrh	r3, [r3, #10]
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f7e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	785b      	ldrb	r3, [r3, #1]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f040 8091 	bne.w	80030ac <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002f98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01b      	beq.n	8002fda <USB_ActivateEndpoint+0x47e>
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	441a      	add	r2, r3
 8002fc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	873b      	strh	r3, [r7, #56]	; 0x38
 8002fe8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01b      	beq.n	800302a <USB_ActivateEndpoint+0x4ce>
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003008:	86fb      	strh	r3, [r7, #54]	; 0x36
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	441a      	add	r2, r3
 8003014:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800301a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800301e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003022:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003026:	b29b      	uxth	r3, r3
 8003028:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003040:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003042:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003044:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003048:	86bb      	strh	r3, [r7, #52]	; 0x34
 800304a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800304c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003050:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	441a      	add	r2, r3
 800305c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800305e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800306a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306e:	b29b      	uxth	r3, r3
 8003070:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003088:	867b      	strh	r3, [r7, #50]	; 0x32
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	441a      	add	r2, r3
 8003094:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800309a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	8013      	strh	r3, [r2, #0]
 80030aa:	e0ba      	b.n	8003222 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80030bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80030c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01d      	beq.n	8003104 <USB_ActivateEndpoint+0x5a8>
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	441a      	add	r2, r3
 80030ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003100:	b29b      	uxth	r3, r3
 8003102:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003114:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01d      	beq.n	800315c <USB_ActivateEndpoint+0x600>
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	441a      	add	r2, r3
 8003144:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800314c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003154:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003158:	b29b      	uxth	r3, r3
 800315a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	78db      	ldrb	r3, [r3, #3]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d024      	beq.n	80031ae <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800317e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003182:	f083 0320 	eor.w	r3, r3, #32
 8003186:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	441a      	add	r2, r3
 8003194:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800319c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	8013      	strh	r3, [r2, #0]
 80031ac:	e01d      	b.n	80031ea <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	441a      	add	r2, r3
 80031d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80031d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003200:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	441a      	add	r2, r3
 800320c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800320e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321e:	b29b      	uxth	r3, r3
 8003220:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003222:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003226:	4618      	mov	r0, r3
 8003228:	376c      	adds	r7, #108	; 0x6c
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003230:	b480      	push	{r7}
 8003232:	b08d      	sub	sp, #52	; 0x34
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	7b1b      	ldrb	r3, [r3, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 808e 	bne.w	8003360 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d044      	beq.n	80032d6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	81bb      	strh	r3, [r7, #12]
 800325a:	89bb      	ldrh	r3, [r7, #12]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <USB_DeactivateEndpoint+0x6c>
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	817b      	strh	r3, [r7, #10]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	441a      	add	r2, r3
 8003286:	897b      	ldrh	r3, [r7, #10]
 8003288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800328c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003294:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003298:	b29b      	uxth	r3, r3
 800329a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b2:	813b      	strh	r3, [r7, #8]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	893b      	ldrh	r3, [r7, #8]
 80032c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	8013      	strh	r3, [r2, #0]
 80032d4:	e192      	b.n	80035fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	827b      	strh	r3, [r7, #18]
 80032e4:	8a7b      	ldrh	r3, [r7, #18]
 80032e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01b      	beq.n	8003326 <USB_DeactivateEndpoint+0xf6>
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003304:	823b      	strh	r3, [r7, #16]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	441a      	add	r2, r3
 8003310:	8a3b      	ldrh	r3, [r7, #16]
 8003312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800331e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003322:	b29b      	uxth	r3, r3
 8003324:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333c:	81fb      	strh	r3, [r7, #14]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	441a      	add	r2, r3
 8003348:	89fb      	ldrh	r3, [r7, #14]
 800334a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800334e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335a:	b29b      	uxth	r3, r3
 800335c:	8013      	strh	r3, [r2, #0]
 800335e:	e14d      	b.n	80035fc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	785b      	ldrb	r3, [r3, #1]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f040 80a5 	bne.w	80034b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	843b      	strh	r3, [r7, #32]
 8003378:	8c3b      	ldrh	r3, [r7, #32]
 800337a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01b      	beq.n	80033ba <USB_DeactivateEndpoint+0x18a>
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003398:	83fb      	strh	r3, [r7, #30]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	8bfb      	ldrh	r3, [r7, #30]
 80033a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	83bb      	strh	r3, [r7, #28]
 80033c8:	8bbb      	ldrh	r3, [r7, #28]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01b      	beq.n	800340a <USB_DeactivateEndpoint+0x1da>
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e8:	837b      	strh	r3, [r7, #26]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	441a      	add	r2, r3
 80033f4:	8b7b      	ldrh	r3, [r7, #26]
 80033f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003402:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003406:	b29b      	uxth	r3, r3
 8003408:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003420:	833b      	strh	r3, [r7, #24]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	441a      	add	r2, r3
 800342c:	8b3b      	ldrh	r3, [r7, #24]
 800342e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800343a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800343e:	b29b      	uxth	r3, r3
 8003440:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003458:	82fb      	strh	r3, [r7, #22]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	441a      	add	r2, r3
 8003464:	8afb      	ldrh	r3, [r7, #22]
 8003466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003476:	b29b      	uxth	r3, r3
 8003478:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003490:	82bb      	strh	r3, [r7, #20]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	441a      	add	r2, r3
 800349c:	8abb      	ldrh	r3, [r7, #20]
 800349e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	8013      	strh	r3, [r2, #0]
 80034b2:	e0a3      	b.n	80035fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80034c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01b      	beq.n	8003504 <USB_DeactivateEndpoint+0x2d4>
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	441a      	add	r2, r3
 80034ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003500:	b29b      	uxth	r3, r3
 8003502:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003512:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01b      	beq.n	8003554 <USB_DeactivateEndpoint+0x324>
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	853b      	strh	r3, [r7, #40]	; 0x28
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003550:	b29b      	uxth	r3, r3
 8003552:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	441a      	add	r2, r3
 8003576:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800357c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003588:	b29b      	uxth	r3, r3
 800358a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	b29b      	uxth	r3, r3
 800359a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	441a      	add	r2, r3
 80035ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035da:	847b      	strh	r3, [r7, #34]	; 0x22
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	441a      	add	r2, r3
 80035e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3734      	adds	r7, #52	; 0x34
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b0cc      	sub	sp, #304	; 0x130
 800360c:	af00      	add	r7, sp, #0
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	6018      	str	r0, [r3, #0]
 8003612:	463b      	mov	r3, r7
 8003614:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003616:	463b      	mov	r3, r7
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	785b      	ldrb	r3, [r3, #1]
 800361c:	2b01      	cmp	r3, #1
 800361e:	f040 872e 	bne.w	800447e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003622:	463b      	mov	r3, r7
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699a      	ldr	r2, [r3, #24]
 8003628:	463b      	mov	r3, r7
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	429a      	cmp	r2, r3
 8003630:	d905      	bls.n	800363e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003632:	463b      	mov	r3, r7
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800363c:	e004      	b.n	8003648 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800363e:	463b      	mov	r3, r7
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003648:	463b      	mov	r3, r7
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	7b1b      	ldrb	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d134      	bne.n	80036bc <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003652:	463b      	mov	r3, r7
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6959      	ldr	r1, [r3, #20]
 8003658:	463b      	mov	r3, r7
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	88da      	ldrh	r2, [r3, #6]
 800365e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003662:	b29b      	uxth	r3, r3
 8003664:	1d38      	adds	r0, r7, #4
 8003666:	6800      	ldr	r0, [r0, #0]
 8003668:	f001 fc03 	bl	8004e72 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800366c:	f107 0310 	add.w	r3, r7, #16
 8003670:	1d3a      	adds	r2, r7, #4
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800367e:	b29b      	uxth	r3, r3
 8003680:	4619      	mov	r1, r3
 8003682:	f107 0310 	add.w	r3, r7, #16
 8003686:	f107 0210 	add.w	r2, r7, #16
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	440a      	add	r2, r1
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	463b      	mov	r3, r7
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	011a      	lsls	r2, r3, #4
 8003698:	f107 0310 	add.w	r3, r7, #16
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80036a4:	f107 030c 	add.w	r3, r7, #12
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	f000 beac 	b.w	8004414 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80036bc:	463b      	mov	r3, r7
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	78db      	ldrb	r3, [r3, #3]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	f040 838c 	bne.w	8003de0 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80036c8:	463b      	mov	r3, r7
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6a1a      	ldr	r2, [r3, #32]
 80036ce:	463b      	mov	r3, r7
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	f240 8330 	bls.w	8003d3a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	463b      	mov	r3, r7
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80036f8:	1d3b      	adds	r3, r7, #4
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	463b      	mov	r3, r7
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800370a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800370e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003712:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371a:	b29b      	uxth	r3, r3
 800371c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800371e:	463b      	mov	r3, r7
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003728:	1ad2      	subs	r2, r2, r3
 800372a:	463b      	mov	r3, r7
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	463b      	mov	r3, r7
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 819e 	beq.w	8003a88 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800374c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003750:	1d3a      	adds	r2, r7, #4
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	463b      	mov	r3, r7
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d17a      	bne.n	8003856 <USB_EPStartXfer+0x24e>
 8003760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003764:	1d3a      	adds	r2, r7, #4
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	1d3b      	adds	r3, r7, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003772:	b29b      	uxth	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800377a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	440a      	add	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	463b      	mov	r3, r7
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	011a      	lsls	r2, r3, #4
 800378c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4413      	add	r3, r2
 8003794:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11a      	bne.n	80037dc <USB_EPStartXfer+0x1d4>
 80037a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	801a      	strh	r2, [r3, #0]
 80037be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	e062      	b.n	80038a2 <USB_EPStartXfer+0x29a>
 80037dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037e0:	2b3e      	cmp	r3, #62	; 0x3e
 80037e2:	d819      	bhi.n	8003818 <USB_EPStartXfer+0x210>
 80037e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80037ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <USB_EPStartXfer+0x1fc>
 80037fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037fe:	3301      	adds	r3, #1
 8003800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003804:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003808:	b29b      	uxth	r3, r3
 800380a:	029b      	lsls	r3, r3, #10
 800380c:	b29a      	uxth	r2, r3
 800380e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	801a      	strh	r2, [r3, #0]
 8003816:	e044      	b.n	80038a2 <USB_EPStartXfer+0x29a>
 8003818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	2b00      	cmp	r3, #0
 800382c:	d104      	bne.n	8003838 <USB_EPStartXfer+0x230>
 800382e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003832:	3b01      	subs	r3, #1
 8003834:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800383c:	b29b      	uxth	r3, r3
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	b29b      	uxth	r3, r3
 8003842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800384a:	b29a      	uxth	r2, r3
 800384c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	801a      	strh	r2, [r3, #0]
 8003854:	e025      	b.n	80038a2 <USB_EPStartXfer+0x29a>
 8003856:	463b      	mov	r3, r7
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	785b      	ldrb	r3, [r3, #1]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d120      	bne.n	80038a2 <USB_EPStartXfer+0x29a>
 8003860:	1d3b      	adds	r3, r7, #4
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003868:	b29b      	uxth	r3, r3
 800386a:	4619      	mov	r1, r3
 800386c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003870:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	440a      	add	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	463b      	mov	r3, r7
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	011a      	lsls	r2, r3, #4
 8003882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4413      	add	r3, r2
 800388a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800388e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003898:	b29a      	uxth	r2, r3
 800389a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80038a2:	463b      	mov	r3, r7
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	895b      	ldrh	r3, [r3, #10]
 80038a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038ac:	463b      	mov	r3, r7
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6959      	ldr	r1, [r3, #20]
 80038b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80038bc:	1d38      	adds	r0, r7, #4
 80038be:	6800      	ldr	r0, [r0, #0]
 80038c0:	f001 fad7 	bl	8004e72 <USB_WritePMA>
            ep->xfer_buff += len;
 80038c4:	463b      	mov	r3, r7
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038ce:	441a      	add	r2, r3
 80038d0:	463b      	mov	r3, r7
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80038d6:	463b      	mov	r3, r7
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	463b      	mov	r3, r7
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d909      	bls.n	80038fa <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80038e6:	463b      	mov	r3, r7
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038f0:	1ad2      	subs	r2, r2, r3
 80038f2:	463b      	mov	r3, r7
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	621a      	str	r2, [r3, #32]
 80038f8:	e008      	b.n	800390c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80038fa:	463b      	mov	r3, r7
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003904:	463b      	mov	r3, r7
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2200      	movs	r2, #0
 800390a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800390c:	463b      	mov	r3, r7
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	785b      	ldrb	r3, [r3, #1]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d17a      	bne.n	8003a0c <USB_EPStartXfer+0x404>
 8003916:	f107 0318 	add.w	r3, r7, #24
 800391a:	1d3a      	adds	r2, r7, #4
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	1d3b      	adds	r3, r7, #4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003928:	b29b      	uxth	r3, r3
 800392a:	4619      	mov	r1, r3
 800392c:	f107 0318 	add.w	r3, r7, #24
 8003930:	f107 0218 	add.w	r2, r7, #24
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	440a      	add	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	463b      	mov	r3, r7
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	011a      	lsls	r2, r3, #4
 8003942:	f107 0318 	add.w	r3, r7, #24
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4413      	add	r3, r2
 800394a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800394e:	f107 0314 	add.w	r3, r7, #20
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11a      	bne.n	8003992 <USB_EPStartXfer+0x38a>
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	b29b      	uxth	r3, r3
 8003966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800396a:	b29a      	uxth	r2, r3
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	801a      	strh	r2, [r3, #0]
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003986:	b29a      	uxth	r2, r3
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	801a      	strh	r2, [r3, #0]
 8003990:	e067      	b.n	8003a62 <USB_EPStartXfer+0x45a>
 8003992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003996:	2b3e      	cmp	r3, #62	; 0x3e
 8003998:	d819      	bhi.n	80039ce <USB_EPStartXfer+0x3c6>
 800399a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d004      	beq.n	80039ba <USB_EPStartXfer+0x3b2>
 80039b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80039b4:	3301      	adds	r3, #1
 80039b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80039be:	b29b      	uxth	r3, r3
 80039c0:	029b      	lsls	r3, r3, #10
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	e049      	b.n	8003a62 <USB_EPStartXfer+0x45a>
 80039ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <USB_EPStartXfer+0x3e6>
 80039e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80039e8:	3b01      	subs	r3, #1
 80039ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	029b      	lsls	r3, r3, #10
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	801a      	strh	r2, [r3, #0]
 8003a0a:	e02a      	b.n	8003a62 <USB_EPStartXfer+0x45a>
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	785b      	ldrb	r3, [r3, #1]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d125      	bne.n	8003a62 <USB_EPStartXfer+0x45a>
 8003a16:	f107 0320 	add.w	r3, r7, #32
 8003a1a:	1d3a      	adds	r2, r7, #4
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	1d3b      	adds	r3, r7, #4
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f107 0320 	add.w	r3, r7, #32
 8003a30:	f107 0220 	add.w	r2, r7, #32
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	440a      	add	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	463b      	mov	r3, r7
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	011a      	lsls	r2, r3, #4
 8003a42:	f107 0320 	add.w	r3, r7, #32
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003a4e:	f107 031c 	add.w	r3, r7, #28
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	f107 031c 	add.w	r3, r7, #28
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003a62:	463b      	mov	r3, r7
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	891b      	ldrh	r3, [r3, #8]
 8003a68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6959      	ldr	r1, [r3, #20]
 8003a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003a7c:	1d38      	adds	r0, r7, #4
 8003a7e:	6800      	ldr	r0, [r0, #0]
 8003a80:	f001 f9f7 	bl	8004e72 <USB_WritePMA>
 8003a84:	f000 bcc6 	b.w	8004414 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a88:	463b      	mov	r3, r7
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d164      	bne.n	8003b5c <USB_EPStartXfer+0x554>
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a98:	1d3b      	adds	r3, r7, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa6:	4413      	add	r3, r2
 8003aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aaa:	463b      	mov	r3, r7
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	011a      	lsls	r2, r3, #4
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003aba:	647b      	str	r3, [r7, #68]	; 0x44
 8003abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d112      	bne.n	8003aea <USB_EPStartXfer+0x4e2>
 8003ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad2:	801a      	strh	r2, [r3, #0]
 8003ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae6:	801a      	strh	r2, [r3, #0]
 8003ae8:	e057      	b.n	8003b9a <USB_EPStartXfer+0x592>
 8003aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003aee:	2b3e      	cmp	r3, #62	; 0x3e
 8003af0:	d817      	bhi.n	8003b22 <USB_EPStartXfer+0x51a>
 8003af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <USB_EPStartXfer+0x50a>
 8003b08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	029b      	lsls	r3, r3, #10
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	e03b      	b.n	8003b9a <USB_EPStartXfer+0x592>
 8003b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <USB_EPStartXfer+0x53a>
 8003b38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	029b      	lsls	r3, r3, #10
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	e01e      	b.n	8003b9a <USB_EPStartXfer+0x592>
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	785b      	ldrb	r3, [r3, #1]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d119      	bne.n	8003b9a <USB_EPStartXfer+0x592>
 8003b66:	1d3b      	adds	r3, r7, #4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b6c:	1d3b      	adds	r3, r7, #4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7a:	4413      	add	r3, r2
 8003b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b7e:	463b      	mov	r3, r7
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	011a      	lsls	r2, r3, #4
 8003b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b88:	4413      	add	r3, r2
 8003b8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	891b      	ldrh	r3, [r3, #8]
 8003ba0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6959      	ldr	r1, [r3, #20]
 8003baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003bb4:	1d38      	adds	r0, r7, #4
 8003bb6:	6800      	ldr	r0, [r0, #0]
 8003bb8:	f001 f95b 	bl	8004e72 <USB_WritePMA>
            ep->xfer_buff += len;
 8003bbc:	463b      	mov	r3, r7
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bc6:	441a      	add	r2, r3
 8003bc8:	463b      	mov	r3, r7
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003bce:	463b      	mov	r3, r7
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	463b      	mov	r3, r7
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d909      	bls.n	8003bf2 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8003bde:	463b      	mov	r3, r7
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003be8:	1ad2      	subs	r2, r2, r3
 8003bea:	463b      	mov	r3, r7
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	621a      	str	r2, [r3, #32]
 8003bf0:	e008      	b.n	8003c04 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003bfc:	463b      	mov	r3, r7
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2200      	movs	r2, #0
 8003c02:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	643b      	str	r3, [r7, #64]	; 0x40
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d164      	bne.n	8003cde <USB_EPStartXfer+0x6d6>
 8003c14:	1d3b      	adds	r3, r7, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c1a:	1d3b      	adds	r3, r7, #4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c28:	4413      	add	r3, r2
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c2c:	463b      	mov	r3, r7
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	011a      	lsls	r2, r3, #4
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	4413      	add	r3, r2
 8003c38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d112      	bne.n	8003c6c <USB_EPStartXfer+0x664>
 8003c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c54:	801a      	strh	r2, [r3, #0]
 8003c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	e054      	b.n	8003d16 <USB_EPStartXfer+0x70e>
 8003c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c70:	2b3e      	cmp	r3, #62	; 0x3e
 8003c72:	d817      	bhi.n	8003ca4 <USB_EPStartXfer+0x69c>
 8003c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <USB_EPStartXfer+0x68c>
 8003c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	029b      	lsls	r3, r3, #10
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	e038      	b.n	8003d16 <USB_EPStartXfer+0x70e>
 8003ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <USB_EPStartXfer+0x6bc>
 8003cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	029b      	lsls	r3, r3, #10
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	801a      	strh	r2, [r3, #0]
 8003cdc:	e01b      	b.n	8003d16 <USB_EPStartXfer+0x70e>
 8003cde:	463b      	mov	r3, r7
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d116      	bne.n	8003d16 <USB_EPStartXfer+0x70e>
 8003ce8:	1d3b      	adds	r3, r7, #4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf6:	4413      	add	r3, r2
 8003cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	011a      	lsls	r2, r3, #4
 8003d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d04:	4413      	add	r3, r2
 8003d06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003d16:	463b      	mov	r3, r7
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	895b      	ldrh	r3, [r3, #10]
 8003d1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d20:	463b      	mov	r3, r7
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6959      	ldr	r1, [r3, #20]
 8003d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003d30:	1d38      	adds	r0, r7, #4
 8003d32:	6800      	ldr	r0, [r0, #0]
 8003d34:	f001 f89d 	bl	8004e72 <USB_WritePMA>
 8003d38:	e36c      	b.n	8004414 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003d44:	1d3b      	adds	r3, r7, #4
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	463b      	mov	r3, r7
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003d62:	1d3b      	adds	r3, r7, #4
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	463b      	mov	r3, r7
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	441a      	add	r2, r3
 8003d70:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d88:	1d3b      	adds	r3, r7, #4
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d8e:	1d3b      	adds	r3, r7, #4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d9c:	4413      	add	r3, r2
 8003d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003da0:	463b      	mov	r3, r7
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	011a      	lsls	r2, r3, #4
 8003da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003daa:	4413      	add	r3, r2
 8003dac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003db0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003dbc:	463b      	mov	r3, r7
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	891b      	ldrh	r3, [r3, #8]
 8003dc2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dc6:	463b      	mov	r3, r7
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6959      	ldr	r1, [r3, #20]
 8003dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003dd6:	1d38      	adds	r0, r7, #4
 8003dd8:	6800      	ldr	r0, [r0, #0]
 8003dda:	f001 f84a 	bl	8004e72 <USB_WritePMA>
 8003dde:	e319      	b.n	8004414 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8003de0:	1d3b      	adds	r3, r7, #4
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	463b      	mov	r3, r7
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	463b      	mov	r3, r7
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	441a      	add	r2, r3
 8003e0c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e18:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003e24:	463b      	mov	r3, r7
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a1a      	ldr	r2, [r3, #32]
 8003e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e2e:	1ad2      	subs	r2, r2, r3
 8003e30:	463b      	mov	r3, r7
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e36:	1d3b      	adds	r3, r7, #4
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	463b      	mov	r3, r7
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8162 	beq.w	8004116 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e52:	1d3b      	adds	r3, r7, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e5a:	463b      	mov	r3, r7
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	785b      	ldrb	r3, [r3, #1]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d164      	bne.n	8003f2e <USB_EPStartXfer+0x926>
 8003e64:	1d3b      	adds	r3, r7, #4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e78:	4413      	add	r3, r2
 8003e7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	011a      	lsls	r2, r3, #4
 8003e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e86:	4413      	add	r3, r2
 8003e88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e8c:	677b      	str	r3, [r7, #116]	; 0x74
 8003e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d112      	bne.n	8003ebc <USB_EPStartXfer+0x8b4>
 8003e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea4:	801a      	strh	r2, [r3, #0]
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	e057      	b.n	8003f6c <USB_EPStartXfer+0x964>
 8003ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ec0:	2b3e      	cmp	r3, #62	; 0x3e
 8003ec2:	d817      	bhi.n	8003ef4 <USB_EPStartXfer+0x8ec>
 8003ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <USB_EPStartXfer+0x8dc>
 8003eda:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003ede:	3301      	adds	r3, #1
 8003ee0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003ee4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	029b      	lsls	r3, r3, #10
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	e03b      	b.n	8003f6c <USB_EPStartXfer+0x964>
 8003ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f02:	f003 031f 	and.w	r3, r3, #31
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d104      	bne.n	8003f14 <USB_EPStartXfer+0x90c>
 8003f0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003f14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	029b      	lsls	r3, r3, #10
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f2a:	801a      	strh	r2, [r3, #0]
 8003f2c:	e01e      	b.n	8003f6c <USB_EPStartXfer+0x964>
 8003f2e:	463b      	mov	r3, r7
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	785b      	ldrb	r3, [r3, #1]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d119      	bne.n	8003f6c <USB_EPStartXfer+0x964>
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f48:	4413      	add	r3, r2
 8003f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f4e:	463b      	mov	r3, r7
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	011a      	lsls	r2, r3, #4
 8003f56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003f6c:	463b      	mov	r3, r7
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	895b      	ldrh	r3, [r3, #10]
 8003f72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f76:	463b      	mov	r3, r7
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6959      	ldr	r1, [r3, #20]
 8003f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003f86:	1d38      	adds	r0, r7, #4
 8003f88:	6800      	ldr	r0, [r0, #0]
 8003f8a:	f000 ff72 	bl	8004e72 <USB_WritePMA>
          ep->xfer_buff += len;
 8003f8e:	463b      	mov	r3, r7
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f98:	441a      	add	r2, r3
 8003f9a:	463b      	mov	r3, r7
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8003fa0:	463b      	mov	r3, r7
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6a1a      	ldr	r2, [r3, #32]
 8003fa6:	463b      	mov	r3, r7
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d909      	bls.n	8003fc4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6a1a      	ldr	r2, [r3, #32]
 8003fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fba:	1ad2      	subs	r2, r2, r3
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	621a      	str	r2, [r3, #32]
 8003fc2:	e008      	b.n	8003fd6 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8003fc4:	463b      	mov	r3, r7
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8003fce:	463b      	mov	r3, r7
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8003fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 821a 	beq.w	8004414 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	785b      	ldrb	r3, [r3, #1]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d164      	bne.n	80040b4 <USB_EPStartXfer+0xaac>
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ffe:	4413      	add	r3, r2
 8004000:	66bb      	str	r3, [r7, #104]	; 0x68
 8004002:	463b      	mov	r3, r7
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	011a      	lsls	r2, r3, #4
 800400a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800400c:	4413      	add	r3, r2
 800400e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004012:	667b      	str	r3, [r7, #100]	; 0x64
 8004014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d112      	bne.n	8004042 <USB_EPStartXfer+0xa3a>
 800401c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004026:	b29a      	uxth	r2, r3
 8004028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800402a:	801a      	strh	r2, [r3, #0]
 800402c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800403a:	b29a      	uxth	r2, r3
 800403c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800403e:	801a      	strh	r2, [r3, #0]
 8004040:	e057      	b.n	80040f2 <USB_EPStartXfer+0xaea>
 8004042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004046:	2b3e      	cmp	r3, #62	; 0x3e
 8004048:	d817      	bhi.n	800407a <USB_EPStartXfer+0xa72>
 800404a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <USB_EPStartXfer+0xa62>
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004064:	3301      	adds	r3, #1
 8004066:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406e:	b29b      	uxth	r3, r3
 8004070:	029b      	lsls	r3, r3, #10
 8004072:	b29a      	uxth	r2, r3
 8004074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004076:	801a      	strh	r2, [r3, #0]
 8004078:	e03b      	b.n	80040f2 <USB_EPStartXfer+0xaea>
 800407a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <USB_EPStartXfer+0xa92>
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004094:	3b01      	subs	r3, #1
 8004096:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409e:	b29b      	uxth	r3, r3
 80040a0:	029b      	lsls	r3, r3, #10
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040b0:	801a      	strh	r2, [r3, #0]
 80040b2:	e01e      	b.n	80040f2 <USB_EPStartXfer+0xaea>
 80040b4:	463b      	mov	r3, r7
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	785b      	ldrb	r3, [r3, #1]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d119      	bne.n	80040f2 <USB_EPStartXfer+0xaea>
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	673b      	str	r3, [r7, #112]	; 0x70
 80040c4:	1d3b      	adds	r3, r7, #4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040d2:	4413      	add	r3, r2
 80040d4:	673b      	str	r3, [r7, #112]	; 0x70
 80040d6:	463b      	mov	r3, r7
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	011a      	lsls	r2, r3, #4
 80040de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e0:	4413      	add	r3, r2
 80040e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80040f2:	463b      	mov	r3, r7
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	891b      	ldrh	r3, [r3, #8]
 80040f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040fc:	463b      	mov	r3, r7
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6959      	ldr	r1, [r3, #20]
 8004102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004106:	b29b      	uxth	r3, r3
 8004108:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800410c:	1d38      	adds	r0, r7, #4
 800410e:	6800      	ldr	r0, [r0, #0]
 8004110:	f000 feaf 	bl	8004e72 <USB_WritePMA>
 8004114:	e17e      	b.n	8004414 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004116:	463b      	mov	r3, r7
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	785b      	ldrb	r3, [r3, #1]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d16f      	bne.n	8004200 <USB_EPStartXfer+0xbf8>
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004128:	1d3b      	adds	r3, r7, #4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004130:	b29b      	uxth	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004138:	4413      	add	r3, r2
 800413a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800413e:	463b      	mov	r3, r7
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	011a      	lsls	r2, r3, #4
 8004146:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800414a:	4413      	add	r3, r2
 800414c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d116      	bne.n	800418a <USB_EPStartXfer+0xb82>
 800415c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004168:	b29a      	uxth	r2, r3
 800416a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800416e:	801a      	strh	r2, [r3, #0]
 8004170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004180:	b29a      	uxth	r2, r3
 8004182:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	e05f      	b.n	800424a <USB_EPStartXfer+0xc42>
 800418a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800418e:	2b3e      	cmp	r3, #62	; 0x3e
 8004190:	d818      	bhi.n	80041c4 <USB_EPStartXfer+0xbbc>
 8004192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800419c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d004      	beq.n	80041b2 <USB_EPStartXfer+0xbaa>
 80041a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80041ac:	3301      	adds	r3, #1
 80041ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80041b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	029b      	lsls	r3, r3, #10
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041c0:	801a      	strh	r2, [r3, #0]
 80041c2:	e042      	b.n	800424a <USB_EPStartXfer+0xc42>
 80041c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80041ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d104      	bne.n	80041e4 <USB_EPStartXfer+0xbdc>
 80041da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80041de:	3b01      	subs	r3, #1
 80041e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80041e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	029b      	lsls	r3, r3, #10
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	e024      	b.n	800424a <USB_EPStartXfer+0xc42>
 8004200:	463b      	mov	r3, r7
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d11f      	bne.n	800424a <USB_EPStartXfer+0xc42>
 800420a:	1d3b      	adds	r3, r7, #4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004212:	1d3b      	adds	r3, r7, #4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800421a:	b29b      	uxth	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004222:	4413      	add	r3, r2
 8004224:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004228:	463b      	mov	r3, r7
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	011a      	lsls	r2, r3, #4
 8004230:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004234:	4413      	add	r3, r2
 8004236:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800423a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800423e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004242:	b29a      	uxth	r2, r3
 8004244:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004248:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800424a:	463b      	mov	r3, r7
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	891b      	ldrh	r3, [r3, #8]
 8004250:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004254:	463b      	mov	r3, r7
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6959      	ldr	r1, [r3, #20]
 800425a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800425e:	b29b      	uxth	r3, r3
 8004260:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004264:	1d38      	adds	r0, r7, #4
 8004266:	6800      	ldr	r0, [r0, #0]
 8004268:	f000 fe03 	bl	8004e72 <USB_WritePMA>
          ep->xfer_buff += len;
 800426c:	463b      	mov	r3, r7
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004276:	441a      	add	r2, r3
 8004278:	463b      	mov	r3, r7
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800427e:	463b      	mov	r3, r7
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a1a      	ldr	r2, [r3, #32]
 8004284:	463b      	mov	r3, r7
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	429a      	cmp	r2, r3
 800428c:	d909      	bls.n	80042a2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800428e:	463b      	mov	r3, r7
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004298:	1ad2      	subs	r2, r2, r3
 800429a:	463b      	mov	r3, r7
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	621a      	str	r2, [r3, #32]
 80042a0:	e008      	b.n	80042b4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80042a2:	463b      	mov	r3, r7
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80042ac:	463b      	mov	r3, r7
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2200      	movs	r2, #0
 80042b2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80042b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80ab 	beq.w	8004414 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042c6:	463b      	mov	r3, r7
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	785b      	ldrb	r3, [r3, #1]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d16f      	bne.n	80043b0 <USB_EPStartXfer+0xda8>
 80042d0:	1d3b      	adds	r3, r7, #4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042d8:	1d3b      	adds	r3, r7, #4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042e8:	4413      	add	r3, r2
 80042ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042ee:	463b      	mov	r3, r7
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	011a      	lsls	r2, r3, #4
 80042f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042fa:	4413      	add	r3, r2
 80042fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d116      	bne.n	800433a <USB_EPStartXfer+0xd32>
 800430c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004318:	b29a      	uxth	r2, r3
 800431a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800432c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004330:	b29a      	uxth	r2, r3
 8004332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004336:	801a      	strh	r2, [r3, #0]
 8004338:	e05b      	b.n	80043f2 <USB_EPStartXfer+0xdea>
 800433a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800433e:	2b3e      	cmp	r3, #62	; 0x3e
 8004340:	d818      	bhi.n	8004374 <USB_EPStartXfer+0xd6c>
 8004342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800434c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <USB_EPStartXfer+0xd5a>
 8004358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435c:	3301      	adds	r3, #1
 800435e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004366:	b29b      	uxth	r3, r3
 8004368:	029b      	lsls	r3, r3, #10
 800436a:	b29a      	uxth	r2, r3
 800436c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004370:	801a      	strh	r2, [r3, #0]
 8004372:	e03e      	b.n	80043f2 <USB_EPStartXfer+0xdea>
 8004374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800437e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <USB_EPStartXfer+0xd8c>
 800438a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800438e:	3b01      	subs	r3, #1
 8004390:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004398:	b29b      	uxth	r3, r3
 800439a:	029b      	lsls	r3, r3, #10
 800439c:	b29b      	uxth	r3, r3
 800439e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	e020      	b.n	80043f2 <USB_EPStartXfer+0xdea>
 80043b0:	463b      	mov	r3, r7
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	785b      	ldrb	r3, [r3, #1]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d11b      	bne.n	80043f2 <USB_EPStartXfer+0xdea>
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043ca:	4413      	add	r3, r2
 80043cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043d0:	463b      	mov	r3, r7
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	011a      	lsls	r2, r3, #4
 80043d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043dc:	4413      	add	r3, r2
 80043de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80043e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80043f2:	463b      	mov	r3, r7
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	895b      	ldrh	r3, [r3, #10]
 80043f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043fc:	463b      	mov	r3, r7
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6959      	ldr	r1, [r3, #20]
 8004402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004406:	b29b      	uxth	r3, r3
 8004408:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800440c:	1d38      	adds	r0, r7, #4
 800440e:	6800      	ldr	r0, [r0, #0]
 8004410:	f000 fd2f 	bl	8004e72 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	463b      	mov	r3, r7
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	f107 020a 	add.w	r2, r7, #10
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004432:	8013      	strh	r3, [r2, #0]
 8004434:	f107 030a 	add.w	r3, r7, #10
 8004438:	f107 020a 	add.w	r2, r7, #10
 800443c:	8812      	ldrh	r2, [r2, #0]
 800443e:	f082 0210 	eor.w	r2, r2, #16
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	f107 030a 	add.w	r3, r7, #10
 8004448:	f107 020a 	add.w	r2, r7, #10
 800444c:	8812      	ldrh	r2, [r2, #0]
 800444e:	f082 0220 	eor.w	r2, r2, #32
 8004452:	801a      	strh	r2, [r3, #0]
 8004454:	1d3b      	adds	r3, r7, #4
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	463b      	mov	r3, r7
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	441a      	add	r2, r3
 8004462:	f107 030a 	add.w	r3, r7, #10
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800446c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004478:	b29b      	uxth	r3, r3
 800447a:	8013      	strh	r3, [r2, #0]
 800447c:	e3b5      	b.n	8004bea <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800447e:	463b      	mov	r3, r7
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	7b1b      	ldrb	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 8090 	bne.w	80045aa <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800448a:	463b      	mov	r3, r7
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699a      	ldr	r2, [r3, #24]
 8004490:	463b      	mov	r3, r7
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	429a      	cmp	r2, r3
 8004498:	d90e      	bls.n	80044b8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800449a:	463b      	mov	r3, r7
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80044a4:	463b      	mov	r3, r7
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ae:	1ad2      	subs	r2, r2, r3
 80044b0:	463b      	mov	r3, r7
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	619a      	str	r2, [r3, #24]
 80044b6:	e008      	b.n	80044ca <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80044b8:	463b      	mov	r3, r7
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80044c2:	463b      	mov	r3, r7
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80044ca:	1d3b      	adds	r3, r7, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044da:	b29b      	uxth	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044e2:	4413      	add	r3, r2
 80044e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044e8:	463b      	mov	r3, r7
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	011a      	lsls	r2, r3, #4
 80044f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044f4:	4413      	add	r3, r2
 80044f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <USB_EPStartXfer+0xf2c>
 8004506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004512:	b29a      	uxth	r2, r3
 8004514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29b      	uxth	r3, r3
 8004522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800452a:	b29a      	uxth	r2, r3
 800452c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	e32c      	b.n	8004b8e <USB_EPStartXfer+0x1586>
 8004534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004538:	2b3e      	cmp	r3, #62	; 0x3e
 800453a:	d818      	bhi.n	800456e <USB_EPStartXfer+0xf66>
 800453c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004540:	085b      	lsrs	r3, r3, #1
 8004542:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <USB_EPStartXfer+0xf54>
 8004552:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004556:	3301      	adds	r3, #1
 8004558:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800455c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004560:	b29b      	uxth	r3, r3
 8004562:	029b      	lsls	r3, r3, #10
 8004564:	b29a      	uxth	r2, r3
 8004566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800456a:	801a      	strh	r2, [r3, #0]
 800456c:	e30f      	b.n	8004b8e <USB_EPStartXfer+0x1586>
 800456e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <USB_EPStartXfer+0xf86>
 8004584:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004588:	3b01      	subs	r3, #1
 800458a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800458e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004592:	b29b      	uxth	r3, r3
 8004594:	029b      	lsls	r3, r3, #10
 8004596:	b29b      	uxth	r3, r3
 8004598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045a6:	801a      	strh	r2, [r3, #0]
 80045a8:	e2f1      	b.n	8004b8e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80045aa:	463b      	mov	r3, r7
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	78db      	ldrb	r3, [r3, #3]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	f040 818f 	bne.w	80048d4 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80045b6:	463b      	mov	r3, r7
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d175      	bne.n	80046ac <USB_EPStartXfer+0x10a4>
 80045c0:	1d3b      	adds	r3, r7, #4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045c8:	1d3b      	adds	r3, r7, #4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045d8:	4413      	add	r3, r2
 80045da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045de:	463b      	mov	r3, r7
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	011a      	lsls	r2, r3, #4
 80045e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045ea:	4413      	add	r3, r2
 80045ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045f4:	463b      	mov	r3, r7
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d116      	bne.n	800462c <USB_EPStartXfer+0x1024>
 80045fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29b      	uxth	r3, r3
 8004606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800460a:	b29a      	uxth	r2, r3
 800460c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004610:	801a      	strh	r2, [r3, #0]
 8004612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004622:	b29a      	uxth	r2, r3
 8004624:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	e065      	b.n	80046f8 <USB_EPStartXfer+0x10f0>
 800462c:	463b      	mov	r3, r7
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b3e      	cmp	r3, #62	; 0x3e
 8004634:	d81a      	bhi.n	800466c <USB_EPStartXfer+0x1064>
 8004636:	463b      	mov	r3, r7
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004642:	463b      	mov	r3, r7
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <USB_EPStartXfer+0x1052>
 8004650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004654:	3301      	adds	r3, #1
 8004656:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800465a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465e:	b29b      	uxth	r3, r3
 8004660:	029b      	lsls	r3, r3, #10
 8004662:	b29a      	uxth	r2, r3
 8004664:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	e045      	b.n	80046f8 <USB_EPStartXfer+0x10f0>
 800466c:	463b      	mov	r3, r7
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004678:	463b      	mov	r3, r7
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2b00      	cmp	r3, #0
 8004684:	d104      	bne.n	8004690 <USB_EPStartXfer+0x1088>
 8004686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800468a:	3b01      	subs	r3, #1
 800468c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004694:	b29b      	uxth	r3, r3
 8004696:	029b      	lsls	r3, r3, #10
 8004698:	b29b      	uxth	r3, r3
 800469a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800469e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	e025      	b.n	80046f8 <USB_EPStartXfer+0x10f0>
 80046ac:	463b      	mov	r3, r7
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d120      	bne.n	80046f8 <USB_EPStartXfer+0x10f0>
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ce:	4413      	add	r3, r2
 80046d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046d4:	463b      	mov	r3, r7
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	011a      	lsls	r2, r3, #4
 80046dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046e0:	4413      	add	r3, r2
 80046e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046ea:	463b      	mov	r3, r7
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046f6:	801a      	strh	r2, [r3, #0]
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004700:	463b      	mov	r3, r7
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	785b      	ldrb	r3, [r3, #1]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d175      	bne.n	80047f6 <USB_EPStartXfer+0x11ee>
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004712:	1d3b      	adds	r3, r7, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800471a:	b29b      	uxth	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004722:	4413      	add	r3, r2
 8004724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004728:	463b      	mov	r3, r7
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	011a      	lsls	r2, r3, #4
 8004730:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004734:	4413      	add	r3, r2
 8004736:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800473a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800473e:	463b      	mov	r3, r7
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d116      	bne.n	8004776 <USB_EPStartXfer+0x116e>
 8004748:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004754:	b29a      	uxth	r2, r3
 8004756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800475a:	801a      	strh	r2, [r3, #0]
 800475c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800476c:	b29a      	uxth	r2, r3
 800476e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004772:	801a      	strh	r2, [r3, #0]
 8004774:	e061      	b.n	800483a <USB_EPStartXfer+0x1232>
 8004776:	463b      	mov	r3, r7
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b3e      	cmp	r3, #62	; 0x3e
 800477e:	d81a      	bhi.n	80047b6 <USB_EPStartXfer+0x11ae>
 8004780:	463b      	mov	r3, r7
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800478c:	463b      	mov	r3, r7
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d004      	beq.n	80047a4 <USB_EPStartXfer+0x119c>
 800479a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800479e:	3301      	adds	r3, #1
 80047a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	029b      	lsls	r3, r3, #10
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	e041      	b.n	800483a <USB_EPStartXfer+0x1232>
 80047b6:	463b      	mov	r3, r7
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047c2:	463b      	mov	r3, r7
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d104      	bne.n	80047da <USB_EPStartXfer+0x11d2>
 80047d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047d4:	3b01      	subs	r3, #1
 80047d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047de:	b29b      	uxth	r3, r3
 80047e0:	029b      	lsls	r3, r3, #10
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e021      	b.n	800483a <USB_EPStartXfer+0x1232>
 80047f6:	463b      	mov	r3, r7
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d11c      	bne.n	800483a <USB_EPStartXfer+0x1232>
 8004800:	1d3b      	adds	r3, r7, #4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004808:	b29b      	uxth	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004810:	4413      	add	r3, r2
 8004812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004816:	463b      	mov	r3, r7
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	011a      	lsls	r2, r3, #4
 800481e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004822:	4413      	add	r3, r2
 8004824:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004828:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800482c:	463b      	mov	r3, r7
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	b29a      	uxth	r2, r3
 8004834:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004838:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800483a:	463b      	mov	r3, r7
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 81a4 	beq.w	8004b8e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004846:	1d3b      	adds	r3, r7, #4
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	463b      	mov	r3, r7
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800485a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800485e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <USB_EPStartXfer+0x126a>
 8004866:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10d      	bne.n	800488e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004872:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 8187 	bne.w	8004b8e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004880:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 8180 	bne.w	8004b8e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800488e:	1d3b      	adds	r3, r7, #4
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	463b      	mov	r3, r7
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	463b      	mov	r3, r7
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80048be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8013      	strh	r3, [r2, #0]
 80048d2:	e15c      	b.n	8004b8e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80048d4:	463b      	mov	r3, r7
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	78db      	ldrb	r3, [r3, #3]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	f040 8155 	bne.w	8004b8a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80048e0:	463b      	mov	r3, r7
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	463b      	mov	r3, r7
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d90e      	bls.n	800490e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80048f0:	463b      	mov	r3, r7
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80048fa:	463b      	mov	r3, r7
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699a      	ldr	r2, [r3, #24]
 8004900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004904:	1ad2      	subs	r2, r2, r3
 8004906:	463b      	mov	r3, r7
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	619a      	str	r2, [r3, #24]
 800490c:	e008      	b.n	8004920 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800490e:	463b      	mov	r3, r7
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004918:	463b      	mov	r3, r7
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2200      	movs	r2, #0
 800491e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004920:	463b      	mov	r3, r7
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	785b      	ldrb	r3, [r3, #1]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d16f      	bne.n	8004a0a <USB_EPStartXfer+0x1402>
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493a:	b29b      	uxth	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004942:	4413      	add	r3, r2
 8004944:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004948:	463b      	mov	r3, r7
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	011a      	lsls	r2, r3, #4
 8004950:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004954:	4413      	add	r3, r2
 8004956:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800495a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800495e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d116      	bne.n	8004994 <USB_EPStartXfer+0x138c>
 8004966:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004972:	b29a      	uxth	r2, r3
 8004974:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498a:	b29a      	uxth	r2, r3
 800498c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004990:	801a      	strh	r2, [r3, #0]
 8004992:	e05f      	b.n	8004a54 <USB_EPStartXfer+0x144c>
 8004994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004998:	2b3e      	cmp	r3, #62	; 0x3e
 800499a:	d818      	bhi.n	80049ce <USB_EPStartXfer+0x13c6>
 800499c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a0:	085b      	lsrs	r3, r3, #1
 80049a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d004      	beq.n	80049bc <USB_EPStartXfer+0x13b4>
 80049b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b6:	3301      	adds	r3, #1
 80049b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	029b      	lsls	r3, r3, #10
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	e042      	b.n	8004a54 <USB_EPStartXfer+0x144c>
 80049ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <USB_EPStartXfer+0x13e6>
 80049e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e8:	3b01      	subs	r3, #1
 80049ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	029b      	lsls	r3, r3, #10
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	e024      	b.n	8004a54 <USB_EPStartXfer+0x144c>
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d11f      	bne.n	8004a54 <USB_EPStartXfer+0x144c>
 8004a14:	1d3b      	adds	r3, r7, #4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004a1c:	1d3b      	adds	r3, r7, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004a32:	463b      	mov	r3, r7
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	011a      	lsls	r2, r3, #4
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	4413      	add	r3, r2
 8004a40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a52:	801a      	strh	r2, [r3, #0]
 8004a54:	1d3b      	adds	r3, r7, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d16f      	bne.n	8004b46 <USB_EPStartXfer+0x153e>
 8004a66:	1d3b      	adds	r3, r7, #4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7e:	4413      	add	r3, r2
 8004a80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a84:	463b      	mov	r3, r7
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	011a      	lsls	r2, r3, #4
 8004a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a90:	4413      	add	r3, r2
 8004a92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d116      	bne.n	8004ad0 <USB_EPStartXfer+0x14c8>
 8004aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ab4:	801a      	strh	r2, [r3, #0]
 8004ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004acc:	801a      	strh	r2, [r3, #0]
 8004ace:	e05e      	b.n	8004b8e <USB_EPStartXfer+0x1586>
 8004ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ad4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ad6:	d818      	bhi.n	8004b0a <USB_EPStartXfer+0x1502>
 8004ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <USB_EPStartXfer+0x14f0>
 8004aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004af2:	3301      	adds	r3, #1
 8004af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004af8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	029b      	lsls	r3, r3, #10
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b06:	801a      	strh	r2, [r3, #0]
 8004b08:	e041      	b.n	8004b8e <USB_EPStartXfer+0x1586>
 8004b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <USB_EPStartXfer+0x1522>
 8004b20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b24:	3b01      	subs	r3, #1
 8004b26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	029b      	lsls	r3, r3, #10
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b42:	801a      	strh	r2, [r3, #0]
 8004b44:	e023      	b.n	8004b8e <USB_EPStartXfer+0x1586>
 8004b46:	463b      	mov	r3, r7
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d11e      	bne.n	8004b8e <USB_EPStartXfer+0x1586>
 8004b50:	1d3b      	adds	r3, r7, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b60:	4413      	add	r3, r2
 8004b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b66:	463b      	mov	r3, r7
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	011a      	lsls	r2, r3, #4
 8004b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b72:	4413      	add	r3, r2
 8004b74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b86:	801a      	strh	r2, [r3, #0]
 8004b88:	e001      	b.n	8004b8e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e02e      	b.n	8004bec <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b8e:	1d3b      	adds	r3, r7, #4
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	463b      	mov	r3, r7
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004bac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004bb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bb4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004bb8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004bbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bc0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004bc4:	1d3b      	adds	r3, r7, #4
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	463b      	mov	r3, r7
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d020      	beq.n	8004c4a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c1e:	81bb      	strh	r3, [r7, #12]
 8004c20:	89bb      	ldrh	r3, [r7, #12]
 8004c22:	f083 0310 	eor.w	r3, r3, #16
 8004c26:	81bb      	strh	r3, [r7, #12]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	441a      	add	r2, r3
 8004c32:	89bb      	ldrh	r3, [r7, #12]
 8004c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	8013      	strh	r3, [r2, #0]
 8004c48:	e01f      	b.n	8004c8a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c60:	81fb      	strh	r3, [r7, #14]
 8004c62:	89fb      	ldrh	r3, [r7, #14]
 8004c64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c68:	81fb      	strh	r3, [r7, #14]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	441a      	add	r2, r3
 8004c74:	89fb      	ldrh	r3, [r7, #14]
 8004c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b087      	sub	sp, #28
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	7b1b      	ldrb	r3, [r3, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f040 809d 	bne.w	8004de4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	785b      	ldrb	r3, [r3, #1]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d04c      	beq.n	8004d4c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	823b      	strh	r3, [r7, #16]
 8004cc0:	8a3b      	ldrh	r3, [r7, #16]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01b      	beq.n	8004d02 <USB_EPClearStall+0x6c>
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce0:	81fb      	strh	r3, [r7, #14]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	89fb      	ldrh	r3, [r7, #14]
 8004cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	78db      	ldrb	r3, [r3, #3]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d06c      	beq.n	8004de4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d20:	81bb      	strh	r3, [r7, #12]
 8004d22:	89bb      	ldrh	r3, [r7, #12]
 8004d24:	f083 0320 	eor.w	r3, r3, #32
 8004d28:	81bb      	strh	r3, [r7, #12]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	441a      	add	r2, r3
 8004d34:	89bb      	ldrh	r3, [r7, #12]
 8004d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	8013      	strh	r3, [r2, #0]
 8004d4a:	e04b      	b.n	8004de4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	82fb      	strh	r3, [r7, #22]
 8004d5a:	8afb      	ldrh	r3, [r7, #22]
 8004d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01b      	beq.n	8004d9c <USB_EPClearStall+0x106>
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7a:	82bb      	strh	r3, [r7, #20]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	441a      	add	r2, r3
 8004d86:	8abb      	ldrh	r3, [r7, #20]
 8004d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	827b      	strh	r3, [r7, #18]
 8004db4:	8a7b      	ldrh	r3, [r7, #18]
 8004db6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004dba:	827b      	strh	r3, [r7, #18]
 8004dbc:	8a7b      	ldrh	r3, [r7, #18]
 8004dbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dc2:	827b      	strh	r3, [r7, #18]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	441a      	add	r2, r3
 8004dce:	8a7b      	ldrh	r3, [r7, #18]
 8004dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2280      	movs	r2, #128	; 0x80
 8004e06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr

08004e16 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr

08004e3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004e50:	68fb      	ldr	r3, [r7, #12]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b08d      	sub	sp, #52	; 0x34
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	461a      	mov	r2, r3
 8004e80:	460b      	mov	r3, r1
 8004e82:	80fb      	strh	r3, [r7, #6]
 8004e84:	4613      	mov	r3, r2
 8004e86:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004e88:	88bb      	ldrh	r3, [r7, #4]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	005a      	lsls	r2, r3, #1
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eaa:	e01e      	b.n	8004eea <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	3302      	adds	r3, #2
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1dd      	bne.n	8004eac <USB_WritePMA+0x3a>
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	3734      	adds	r7, #52	; 0x34
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b08b      	sub	sp, #44	; 0x2c
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	4611      	mov	r1, r2
 8004f08:	461a      	mov	r2, r3
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	80fb      	strh	r3, [r7, #6]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004f12:	88bb      	ldrh	r3, [r7, #4]
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	005a      	lsls	r2, r3, #1
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f2e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
 8004f34:	e01b      	b.n	8004f6e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	3302      	adds	r3, #2
 8004f42:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	0a1b      	lsrs	r3, r3, #8
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	3302      	adds	r3, #2
 8004f66:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e0      	bne.n	8004f36 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004f74:	88bb      	ldrh	r3, [r7, #4]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	701a      	strb	r2, [r3, #0]
  }
}
 8004f90:	bf00      	nop
 8004f92:	372c      	adds	r7, #44	; 0x2c
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr
	...

08004f9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8004fa0:	f000 fa80 	bl	80054a4 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	490e      	ldr	r1, [pc, #56]	; (8004fe0 <MX_USB_DEVICE_Init+0x44>)
 8004fa8:	480e      	ldr	r0, [pc, #56]	; (8004fe4 <MX_USB_DEVICE_Init+0x48>)
 8004faa:	f000 ffd3 	bl	8005f54 <USBD_Init>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8004fb4:	f7fb f98d 	bl	80002d2 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004fb8:	490b      	ldr	r1, [pc, #44]	; (8004fe8 <MX_USB_DEVICE_Init+0x4c>)
 8004fba:	480a      	ldr	r0, [pc, #40]	; (8004fe4 <MX_USB_DEVICE_Init+0x48>)
 8004fbc:	f000 fff6 	bl	8005fac <USBD_RegisterClass>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8004fc6:	f7fb f984 	bl	80002d2 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004fca:	4806      	ldr	r0, [pc, #24]	; (8004fe4 <MX_USB_DEVICE_Init+0x48>)
 8004fcc:	f001 f82c 	bl	8006028 <USBD_Start>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <MX_USB_DEVICE_Init+0x3e>
  {
    Error_Handler();
 8004fd6:	f7fb f97c 	bl	80002d2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004fda:	bf00      	nop
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000024 	.word	0x20000024
 8004fe4:	20000608 	.word	0x20000608
 8004fe8:	20000074 	.word	0x20000074

08004fec <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	6039      	str	r1, [r7, #0]
 8004ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2212      	movs	r2, #18
 8004ffc:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8004ffe:	4b03      	ldr	r3, [pc, #12]	; (800500c <USBD_DeviceDescriptor+0x20>)
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000040 	.word	0x20000040

08005010 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	6039      	str	r1, [r7, #0]
 800501a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2204      	movs	r2, #4
 8005020:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005022:	4b03      	ldr	r3, [pc, #12]	; (8005030 <USBD_LangIDStrDescriptor+0x20>)
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000054 	.word	0x20000054

08005034 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	6039      	str	r1, [r7, #0]
 800503e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d105      	bne.n	8005052 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	4907      	ldr	r1, [pc, #28]	; (8005068 <USBD_ProductStrDescriptor+0x34>)
 800504a:	4808      	ldr	r0, [pc, #32]	; (800506c <USBD_ProductStrDescriptor+0x38>)
 800504c:	f001 ffb3 	bl	8006fb6 <USBD_GetString>
 8005050:	e004      	b.n	800505c <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	4904      	ldr	r1, [pc, #16]	; (8005068 <USBD_ProductStrDescriptor+0x34>)
 8005056:	4805      	ldr	r0, [pc, #20]	; (800506c <USBD_ProductStrDescriptor+0x38>)
 8005058:	f001 ffad 	bl	8006fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800505c:	4b02      	ldr	r3, [pc, #8]	; (8005068 <USBD_ProductStrDescriptor+0x34>)
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000924 	.word	0x20000924
 800506c:	08007654 	.word	0x08007654

08005070 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	6039      	str	r1, [r7, #0]
 800507a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	4904      	ldr	r1, [pc, #16]	; (8005090 <USBD_ManufacturerStrDescriptor+0x20>)
 8005080:	4804      	ldr	r0, [pc, #16]	; (8005094 <USBD_ManufacturerStrDescriptor+0x24>)
 8005082:	f001 ff98 	bl	8006fb6 <USBD_GetString>
  return USBD_StrDesc;
 8005086:	4b02      	ldr	r3, [pc, #8]	; (8005090 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20000924 	.word	0x20000924
 8005094:	0800766c 	.word	0x0800766c

08005098 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	6039      	str	r1, [r7, #0]
 80050a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	221a      	movs	r2, #26
 80050a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80050aa:	f000 f843 	bl	8005134 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80050ae:	4b02      	ldr	r3, [pc, #8]	; (80050b8 <USBD_SerialStrDescriptor+0x20>)
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000058 	.word	0x20000058

080050bc <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	6039      	str	r1, [r7, #0]
 80050c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d105      	bne.n	80050da <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	4907      	ldr	r1, [pc, #28]	; (80050f0 <USBD_ConfigStrDescriptor+0x34>)
 80050d2:	4808      	ldr	r0, [pc, #32]	; (80050f4 <USBD_ConfigStrDescriptor+0x38>)
 80050d4:	f001 ff6f 	bl	8006fb6 <USBD_GetString>
 80050d8:	e004      	b.n	80050e4 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	4904      	ldr	r1, [pc, #16]	; (80050f0 <USBD_ConfigStrDescriptor+0x34>)
 80050de:	4805      	ldr	r0, [pc, #20]	; (80050f4 <USBD_ConfigStrDescriptor+0x38>)
 80050e0:	f001 ff69 	bl	8006fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80050e4:	4b02      	ldr	r3, [pc, #8]	; (80050f0 <USBD_ConfigStrDescriptor+0x34>)
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000924 	.word	0x20000924
 80050f4:	08007680 	.word	0x08007680

080050f8 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	6039      	str	r1, [r7, #0]
 8005102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d105      	bne.n	8005116 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	4907      	ldr	r1, [pc, #28]	; (800512c <USBD_InterfaceStrDescriptor+0x34>)
 800510e:	4808      	ldr	r0, [pc, #32]	; (8005130 <USBD_InterfaceStrDescriptor+0x38>)
 8005110:	f001 ff51 	bl	8006fb6 <USBD_GetString>
 8005114:	e004      	b.n	8005120 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	4904      	ldr	r1, [pc, #16]	; (800512c <USBD_InterfaceStrDescriptor+0x34>)
 800511a:	4805      	ldr	r0, [pc, #20]	; (8005130 <USBD_InterfaceStrDescriptor+0x38>)
 800511c:	f001 ff4b 	bl	8006fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005120:	4b02      	ldr	r3, [pc, #8]	; (800512c <USBD_InterfaceStrDescriptor+0x34>)
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000924 	.word	0x20000924
 8005130:	08007690 	.word	0x08007690

08005134 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800513a:	4b0f      	ldr	r3, [pc, #60]	; (8005178 <Get_SerialNum+0x44>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005140:	4b0e      	ldr	r3, [pc, #56]	; (800517c <Get_SerialNum+0x48>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005146:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <Get_SerialNum+0x4c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800515a:	2208      	movs	r2, #8
 800515c:	4909      	ldr	r1, [pc, #36]	; (8005184 <Get_SerialNum+0x50>)
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f814 	bl	800518c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005164:	2204      	movs	r2, #4
 8005166:	4908      	ldr	r1, [pc, #32]	; (8005188 <Get_SerialNum+0x54>)
 8005168:	68b8      	ldr	r0, [r7, #8]
 800516a:	f000 f80f 	bl	800518c <IntToUnicode>
  }
}
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	1ffff7e8 	.word	0x1ffff7e8
 800517c:	1ffff7ec 	.word	0x1ffff7ec
 8005180:	1ffff7f0 	.word	0x1ffff7f0
 8005184:	2000005a 	.word	0x2000005a
 8005188:	2000006a 	.word	0x2000006a

0800518c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800519e:	2300      	movs	r3, #0
 80051a0:	75fb      	strb	r3, [r7, #23]
 80051a2:	e027      	b.n	80051f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	0f1b      	lsrs	r3, r3, #28
 80051a8:	2b09      	cmp	r3, #9
 80051aa:	d80b      	bhi.n	80051c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	0f1b      	lsrs	r3, r3, #28
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4619      	mov	r1, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	440b      	add	r3, r1
 80051bc:	3230      	adds	r2, #48	; 0x30
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e00a      	b.n	80051da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	0f1b      	lsrs	r3, r3, #28
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4619      	mov	r1, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	440b      	add	r3, r1
 80051d4:	3237      	adds	r2, #55	; 0x37
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	3301      	adds	r3, #1
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	3301      	adds	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
 80051f4:	7dfa      	ldrb	r2, [r7, #23]
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d3d3      	bcc.n	80051a4 <IntToUnicode+0x18>
  }
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr

08005208 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	70fb      	strb	r3, [r7, #3]
#endif
#if (USBD_USE_CDC_RNDIS == 1)
  USBD_CDC_RNDIS.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.Init(pdev, cfgidx);
 8005214:	4b08      	ldr	r3, [pc, #32]	; (8005238 <USBD_COMPOSITE_Init+0x30>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	4611      	mov	r1, r2
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <USBD_COMPOSITE_Init+0x34>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	78fa      	ldrb	r2, [r7, #3]
 8005226:	4611      	mov	r1, r2
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	2000019c 	.word	0x2000019c
 800523c:	200000c0 	.word	0x200000c0

08005240 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	70fb      	strb	r3, [r7, #3]
#endif
#if (USBD_USE_CDC_RNDIS == 1)
  USBD_CDC_RNDIS.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.DeInit(pdev, cfgidx);
 800524c:	4b08      	ldr	r3, [pc, #32]	; (8005270 <USBD_COMPOSITE_DeInit+0x30>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	78fa      	ldrb	r2, [r7, #3]
 8005252:	4611      	mov	r1, r2
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
 8005258:	4b06      	ldr	r3, [pc, #24]	; (8005274 <USBD_COMPOSITE_DeInit+0x34>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	4611      	mov	r1, r2
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	2000019c 	.word	0x2000019c
 8005274:	200000c0 	.word	0x200000c0

08005278 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  {
    return USBD_CDC_RNDIS.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_MOUSE == 1)
  if (LOBYTE(req->wIndex) == HID_MOUSE_ITF_NBR)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	889b      	ldrh	r3, [r3, #4]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <USBD_COMPOSITE_Setup+0x4c>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d106      	bne.n	800529e <USBD_COMPOSITE_Setup+0x26>
  {
    return USBD_HID_MOUSE.Setup(pdev, req);
 8005290:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <USBD_COMPOSITE_Setup+0x50>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	6839      	ldr	r1, [r7, #0]
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
 800529a:	4603      	mov	r3, r0
 800529c:	e00e      	b.n	80052bc <USBD_COMPOSITE_Setup+0x44>
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (LOBYTE(req->wIndex) == HID_KEYBOARD_ITF_NBR)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	889b      	ldrh	r3, [r3, #4]
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	4b09      	ldr	r3, [pc, #36]	; (80052cc <USBD_COMPOSITE_Setup+0x54>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d106      	bne.n	80052ba <USBD_COMPOSITE_Setup+0x42>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
 80052ac:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <USBD_COMPOSITE_Setup+0x58>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	4798      	blx	r3
 80052b6:	4603      	mov	r3, r0
 80052b8:	e000      	b.n	80052bc <USBD_COMPOSITE_Setup+0x44>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 80052ba:	2303      	movs	r3, #3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20000300 	.word	0x20000300
 80052c8:	2000019c 	.word	0x2000019c
 80052cc:	200002ec 	.word	0x200002ec
 80052d0:	200000c0 	.word	0x200000c0

080052d4 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
  {
    return USBD_CDC_RNDIS.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_MOUSE == 1)
  if (epnum == (HID_MOUSE_IN_EP & 0x7F))
 80052e0:	78fa      	ldrb	r2, [r7, #3]
 80052e2:	4b11      	ldr	r3, [pc, #68]	; (8005328 <USBD_COMPOSITE_DataIn+0x54>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d107      	bne.n	80052fe <USBD_COMPOSITE_DataIn+0x2a>
  {
    return USBD_HID_MOUSE.DataIn(pdev, epnum);
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <USBD_COMPOSITE_DataIn+0x58>)
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	4611      	mov	r1, r2
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	4798      	blx	r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	e00f      	b.n	800531e <USBD_COMPOSITE_DataIn+0x4a>
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (epnum == (HID_KEYBOARD_IN_EP & 0x7F))
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <USBD_COMPOSITE_DataIn+0x5c>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005308:	429a      	cmp	r2, r3
 800530a:	d107      	bne.n	800531c <USBD_COMPOSITE_DataIn+0x48>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <USBD_COMPOSITE_DataIn+0x60>)
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	78fa      	ldrb	r2, [r7, #3]
 8005312:	4611      	mov	r1, r2
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4798      	blx	r3
 8005318:	4603      	mov	r3, r0
 800531a:	e000      	b.n	800531e <USBD_COMPOSITE_DataIn+0x4a>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800531c:	2303      	movs	r3, #3
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	2000019b 	.word	0x2000019b
 800532c:	2000019c 	.word	0x2000019c
 8005330:	200000be 	.word	0x200000be
 8005334:	200000c0 	.word	0x200000c0

08005338 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70fb      	strb	r3, [r7, #3]
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 80053b0:	2303      	movs	r3, #3
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	223b      	movs	r2, #59	; 0x3b
 80053c8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80053ca:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000b24 	.word	0x20000b24

080053dc <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	223b      	movs	r2, #59	; 0x3b
 80053e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 80053ea:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000b60 	.word	0x20000b60

080053fc <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	223b      	movs	r2, #59	; 0x3b
 8005408:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800540a:	4b03      	ldr	r3, [pc, #12]	; (8005418 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000b24 	.word	0x20000b24

0800541c <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	220a      	movs	r2, #10
 8005428:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800542a:	4b03      	ldr	r3, [pc, #12]	; (8005438 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	200000b4 	.word	0x200000b4

0800543c <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	460b      	mov	r3, r1
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800544a:	4b10      	ldr	r3, [pc, #64]	; (800548c <USBD_COMPOSITE_GetUsrStringDesc+0x50>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	7afa      	ldrb	r2, [r7, #11]
 8005450:	429a      	cmp	r2, r3
 8005452:	d815      	bhi.n	8005480 <USBD_COMPOSITE_GetUsrStringDesc+0x44>
    {
      USBD_GetString((uint8_t *)CDC_RNDIS_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_MOUSE == 1)
    if (index == HID_MOUSE_STR_DESC_IDX)
 8005454:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <USBD_COMPOSITE_GetUsrStringDesc+0x54>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	7afa      	ldrb	r2, [r7, #11]
 800545a:	429a      	cmp	r2, r3
 800545c:	d104      	bne.n	8005468 <USBD_COMPOSITE_GetUsrStringDesc+0x2c>
    {
      USBD_GetString((uint8_t *)HID_MOUSE_STR_DESC, USBD_StrDesc, length);
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	490c      	ldr	r1, [pc, #48]	; (8005494 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 8005462:	480d      	ldr	r0, [pc, #52]	; (8005498 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>)
 8005464:	f001 fda7 	bl	8006fb6 <USBD_GetString>
    }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    if (index == HID_KEYBOARD_STR_DESC_IDX)
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <USBD_COMPOSITE_GetUsrStringDesc+0x60>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	7afa      	ldrb	r2, [r7, #11]
 800546e:	429a      	cmp	r2, r3
 8005470:	d104      	bne.n	800547c <USBD_COMPOSITE_GetUsrStringDesc+0x40>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	4907      	ldr	r1, [pc, #28]	; (8005494 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 8005476:	480a      	ldr	r0, [pc, #40]	; (80054a0 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
 8005478:	f001 fd9d 	bl	8006fb6 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 800547e:	e000      	b.n	8005482 <USBD_COMPOSITE_GetUsrStringDesc+0x46>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8005480:	2300      	movs	r3, #0
  }
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	200000b0 	.word	0x200000b0
 8005490:	20000301 	.word	0x20000301
 8005494:	200002ac 	.word	0x200002ac
 8005498:	080076a4 	.word	0x080076a4
 800549c:	200002ed 	.word	0x200002ed
 80054a0:	080076b4 	.word	0x080076b4

080054a4 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
  uint16_t len = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 80054b2:	2381      	movs	r3, #129	; 0x81
 80054b4:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 80054b6:	2301      	movs	r3, #1
 80054b8:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 80054ba:	2300      	movs	r3, #0
 80054bc:	727b      	strb	r3, [r7, #9]
  interface_no_track += 2;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_MOUSE == 1)
  ptr = USBD_HID_MOUSE.GetFSConfigDescriptor(&len);
 80054be:	4b62      	ldr	r3, [pc, #392]	; (8005648 <USBD_COMPOSITE_Mount_Class+0x1a4>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	1d3a      	adds	r2, r7, #4
 80054c4:	4610      	mov	r0, r2
 80054c6:	4798      	blx	r3
 80054c8:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Mouse_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 80054ca:	4b60      	ldr	r3, [pc, #384]	; (800564c <USBD_COMPOSITE_Mount_Class+0x1a8>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	7afa      	ldrb	r2, [r7, #11]
 80054d0:	7a79      	ldrb	r1, [r7, #9]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fd10 	bl	8005ef8 <USBD_Update_HID_Mouse_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_MOUSE_DESC, ptr + 0x09, len - 0x09);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3309      	adds	r3, #9
 80054dc:	88ba      	ldrh	r2, [r7, #4]
 80054de:	3a09      	subs	r2, #9
 80054e0:	4619      	mov	r1, r3
 80054e2:	485b      	ldr	r0, [pc, #364]	; (8005650 <USBD_COMPOSITE_Mount_Class+0x1ac>)
 80054e4:	f002 f88c 	bl	8007600 <memcpy>

  ptr = USBD_HID_MOUSE.GetHSConfigDescriptor(&len);
 80054e8:	4b57      	ldr	r3, [pc, #348]	; (8005648 <USBD_COMPOSITE_Mount_Class+0x1a4>)
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	1d3a      	adds	r2, r7, #4
 80054ee:	4610      	mov	r0, r2
 80054f0:	4798      	blx	r3
 80054f2:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Mouse_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 80054f4:	4b55      	ldr	r3, [pc, #340]	; (800564c <USBD_COMPOSITE_Mount_Class+0x1a8>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	7afa      	ldrb	r2, [r7, #11]
 80054fa:	7a79      	ldrb	r1, [r7, #9]
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fcfb 	bl	8005ef8 <USBD_Update_HID_Mouse_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_MOUSE_DESC, ptr + 0x09, len - 0x09);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3309      	adds	r3, #9
 8005506:	88ba      	ldrh	r2, [r7, #4]
 8005508:	3a09      	subs	r2, #9
 800550a:	4619      	mov	r1, r3
 800550c:	4851      	ldr	r0, [pc, #324]	; (8005654 <USBD_COMPOSITE_Mount_Class+0x1b0>)
 800550e:	f002 f877 	bl	8007600 <memcpy>

  in_ep_track += 1;
 8005512:	7afb      	ldrb	r3, [r7, #11]
 8005514:	3301      	adds	r3, #1
 8005516:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 8005518:	7a7b      	ldrb	r3, [r7, #9]
 800551a:	3301      	adds	r3, #1
 800551c:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800551e:	4b4b      	ldr	r3, [pc, #300]	; (800564c <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	3301      	adds	r3, #1
 8005524:	b2da      	uxtb	r2, r3
 8005526:	4b49      	ldr	r3, [pc, #292]	; (800564c <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005528:	701a      	strb	r2, [r3, #0]
#endif

#if (USBD_USE_HID_KEYBOARD == 1)
  ptr = USBD_HID_KEYBOARD.GetFSConfigDescriptor(&len);
 800552a:	4b4b      	ldr	r3, [pc, #300]	; (8005658 <USBD_COMPOSITE_Mount_Class+0x1b4>)
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	1d3a      	adds	r2, r7, #4
 8005530:	4610      	mov	r0, r2
 8005532:	4798      	blx	r3
 8005534:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8005536:	4b45      	ldr	r3, [pc, #276]	; (800564c <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	7afa      	ldrb	r2, [r7, #11]
 800553c:	7a79      	ldrb	r1, [r7, #9]
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 faa0 	bl	8005a84 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3309      	adds	r3, #9
 8005548:	88ba      	ldrh	r2, [r7, #4]
 800554a:	3a09      	subs	r2, #9
 800554c:	4619      	mov	r1, r3
 800554e:	4843      	ldr	r0, [pc, #268]	; (800565c <USBD_COMPOSITE_Mount_Class+0x1b8>)
 8005550:	f002 f856 	bl	8007600 <memcpy>

  ptr = USBD_HID_KEYBOARD.GetHSConfigDescriptor(&len);
 8005554:	4b40      	ldr	r3, [pc, #256]	; (8005658 <USBD_COMPOSITE_Mount_Class+0x1b4>)
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	1d3a      	adds	r2, r7, #4
 800555a:	4610      	mov	r0, r2
 800555c:	4798      	blx	r3
 800555e:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8005560:	4b3a      	ldr	r3, [pc, #232]	; (800564c <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	7afa      	ldrb	r2, [r7, #11]
 8005566:	7a79      	ldrb	r1, [r7, #9]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fa8b 	bl	8005a84 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3309      	adds	r3, #9
 8005572:	88ba      	ldrh	r2, [r7, #4]
 8005574:	3a09      	subs	r2, #9
 8005576:	4619      	mov	r1, r3
 8005578:	4839      	ldr	r0, [pc, #228]	; (8005660 <USBD_COMPOSITE_Mount_Class+0x1bc>)
 800557a:	f002 f841 	bl	8007600 <memcpy>

  in_ep_track += 1;
 800557e:	7afb      	ldrb	r3, [r7, #11]
 8005580:	3301      	adds	r3, #1
 8005582:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 8005584:	7a7b      	ldrb	r3, [r7, #9]
 8005586:	3301      	adds	r3, #1
 8005588:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800558a:	4b30      	ldr	r3, [pc, #192]	; (800564c <USBD_COMPOSITE_Mount_Class+0x1a8>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	3301      	adds	r3, #1
 8005590:	b2da      	uxtb	r2, r3
 8005592:	4b2e      	ldr	r3, [pc, #184]	; (800564c <USBD_COMPOSITE_Mount_Class+0x1a8>)
 8005594:	701a      	strb	r2, [r3, #0]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8005596:	233b      	movs	r3, #59	; 0x3b
 8005598:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800559a:	4b32      	ldr	r3, [pc, #200]	; (8005664 <USBD_COMPOSITE_Mount_Class+0x1c0>)
 800559c:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2209      	movs	r2, #9
 80055a2:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3301      	adds	r3, #1
 80055a8:	2202      	movs	r2, #2
 80055aa:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3302      	adds	r3, #2
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	0a1b      	lsrs	r3, r3, #8
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3303      	adds	r3, #3
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3304      	adds	r3, #4
 80055c8:	7a7a      	ldrb	r2, [r7, #9]
 80055ca:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3305      	adds	r3, #5
 80055d0:	2201      	movs	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3306      	adds	r3, #6
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3307      	adds	r3, #7
 80055e0:	22c0      	movs	r2, #192	; 0xc0
 80055e2:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3308      	adds	r3, #8
 80055e8:	2232      	movs	r2, #50	; 0x32
 80055ea:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 80055ec:	4b1e      	ldr	r3, [pc, #120]	; (8005668 <USBD_COMPOSITE_Mount_Class+0x1c4>)
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2209      	movs	r2, #9
 80055f4:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3301      	adds	r3, #1
 80055fa:	2202      	movs	r2, #2
 80055fc:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3302      	adds	r3, #2
 8005602:	88fa      	ldrh	r2, [r7, #6]
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3303      	adds	r3, #3
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3304      	adds	r3, #4
 800561a:	7a7a      	ldrb	r2, [r7, #9]
 800561c:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3305      	adds	r3, #5
 8005622:	2201      	movs	r2, #1
 8005624:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3306      	adds	r3, #6
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3307      	adds	r3, #7
 8005632:	22c0      	movs	r2, #192	; 0xc0
 8005634:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3308      	adds	r3, #8
 800563a:	2232      	movs	r2, #50	; 0x32
 800563c:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	2000019c 	.word	0x2000019c
 800564c:	200000b0 	.word	0x200000b0
 8005650:	20000b69 	.word	0x20000b69
 8005654:	20000b2d 	.word	0x20000b2d
 8005658:	200000c0 	.word	0x200000c0
 800565c:	20000b82 	.word	0x20000b82
 8005660:	20000b46 	.word	0x20000b46
 8005664:	20000b24 	.word	0x20000b24
 8005668:	20000b60 	.word	0x20000b60

0800566c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_Keyboard_HandleTypeDef *hhid;

  hhid = &USBD_HID_KBD_Instace;
 8005678:	4b24      	ldr	r3, [pc, #144]	; (800570c <USBD_HID_Init+0xa0>)
 800567a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d105      	bne.n	800568e <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Keyboard = NULL;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    return (uint8_t)USBD_EMEM;
 800568a:	2302      	movs	r3, #2
 800568c:	e03a      	b.n	8005704 <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Keyboard = (void *)hhid;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	7c1b      	ldrb	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_HS_BINTERVAL;
 800569e:	4b1c      	ldr	r3, [pc, #112]	; (8005710 <USBD_HID_Init+0xa4>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	f003 020f 	and.w	r2, r3, #15
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	3326      	adds	r3, #38	; 0x26
 80056b4:	2207      	movs	r2, #7
 80056b6:	801a      	strh	r2, [r3, #0]
 80056b8:	e00c      	b.n	80056d4 <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_FS_BINTERVAL;
 80056ba:	4b15      	ldr	r3, [pc, #84]	; (8005710 <USBD_HID_Init+0xa4>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	3326      	adds	r3, #38	; 0x26
 80056d0:	220a      	movs	r2, #10
 80056d2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_KEYBOARD_IN_EP, USBD_EP_TYPE_INTR, HID_KEYBOARD_EPIN_SIZE);
 80056d4:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <USBD_HID_Init+0xa4>)
 80056d6:	7819      	ldrb	r1, [r3, #0]
 80056d8:	2308      	movs	r3, #8
 80056da:	2203      	movs	r2, #3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f001 fe2e 	bl	800733e <USBD_LL_OpenEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 1U;
 80056e2:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <USBD_HID_Init+0xa4>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 020f 	and.w	r2, r3, #15
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	3324      	adds	r3, #36	; 0x24
 80056f8:	2201      	movs	r2, #1
 80056fa:	801a      	strh	r2, [r3, #0]

  hhid->state = KEYBOARD_HID_IDLE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	200002f0 	.word	0x200002f0
 8005710:	200000be 	.word	0x200000be

08005714 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	460b      	mov	r3, r1
 800571e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_KEYBOARD_IN_EP);
 8005720:	4b16      	ldr	r3, [pc, #88]	; (800577c <USBD_HID_DeInit+0x68>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f001 fe2f 	bl	800738a <USBD_LL_CloseEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 0U;
 800572c:	4b13      	ldr	r3, [pc, #76]	; (800577c <USBD_HID_DeInit+0x68>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f003 020f 	and.w	r2, r3, #15
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	3324      	adds	r3, #36	; 0x24
 8005742:	2200      	movs	r2, #0
 8005744:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = 0U;
 8005746:	4b0d      	ldr	r3, [pc, #52]	; (800577c <USBD_HID_DeInit+0x68>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	f003 020f 	and.w	r2, r3, #15
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	3326      	adds	r3, #38	; 0x26
 800575c:	2200      	movs	r2, #0
 800575e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Keyboard != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Keyboard);
#endif
    pdev->pClassData_HID_Keyboard = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }

  return (uint8_t)USBD_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	200000be 	.word	0x200000be

08005780 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005790:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e0e8      	b.n	8005976 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d046      	beq.n	800583e <USBD_HID_Setup+0xbe>
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	f040 80d8 	bne.w	8005966 <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	785b      	ldrb	r3, [r3, #1]
 80057ba:	3b02      	subs	r3, #2
 80057bc:	2b09      	cmp	r3, #9
 80057be:	d836      	bhi.n	800582e <USBD_HID_Setup+0xae>
 80057c0:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <USBD_HID_Setup+0x48>)
 80057c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c6:	bf00      	nop
 80057c8:	0800581f 	.word	0x0800581f
 80057cc:	080057ff 	.word	0x080057ff
 80057d0:	0800582f 	.word	0x0800582f
 80057d4:	0800582f 	.word	0x0800582f
 80057d8:	0800582f 	.word	0x0800582f
 80057dc:	0800582f 	.word	0x0800582f
 80057e0:	0800582f 	.word	0x0800582f
 80057e4:	0800582f 	.word	0x0800582f
 80057e8:	0800580d 	.word	0x0800580d
 80057ec:	080057f1 	.word	0x080057f1
    {
    case HID_KEYBOARD_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	885b      	ldrh	r3, [r3, #2]
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	601a      	str	r2, [r3, #0]
      break;
 80057fc:	e01e      	b.n	800583c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 fc35 	bl	8007074 <USBD_CtlSendData>
      break;
 800580a:	e017      	b.n	800583c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	885b      	ldrh	r3, [r3, #2]
 8005810:	0a1b      	lsrs	r3, r3, #8
 8005812:	b29b      	uxth	r3, r3
 8005814:	b2db      	uxtb	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	605a      	str	r2, [r3, #4]
      break;
 800581c:	e00e      	b.n	800583c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3304      	adds	r3, #4
 8005822:	2201      	movs	r2, #1
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fc24 	bl	8007074 <USBD_CtlSendData>
      break;
 800582c:	e006      	b.n	800583c <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 fbaf 	bl	8006f94 <USBD_CtlError>
      ret = USBD_FAIL;
 8005836:	2303      	movs	r3, #3
 8005838:	75fb      	strb	r3, [r7, #23]
      break;
 800583a:	bf00      	nop
    }
    break;
 800583c:	e09a      	b.n	8005974 <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b0b      	cmp	r3, #11
 8005844:	f200 8086 	bhi.w	8005954 <USBD_HID_Setup+0x1d4>
 8005848:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <USBD_HID_Setup+0xd0>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005881 	.word	0x08005881
 8005854:	08005963 	.word	0x08005963
 8005858:	08005955 	.word	0x08005955
 800585c:	08005955 	.word	0x08005955
 8005860:	08005955 	.word	0x08005955
 8005864:	08005955 	.word	0x08005955
 8005868:	080058ab 	.word	0x080058ab
 800586c:	08005955 	.word	0x08005955
 8005870:	08005955 	.word	0x08005955
 8005874:	08005955 	.word	0x08005955
 8005878:	08005903 	.word	0x08005903
 800587c:	0800592d 	.word	0x0800592d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b03      	cmp	r3, #3
 800588a:	d107      	bne.n	800589c <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800588c:	f107 030a 	add.w	r3, r7, #10
 8005890:	2202      	movs	r2, #2
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 fbed 	bl	8007074 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800589a:	e063      	b.n	8005964 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f001 fb78 	bl	8006f94 <USBD_CtlError>
        ret = USBD_FAIL;
 80058a4:	2303      	movs	r3, #3
 80058a6:	75fb      	strb	r3, [r7, #23]
      break;
 80058a8:	e05c      	b.n	8005964 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_KEYBOARD_REPORT_DESC)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	885b      	ldrh	r3, [r3, #2]
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b22      	cmp	r3, #34	; 0x22
 80058b4:	d108      	bne.n	80058c8 <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	88db      	ldrh	r3, [r3, #6]
 80058ba:	2b3f      	cmp	r3, #63	; 0x3f
 80058bc:	bf28      	it	cs
 80058be:	233f      	movcs	r3, #63	; 0x3f
 80058c0:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_KEYBOARD_ReportDesc;
 80058c2:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <USBD_HID_Setup+0x200>)
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	e015      	b.n	80058f4 <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_KEYBOARD_DESCRIPTOR_TYPE)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	885b      	ldrh	r3, [r3, #2]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b21      	cmp	r3, #33	; 0x21
 80058d2:	d108      	bne.n	80058e6 <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_KEYBOARD_Desc;
 80058d4:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <USBD_HID_Setup+0x204>)
 80058d6:	613b      	str	r3, [r7, #16]
        len = MIN(HID_KEYBOARD_DESC_SIZE, req->wLength);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	88db      	ldrh	r3, [r3, #6]
 80058dc:	2b09      	cmp	r3, #9
 80058de:	bf28      	it	cs
 80058e0:	2309      	movcs	r3, #9
 80058e2:	82bb      	strh	r3, [r7, #20]
 80058e4:	e006      	b.n	80058f4 <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 fb53 	bl	8006f94 <USBD_CtlError>
        ret = USBD_FAIL;
 80058ee:	2303      	movs	r3, #3
 80058f0:	75fb      	strb	r3, [r7, #23]
        break;
 80058f2:	e037      	b.n	8005964 <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058f4:	8abb      	ldrh	r3, [r7, #20]
 80058f6:	461a      	mov	r2, r3
 80058f8:	6939      	ldr	r1, [r7, #16]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 fbba 	bl	8007074 <USBD_CtlSendData>
      break;
 8005900:	e030      	b.n	8005964 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b03      	cmp	r3, #3
 800590c:	d107      	bne.n	800591e <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3308      	adds	r3, #8
 8005912:	2201      	movs	r2, #1
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 fbac 	bl	8007074 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800591c:	e022      	b.n	8005964 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fb37 	bl	8006f94 <USBD_CtlError>
        ret = USBD_FAIL;
 8005926:	2303      	movs	r3, #3
 8005928:	75fb      	strb	r3, [r7, #23]
      break;
 800592a:	e01b      	b.n	8005964 <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b03      	cmp	r3, #3
 8005936:	d106      	bne.n	8005946 <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	885b      	ldrh	r3, [r3, #2]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005944:	e00e      	b.n	8005964 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 fb23 	bl	8006f94 <USBD_CtlError>
        ret = USBD_FAIL;
 800594e:	2303      	movs	r3, #3
 8005950:	75fb      	strb	r3, [r7, #23]
      break;
 8005952:	e007      	b.n	8005964 <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f001 fb1c 	bl	8006f94 <USBD_CtlError>
      ret = USBD_FAIL;
 800595c:	2303      	movs	r3, #3
 800595e:	75fb      	strb	r3, [r7, #23]
      break;
 8005960:	e000      	b.n	8005964 <USBD_HID_Setup+0x1e4>
      break;
 8005962:	bf00      	nop
    }
    break;
 8005964:	e006      	b.n	8005974 <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 fb13 	bl	8006f94 <USBD_CtlError>
    ret = USBD_FAIL;
 800596e:	2303      	movs	r3, #3
 8005970:	75fb      	strb	r3, [r7, #23]
    break;
 8005972:	bf00      	nop
  }

  return (uint8_t)ret;
 8005974:	7dfb      	ldrb	r3, [r7, #23]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	2000015c 	.word	0x2000015c
 8005984:	20000144 	.word	0x20000144

08005988 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2222      	movs	r2, #34	; 0x22
 8005994:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 8005996:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	200000fc 	.word	0x200000fc

080059a8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgHSDesc);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2222      	movs	r2, #34	; 0x22
 80059b4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgHSDesc;
 80059b6:	4b03      	ldr	r3, [pc, #12]	; (80059c4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000120 	.word	0x20000120

080059c8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2222      	movs	r2, #34	; 0x22
 80059d4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 80059d6:	4b03      	ldr	r3, [pc, #12]	; (80059e4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	200000fc 	.word	0x200000fc

080059e8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard)->state = KEYBOARD_HID_IDLE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059fa:	2200      	movs	r2, #0
 80059fc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr
	...

08005a0c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	220a      	movs	r2, #10
 8005a18:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005a1a:	4b03      	ldr	r3, [pc, #12]	; (8005a28 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20000150 	.word	0x20000150

08005a2c <USBD_HID_Keybaord_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_Keybaord_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a40:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <USBD_HID_Keybaord_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e014      	b.n	8005a76 <USBD_HID_Keybaord_SendReport+0x4a>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d10d      	bne.n	8005a74 <USBD_HID_Keybaord_SendReport+0x48>
  {
    if (hhid->state == KEYBOARD_HID_IDLE)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	7b1b      	ldrb	r3, [r3, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d109      	bne.n	8005a74 <USBD_HID_Keybaord_SendReport+0x48>
    {
      hhid->state = KEYBOARD_HID_BUSY;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2201      	movs	r2, #1
 8005a64:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_KEYBOARD_IN_EP, report, len);
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <USBD_HID_Keybaord_SendReport+0x54>)
 8005a68:	7819      	ldrb	r1, [r3, #0]
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f001 fd33 	bl	80074da <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	200000be 	.word	0x200000be

08005a84 <USBD_Update_HID_KBD_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_KBD_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	4611      	mov	r1, r2
 8005a90:	461a      	mov	r2, r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	70fb      	strb	r3, [r7, #3]
 8005a96:	460b      	mov	r3, r1
 8005a98:	70bb      	strb	r3, [r7, #2]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	330b      	adds	r3, #11
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3311      	adds	r3, #17
 8005aaa:	787a      	ldrb	r2, [r7, #1]
 8005aac:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	331d      	adds	r3, #29
 8005ab2:	78ba      	ldrb	r2, [r7, #2]
 8005ab4:	701a      	strb	r2, [r3, #0]

  HID_KEYBOARD_IN_EP = in_ep;
 8005ab6:	4a07      	ldr	r2, [pc, #28]	; (8005ad4 <USBD_Update_HID_KBD_DESC+0x50>)
 8005ab8:	78bb      	ldrb	r3, [r7, #2]
 8005aba:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_ITF_NBR = itf_no;
 8005abc:	4a06      	ldr	r2, [pc, #24]	; (8005ad8 <USBD_Update_HID_KBD_DESC+0x54>)
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_STR_DESC_IDX = str_idx;
 8005ac2:	4a06      	ldr	r2, [pc, #24]	; (8005adc <USBD_Update_HID_KBD_DESC+0x58>)
 8005ac4:	787b      	ldrb	r3, [r7, #1]
 8005ac6:	7013      	strb	r3, [r2, #0]
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	200000be 	.word	0x200000be
 8005ad8:	200002ec 	.word	0x200002ec
 8005adc:	200002ed 	.word	0x200002ed

08005ae0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = &USBD_HID_Instance;
 8005aec:	4b24      	ldr	r3, [pc, #144]	; (8005b80 <USBD_HID_Init+0xa0>)
 8005aee:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d105      	bne.n	8005b02 <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Mouse = NULL;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
    return (uint8_t)USBD_EMEM;
 8005afe:	2302      	movs	r3, #2
 8005b00:	e03a      	b.n	8005b78 <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Mouse = (void *)hhid;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	7c1b      	ldrb	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10d      	bne.n	8005b2e <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_MOUSE_IN_EP & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005b12:	4b1c      	ldr	r3, [pc, #112]	; (8005b84 <USBD_HID_Init+0xa4>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	f003 020f 	and.w	r2, r3, #15
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	3326      	adds	r3, #38	; 0x26
 8005b28:	2207      	movs	r2, #7
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	e00c      	b.n	8005b48 <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_MOUSE_IN_EP & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <USBD_HID_Init+0xa4>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f003 020f 	and.w	r2, r3, #15
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	3326      	adds	r3, #38	; 0x26
 8005b44:	220a      	movs	r2, #10
 8005b46:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_MOUSE_IN_EP, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005b48:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <USBD_HID_Init+0xa4>)
 8005b4a:	7819      	ldrb	r1, [r3, #0]
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	2203      	movs	r2, #3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 fbf4 	bl	800733e <USBD_LL_OpenEP>
  pdev->ep_in[HID_MOUSE_IN_EP & 0xFU].is_used = 1U;
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <USBD_HID_Init+0xa4>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f003 020f 	and.w	r2, r3, #15
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	3324      	adds	r3, #36	; 0x24
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000304 	.word	0x20000304
 8005b84:	2000019b 	.word	0x2000019b

08005b88 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_MOUSE_IN_EP);
 8005b94:	4b16      	ldr	r3, [pc, #88]	; (8005bf0 <USBD_HID_DeInit+0x68>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f001 fbf5 	bl	800738a <USBD_LL_CloseEP>
  pdev->ep_in[HID_MOUSE_IN_EP & 0xFU].is_used = 0U;
 8005ba0:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <USBD_HID_DeInit+0x68>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	f003 020f 	and.w	r2, r3, #15
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	3324      	adds	r3, #36	; 0x24
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_MOUSE_IN_EP & 0xFU].bInterval = 0U;
 8005bba:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <USBD_HID_DeInit+0x68>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	f003 020f 	and.w	r2, r3, #15
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	3326      	adds	r3, #38	; 0x26
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Mouse != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Mouse);
#endif
    pdev->pClassData_HID_Mouse = NULL;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }

  return (uint8_t)USBD_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	2000019b 	.word	0x2000019b

08005bf4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData_HID_Mouse;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8005c04:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e0e8      	b.n	8005dea <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d046      	beq.n	8005cb2 <USBD_HID_Setup+0xbe>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	f040 80d8 	bne.w	8005dda <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	3b02      	subs	r3, #2
 8005c30:	2b09      	cmp	r3, #9
 8005c32:	d836      	bhi.n	8005ca2 <USBD_HID_Setup+0xae>
 8005c34:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <USBD_HID_Setup+0x48>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c93 	.word	0x08005c93
 8005c40:	08005c73 	.word	0x08005c73
 8005c44:	08005ca3 	.word	0x08005ca3
 8005c48:	08005ca3 	.word	0x08005ca3
 8005c4c:	08005ca3 	.word	0x08005ca3
 8005c50:	08005ca3 	.word	0x08005ca3
 8005c54:	08005ca3 	.word	0x08005ca3
 8005c58:	08005ca3 	.word	0x08005ca3
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005c65 	.word	0x08005c65
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	885b      	ldrh	r3, [r3, #2]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	601a      	str	r2, [r3, #0]
      break;
 8005c70:	e01e      	b.n	8005cb0 <USBD_HID_Setup+0xbc>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 f9fb 	bl	8007074 <USBD_CtlSendData>
      break;
 8005c7e:	e017      	b.n	8005cb0 <USBD_HID_Setup+0xbc>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	885b      	ldrh	r3, [r3, #2]
 8005c84:	0a1b      	lsrs	r3, r3, #8
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	605a      	str	r2, [r3, #4]
      break;
 8005c90:	e00e      	b.n	8005cb0 <USBD_HID_Setup+0xbc>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3304      	adds	r3, #4
 8005c96:	2201      	movs	r2, #1
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 f9ea 	bl	8007074 <USBD_CtlSendData>
      break;
 8005ca0:	e006      	b.n	8005cb0 <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 f975 	bl	8006f94 <USBD_CtlError>
      ret = USBD_FAIL;
 8005caa:	2303      	movs	r3, #3
 8005cac:	75fb      	strb	r3, [r7, #23]
      break;
 8005cae:	bf00      	nop
    }
    break;
 8005cb0:	e09a      	b.n	8005de8 <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	2b0b      	cmp	r3, #11
 8005cb8:	f200 8086 	bhi.w	8005dc8 <USBD_HID_Setup+0x1d4>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <USBD_HID_Setup+0xd0>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cf5 	.word	0x08005cf5
 8005cc8:	08005dd7 	.word	0x08005dd7
 8005ccc:	08005dc9 	.word	0x08005dc9
 8005cd0:	08005dc9 	.word	0x08005dc9
 8005cd4:	08005dc9 	.word	0x08005dc9
 8005cd8:	08005dc9 	.word	0x08005dc9
 8005cdc:	08005d1f 	.word	0x08005d1f
 8005ce0:	08005dc9 	.word	0x08005dc9
 8005ce4:	08005dc9 	.word	0x08005dc9
 8005ce8:	08005dc9 	.word	0x08005dc9
 8005cec:	08005d77 	.word	0x08005d77
 8005cf0:	08005da1 	.word	0x08005da1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d107      	bne.n	8005d10 <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d00:	f107 030a 	add.w	r3, r7, #10
 8005d04:	2202      	movs	r2, #2
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 f9b3 	bl	8007074 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005d0e:	e063      	b.n	8005dd8 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f001 f93e 	bl	8006f94 <USBD_CtlError>
        ret = USBD_FAIL;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d1c:	e05c      	b.n	8005dd8 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	885b      	ldrh	r3, [r3, #2]
 8005d22:	0a1b      	lsrs	r3, r3, #8
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b22      	cmp	r3, #34	; 0x22
 8005d28:	d108      	bne.n	8005d3c <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	88db      	ldrh	r3, [r3, #6]
 8005d2e:	2b4a      	cmp	r3, #74	; 0x4a
 8005d30:	bf28      	it	cs
 8005d32:	234a      	movcs	r3, #74	; 0x4a
 8005d34:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8005d36:	4b2f      	ldr	r3, [pc, #188]	; (8005df4 <USBD_HID_Setup+0x200>)
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	e015      	b.n	8005d68 <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	885b      	ldrh	r3, [r3, #2]
 8005d40:	0a1b      	lsrs	r3, r3, #8
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b21      	cmp	r3, #33	; 0x21
 8005d46:	d108      	bne.n	8005d5a <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_Desc;
 8005d48:	4b2b      	ldr	r3, [pc, #172]	; (8005df8 <USBD_HID_Setup+0x204>)
 8005d4a:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	88db      	ldrh	r3, [r3, #6]
 8005d50:	2b09      	cmp	r3, #9
 8005d52:	bf28      	it	cs
 8005d54:	2309      	movcs	r3, #9
 8005d56:	82bb      	strh	r3, [r7, #20]
 8005d58:	e006      	b.n	8005d68 <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 f919 	bl	8006f94 <USBD_CtlError>
        ret = USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	75fb      	strb	r3, [r7, #23]
        break;
 8005d66:	e037      	b.n	8005dd8 <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d68:	8abb      	ldrh	r3, [r7, #20]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6939      	ldr	r1, [r7, #16]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 f980 	bl	8007074 <USBD_CtlSendData>
      break;
 8005d74:	e030      	b.n	8005dd8 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d107      	bne.n	8005d92 <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3308      	adds	r3, #8
 8005d86:	2201      	movs	r2, #1
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 f972 	bl	8007074 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005d90:	e022      	b.n	8005dd8 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f001 f8fd 	bl	8006f94 <USBD_CtlError>
        ret = USBD_FAIL;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9e:	e01b      	b.n	8005dd8 <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d106      	bne.n	8005dba <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	885b      	ldrh	r3, [r3, #2]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005db8:	e00e      	b.n	8005dd8 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f001 f8e9 	bl	8006f94 <USBD_CtlError>
        ret = USBD_FAIL;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc6:	e007      	b.n	8005dd8 <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f001 f8e2 	bl	8006f94 <USBD_CtlError>
      ret = USBD_FAIL;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd4:	e000      	b.n	8005dd8 <USBD_HID_Setup+0x1e4>
      break;
 8005dd6:	bf00      	nop
    }
    break;
 8005dd8:	e006      	b.n	8005de8 <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 f8d9 	bl	8006f94 <USBD_CtlError>
    ret = USBD_FAIL;
 8005de2:	2303      	movs	r3, #3
 8005de4:	75fb      	strb	r3, [r7, #23]
    break;
 8005de6:	bf00      	nop
  }

  return (uint8_t)ret;
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000238 	.word	0x20000238
 8005df8:	20000220 	.word	0x20000220

08005dfc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2222      	movs	r2, #34	; 0x22
 8005e08:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8005e0a:	4b03      	ldr	r3, [pc, #12]	; (8005e18 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	200001d8 	.word	0x200001d8

08005e1c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2222      	movs	r2, #34	; 0x22
 8005e28:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8005e2a:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	200001fc 	.word	0x200001fc

08005e3c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2222      	movs	r2, #34	; 0x22
 8005e48:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8005e4a:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bc80      	pop	{r7}
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	200001d8 	.word	0x200001d8

08005e5c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData_HID_Mouse)->state = HID_IDLE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8005e6e:	2200      	movs	r2, #0
 8005e70:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr
	...

08005e80 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	220a      	movs	r2, #10
 8005e8c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005e8e:	4b03      	ldr	r3, [pc, #12]	; (8005e9c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bc80      	pop	{r7}
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	2000022c 	.word	0x2000022c

08005ea0 <USBD_HID_Mouse_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_Mouse_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData_HID_Mouse;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8005eb4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <USBD_HID_Mouse_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e014      	b.n	8005eea <USBD_HID_Mouse_SendReport+0x4a>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d10d      	bne.n	8005ee8 <USBD_HID_Mouse_SendReport+0x48>
  {
    if (hhid->state == HID_IDLE)
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	7b1b      	ldrb	r3, [r3, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <USBD_HID_Mouse_SendReport+0x48>
    {
      hhid->state = HID_BUSY;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_MOUSE_IN_EP, report, len);
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <USBD_HID_Mouse_SendReport+0x54>)
 8005edc:	7819      	ldrb	r1, [r3, #0]
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f001 faf9 	bl	80074da <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	2000019b 	.word	0x2000019b

08005ef8 <USBD_Update_HID_Mouse_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_Mouse_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	4608      	mov	r0, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	70fb      	strb	r3, [r7, #3]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	70bb      	strb	r3, [r7, #2]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	330b      	adds	r3, #11
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3311      	adds	r3, #17
 8005f1e:	787a      	ldrb	r2, [r7, #1]
 8005f20:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	331d      	adds	r3, #29
 8005f26:	78ba      	ldrb	r2, [r7, #2]
 8005f28:	701a      	strb	r2, [r3, #0]

  HID_MOUSE_IN_EP = in_ep;
 8005f2a:	4a07      	ldr	r2, [pc, #28]	; (8005f48 <USBD_Update_HID_Mouse_DESC+0x50>)
 8005f2c:	78bb      	ldrb	r3, [r7, #2]
 8005f2e:	7013      	strb	r3, [r2, #0]
  HID_MOUSE_ITF_NBR = itf_no;
 8005f30:	4a06      	ldr	r2, [pc, #24]	; (8005f4c <USBD_Update_HID_Mouse_DESC+0x54>)
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	7013      	strb	r3, [r2, #0]
  HID_MOUSE_STR_DESC_IDX = str_idx;
 8005f36:	4a06      	ldr	r2, [pc, #24]	; (8005f50 <USBD_Update_HID_Mouse_DESC+0x58>)
 8005f38:	787b      	ldrb	r3, [r7, #1]
 8005f3a:	7013      	strb	r3, [r2, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	2000019b 	.word	0x2000019b
 8005f4c:	20000300 	.word	0x20000300
 8005f50:	20000301 	.word	0x20000301

08005f54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e01b      	b.n	8005fa4 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	79fa      	ldrb	r2, [r7, #7]
 8005f96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f001 f961 	bl	8007260 <USBD_LL_Init>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e02d      	b.n	8006020 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	7c1b      	ldrb	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d112      	bne.n	8005ffa <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01e      	beq.n	800601e <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	f107 020e 	add.w	r2, r7, #14
 8005fec:	4610      	mov	r0, r2
 8005fee:	4798      	blx	r3
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 8005ff8:	e011      	b.n	800601e <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00b      	beq.n	800601e <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	f107 020e 	add.w	r2, r7, #14
 8006012:	4610      	mov	r0, r2
 8006014:	4798      	blx	r3
 8006016:	4602      	mov	r2, r0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 f969 	bl	8007308 <USBD_LL_Start>
 8006036:	4603      	mov	r3, r0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006060:	2303      	movs	r3, #3
 8006062:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	78fa      	ldrb	r2, [r7, #3]
 8006078:	4611      	mov	r1, r2
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	4611      	mov	r1, r2
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
  }

  return USBD_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 ff26 	bl	8006f20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060e2:	461a      	mov	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d01a      	beq.n	800612e <USBD_LL_SetupStage+0x72>
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d822      	bhi.n	8006142 <USBD_LL_SetupStage+0x86>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <USBD_LL_SetupStage+0x4a>
 8006100:	2b01      	cmp	r3, #1
 8006102:	d00a      	beq.n	800611a <USBD_LL_SetupStage+0x5e>
 8006104:	e01d      	b.n	8006142 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f9e6 	bl	80064e0 <USBD_StdDevReq>
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]
      break;
 8006118:	e020      	b.n	800615c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa4a 	bl	80065bc <USBD_StdItfReq>
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
      break;
 800612c:	e016      	b.n	800615c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fa89 	bl	800664e <USBD_StdEPReq>
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]
      break;
 8006140:	e00c      	b.n	800615c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006148:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800614c:	b2db      	uxtb	r3, r3
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 f939 	bl	80073c8 <USBD_LL_StallEP>
 8006156:	4603      	mov	r3, r0
 8006158:	73fb      	strb	r3, [r7, #15]
      break;
 800615a:	bf00      	nop
  }

  return ret;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b086      	sub	sp, #24
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	460b      	mov	r3, r1
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006174:	7afb      	ldrb	r3, [r7, #11]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d138      	bne.n	80061ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006180:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006188:	2b03      	cmp	r3, #3
 800618a:	d14a      	bne.n	8006222 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d913      	bls.n	80061c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	1ad2      	subs	r2, r2, r3
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	4293      	cmp	r3, r2
 80061b0:	bf28      	it	cs
 80061b2:	4613      	movcs	r3, r2
 80061b4:	461a      	mov	r2, r3
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 ff87 	bl	80070cc <USBD_CtlContinueRx>
 80061be:	e030      	b.n	8006222 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d10b      	bne.n	80061e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 ff82 	bl	80070ee <USBD_CtlSendStatus>
 80061ea:	e01a      	b.n	8006222 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d114      	bne.n	8006222 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	7afa      	ldrb	r2, [r7, #11]
 800620e:	4611      	mov	r1, r2
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	4798      	blx	r3
 8006214:	4603      	mov	r3, r0
 8006216:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	e000      	b.n	8006224 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	460b      	mov	r3, r1
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800623a:	7afb      	ldrb	r3, [r7, #11]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d16b      	bne.n	8006318 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3314      	adds	r3, #20
 8006244:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800624c:	2b02      	cmp	r3, #2
 800624e:	d156      	bne.n	80062fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	429a      	cmp	r2, r3
 800625a:	d914      	bls.n	8006286 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	1ad2      	subs	r2, r2, r3
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	461a      	mov	r2, r3
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 ff19 	bl	80070aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006278:	2300      	movs	r3, #0
 800627a:	2200      	movs	r2, #0
 800627c:	2100      	movs	r1, #0
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f001 f94c 	bl	800751c <USBD_LL_PrepareReceive>
 8006284:	e03b      	b.n	80062fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	429a      	cmp	r2, r3
 8006290:	d11c      	bne.n	80062cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800629a:	429a      	cmp	r2, r3
 800629c:	d316      	bcc.n	80062cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d20f      	bcs.n	80062cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062ac:	2200      	movs	r2, #0
 80062ae:	2100      	movs	r1, #0
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fefa 	bl	80070aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062be:	2300      	movs	r3, #0
 80062c0:	2200      	movs	r2, #0
 80062c2:	2100      	movs	r1, #0
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f001 f929 	bl	800751c <USBD_LL_PrepareReceive>
 80062ca:	e018      	b.n	80062fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d10b      	bne.n	80062f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062f0:	2180      	movs	r1, #128	; 0x80
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f001 f868 	bl	80073c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 ff0b 	bl	8007114 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006304:	2b01      	cmp	r3, #1
 8006306:	d122      	bne.n	800634e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff fe99 	bl	8006040 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006316:	e01a      	b.n	800634e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b03      	cmp	r3, #3
 8006322:	d114      	bne.n	800634e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00e      	beq.n	800634e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	7afa      	ldrb	r2, [r7, #11]
 800633a:	4611      	mov	r1, r2
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	4798      	blx	r3
 8006340:	4603      	mov	r3, r0
 8006342:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	e000      	b.n	8006350 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006388:	2303      	movs	r3, #3
 800638a:	e02a      	b.n	80063e2 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d009      	beq.n	80063ac <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6852      	ldr	r2, [r2, #4]
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	4611      	mov	r1, r2
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063ac:	2340      	movs	r3, #64	; 0x40
 80063ae:	2200      	movs	r2, #0
 80063b0:	2100      	movs	r1, #0
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 ffc3 	bl	800733e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2240      	movs	r2, #64	; 0x40
 80063c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063c8:	2340      	movs	r3, #64	; 0x40
 80063ca:	2200      	movs	r2, #0
 80063cc:	2180      	movs	r1, #128	; 0x80
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 ffb5 	bl	800733e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2240      	movs	r2, #64	; 0x40
 80063de:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	460b      	mov	r3, r1
 80063f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	78fa      	ldrb	r2, [r7, #3]
 80063fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	bc80      	pop	{r7}
 8006406:	4770      	bx	lr

08006408 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006416:	b2da      	uxtb	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2204      	movs	r2, #4
 8006422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr

08006432 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b04      	cmp	r3, #4
 8006444:	d106      	bne.n	8006454 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800644c:	b2da      	uxtb	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr

08006460 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006472:	2303      	movs	r3, #3
 8006474:	e012      	b.n	800649c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b03      	cmp	r3, #3
 8006480:	d10b      	bne.n	800649a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	3301      	adds	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064c2:	8a3b      	ldrh	r3, [r7, #16]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	b21a      	sxth	r2, r3
 80064c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	b21b      	sxth	r3, r3
 80064d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064d2:	89fb      	ldrh	r3, [r7, #14]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr
	...

080064e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064f6:	2b40      	cmp	r3, #64	; 0x40
 80064f8:	d005      	beq.n	8006506 <USBD_StdDevReq+0x26>
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d853      	bhi.n	80065a6 <USBD_StdDevReq+0xc6>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00b      	beq.n	800651a <USBD_StdDevReq+0x3a>
 8006502:	2b20      	cmp	r3, #32
 8006504:	d14f      	bne.n	80065a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]
      break;
 8006518:	e04a      	b.n	80065b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	785b      	ldrb	r3, [r3, #1]
 800651e:	2b09      	cmp	r3, #9
 8006520:	d83b      	bhi.n	800659a <USBD_StdDevReq+0xba>
 8006522:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <USBD_StdDevReq+0x48>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	0800657d 	.word	0x0800657d
 800652c:	08006591 	.word	0x08006591
 8006530:	0800659b 	.word	0x0800659b
 8006534:	08006587 	.word	0x08006587
 8006538:	0800659b 	.word	0x0800659b
 800653c:	0800655b 	.word	0x0800655b
 8006540:	08006551 	.word	0x08006551
 8006544:	0800659b 	.word	0x0800659b
 8006548:	08006573 	.word	0x08006573
 800654c:	08006565 	.word	0x08006565
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f9de 	bl	8006914 <USBD_GetDescriptor>
          break;
 8006558:	e024      	b.n	80065a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fb55 	bl	8006c0c <USBD_SetAddress>
          break;
 8006562:	e01f      	b.n	80065a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fb94 	bl	8006c94 <USBD_SetConfig>
 800656c:	4603      	mov	r3, r0
 800656e:	73fb      	strb	r3, [r7, #15]
          break;
 8006570:	e018      	b.n	80065a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fc33 	bl	8006de0 <USBD_GetConfig>
          break;
 800657a:	e013      	b.n	80065a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fc64 	bl	8006e4c <USBD_GetStatus>
          break;
 8006584:	e00e      	b.n	80065a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fc93 	bl	8006eb4 <USBD_SetFeature>
          break;
 800658e:	e009      	b.n	80065a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fca2 	bl	8006edc <USBD_ClrFeature>
          break;
 8006598:	e004      	b.n	80065a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fcf9 	bl	8006f94 <USBD_CtlError>
          break;
 80065a2:	bf00      	nop
      }
      break;
 80065a4:	e004      	b.n	80065b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fcf3 	bl	8006f94 <USBD_CtlError>
      break;
 80065ae:	bf00      	nop
  }

  return ret;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop

080065bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d005      	beq.n	80065e2 <USBD_StdItfReq+0x26>
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d82f      	bhi.n	800663a <USBD_StdItfReq+0x7e>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <USBD_StdItfReq+0x26>
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d12b      	bne.n	800663a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d81d      	bhi.n	800662c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	889b      	ldrh	r3, [r3, #4]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b0f      	cmp	r3, #15
 80065f8:	d813      	bhi.n	8006622 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	88db      	ldrh	r3, [r3, #6]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d110      	bne.n	8006636 <USBD_StdItfReq+0x7a>
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10d      	bne.n	8006636 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fd67 	bl	80070ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006620:	e009      	b.n	8006636 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fcb5 	bl	8006f94 <USBD_CtlError>
          break;
 800662a:	e004      	b.n	8006636 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fcb0 	bl	8006f94 <USBD_CtlError>
          break;
 8006634:	e000      	b.n	8006638 <USBD_StdItfReq+0x7c>
          break;
 8006636:	bf00      	nop
      }
      break;
 8006638:	e004      	b.n	8006644 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fca9 	bl	8006f94 <USBD_CtlError>
      break;
 8006642:	bf00      	nop
  }

  return ret;
 8006644:	7bfb      	ldrb	r3, [r7, #15]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	889b      	ldrh	r3, [r3, #4]
 8006660:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800666a:	2b40      	cmp	r3, #64	; 0x40
 800666c:	d007      	beq.n	800667e <USBD_StdEPReq+0x30>
 800666e:	2b40      	cmp	r3, #64	; 0x40
 8006670:	f200 8145 	bhi.w	80068fe <USBD_StdEPReq+0x2b0>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00c      	beq.n	8006692 <USBD_StdEPReq+0x44>
 8006678:	2b20      	cmp	r3, #32
 800667a:	f040 8140 	bne.w	80068fe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
 800668c:	4603      	mov	r3, r0
 800668e:	73fb      	strb	r3, [r7, #15]
      break;
 8006690:	e13a      	b.n	8006908 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	2b03      	cmp	r3, #3
 8006698:	d007      	beq.n	80066aa <USBD_StdEPReq+0x5c>
 800669a:	2b03      	cmp	r3, #3
 800669c:	f300 8129 	bgt.w	80068f2 <USBD_StdEPReq+0x2a4>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d07f      	beq.n	80067a4 <USBD_StdEPReq+0x156>
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d03c      	beq.n	8006722 <USBD_StdEPReq+0xd4>
 80066a8:	e123      	b.n	80068f2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d002      	beq.n	80066bc <USBD_StdEPReq+0x6e>
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d016      	beq.n	80066e8 <USBD_StdEPReq+0x9a>
 80066ba:	e02c      	b.n	8006716 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00d      	beq.n	80066de <USBD_StdEPReq+0x90>
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b80      	cmp	r3, #128	; 0x80
 80066c6:	d00a      	beq.n	80066de <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fe7b 	bl	80073c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066d2:	2180      	movs	r1, #128	; 0x80
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fe77 	bl	80073c8 <USBD_LL_StallEP>
 80066da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066dc:	e020      	b.n	8006720 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fc57 	bl	8006f94 <USBD_CtlError>
              break;
 80066e6:	e01b      	b.n	8006720 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	885b      	ldrh	r3, [r3, #2]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10e      	bne.n	800670e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00b      	beq.n	800670e <USBD_StdEPReq+0xc0>
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	2b80      	cmp	r3, #128	; 0x80
 80066fa:	d008      	beq.n	800670e <USBD_StdEPReq+0xc0>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	88db      	ldrh	r3, [r3, #6]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d104      	bne.n	800670e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fe5d 	bl	80073c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fced 	bl	80070ee <USBD_CtlSendStatus>

              break;
 8006714:	e004      	b.n	8006720 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fc3b 	bl	8006f94 <USBD_CtlError>
              break;
 800671e:	bf00      	nop
          }
          break;
 8006720:	e0ec      	b.n	80068fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d002      	beq.n	8006734 <USBD_StdEPReq+0xe6>
 800672e:	2b03      	cmp	r3, #3
 8006730:	d016      	beq.n	8006760 <USBD_StdEPReq+0x112>
 8006732:	e030      	b.n	8006796 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00d      	beq.n	8006756 <USBD_StdEPReq+0x108>
 800673a:	7bbb      	ldrb	r3, [r7, #14]
 800673c:	2b80      	cmp	r3, #128	; 0x80
 800673e:	d00a      	beq.n	8006756 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fe3f 	bl	80073c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800674a:	2180      	movs	r1, #128	; 0x80
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fe3b 	bl	80073c8 <USBD_LL_StallEP>
 8006752:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006754:	e025      	b.n	80067a2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fc1b 	bl	8006f94 <USBD_CtlError>
              break;
 800675e:	e020      	b.n	80067a2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	885b      	ldrh	r3, [r3, #2]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d11b      	bne.n	80067a0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800676e:	2b00      	cmp	r3, #0
 8006770:	d004      	beq.n	800677c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fe45 	bl	8007406 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fcb6 	bl	80070ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006794:	e004      	b.n	80067a0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fbfb 	bl	8006f94 <USBD_CtlError>
              break;
 800679e:	e000      	b.n	80067a2 <USBD_StdEPReq+0x154>
              break;
 80067a0:	bf00      	nop
          }
          break;
 80067a2:	e0ab      	b.n	80068fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d002      	beq.n	80067b6 <USBD_StdEPReq+0x168>
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d032      	beq.n	800681a <USBD_StdEPReq+0x1cc>
 80067b4:	e097      	b.n	80068e6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067b6:	7bbb      	ldrb	r3, [r7, #14]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d007      	beq.n	80067cc <USBD_StdEPReq+0x17e>
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	2b80      	cmp	r3, #128	; 0x80
 80067c0:	d004      	beq.n	80067cc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fbe5 	bl	8006f94 <USBD_CtlError>
                break;
 80067ca:	e091      	b.n	80068f0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	da0b      	bge.n	80067ec <USBD_StdEPReq+0x19e>
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	3310      	adds	r3, #16
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	4413      	add	r3, r2
 80067e8:	3304      	adds	r3, #4
 80067ea:	e00b      	b.n	8006804 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	4413      	add	r3, r2
 8006802:	3304      	adds	r3, #4
 8006804:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2202      	movs	r2, #2
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fc2e 	bl	8007074 <USBD_CtlSendData>
              break;
 8006818:	e06a      	b.n	80068f0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800681a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800681e:	2b00      	cmp	r3, #0
 8006820:	da11      	bge.n	8006846 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006822:	7bbb      	ldrb	r3, [r7, #14]
 8006824:	f003 020f 	and.w	r2, r3, #15
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	3324      	adds	r3, #36	; 0x24
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d117      	bne.n	800686c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fba8 	bl	8006f94 <USBD_CtlError>
                  break;
 8006844:	e054      	b.n	80068f0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	f003 020f 	and.w	r2, r3, #15
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	440b      	add	r3, r1
 8006858:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d104      	bne.n	800686c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fb95 	bl	8006f94 <USBD_CtlError>
                  break;
 800686a:	e041      	b.n	80068f0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800686c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006870:	2b00      	cmp	r3, #0
 8006872:	da0b      	bge.n	800688c <USBD_StdEPReq+0x23e>
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	3310      	adds	r3, #16
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4413      	add	r3, r2
 8006888:	3304      	adds	r3, #4
 800688a:	e00b      	b.n	80068a4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800688c:	7bbb      	ldrb	r3, [r7, #14]
 800688e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	4413      	add	r3, r2
 80068a2:	3304      	adds	r3, #4
 80068a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <USBD_StdEPReq+0x264>
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	2b80      	cmp	r3, #128	; 0x80
 80068b0:	d103      	bne.n	80068ba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e00e      	b.n	80068d8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068ba:	7bbb      	ldrb	r3, [r7, #14]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fdc0 	bl	8007444 <USBD_LL_IsStallEP>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	e002      	b.n	80068d8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2202      	movs	r2, #2
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fbc8 	bl	8007074 <USBD_CtlSendData>
              break;
 80068e4:	e004      	b.n	80068f0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fb53 	bl	8006f94 <USBD_CtlError>
              break;
 80068ee:	bf00      	nop
          }
          break;
 80068f0:	e004      	b.n	80068fc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fb4d 	bl	8006f94 <USBD_CtlError>
          break;
 80068fa:	bf00      	nop
      }
      break;
 80068fc:	e004      	b.n	8006908 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fb47 	bl	8006f94 <USBD_CtlError>
      break;
 8006906:	bf00      	nop
  }

  return ret;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	885b      	ldrh	r3, [r3, #2]
 800692e:	0a1b      	lsrs	r3, r3, #8
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	2b06      	cmp	r3, #6
 8006936:	f200 813b 	bhi.w	8006bb0 <USBD_GetDescriptor+0x29c>
 800693a:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <USBD_GetDescriptor+0x2c>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	0800695d 	.word	0x0800695d
 8006944:	08006975 	.word	0x08006975
 8006948:	080069b5 	.word	0x080069b5
 800694c:	08006bb1 	.word	0x08006bb1
 8006950:	08006bb1 	.word	0x08006bb1
 8006954:	08006b51 	.word	0x08006b51
 8006958:	08006b7d 	.word	0x08006b7d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	7c12      	ldrb	r2, [r2, #16]
 8006968:	f107 0108 	add.w	r1, r7, #8
 800696c:	4610      	mov	r0, r2
 800696e:	4798      	blx	r3
 8006970:	60f8      	str	r0, [r7, #12]
      break;
 8006972:	e125      	b.n	8006bc0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	7c1b      	ldrb	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10d      	bne.n	8006998 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	f107 0208 	add.w	r2, r7, #8
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
 800698c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3301      	adds	r3, #1
 8006992:	2202      	movs	r2, #2
 8006994:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006996:	e113      	b.n	8006bc0 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	f107 0208 	add.w	r2, r7, #8
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3301      	adds	r3, #1
 80069ae:	2202      	movs	r2, #2
 80069b0:	701a      	strb	r2, [r3, #0]
      break;
 80069b2:	e105      	b.n	8006bc0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	885b      	ldrh	r3, [r3, #2]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	f200 80ac 	bhi.w	8006b18 <USBD_GetDescriptor+0x204>
 80069c0:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <USBD_GetDescriptor+0xb4>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	080069e1 	.word	0x080069e1
 80069cc:	08006a15 	.word	0x08006a15
 80069d0:	08006a49 	.word	0x08006a49
 80069d4:	08006a7d 	.word	0x08006a7d
 80069d8:	08006ab1 	.word	0x08006ab1
 80069dc:	08006ae5 	.word	0x08006ae5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	7c12      	ldrb	r2, [r2, #16]
 80069f8:	f107 0108 	add.w	r1, r7, #8
 80069fc:	4610      	mov	r0, r2
 80069fe:	4798      	blx	r3
 8006a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a02:	e0a4      	b.n	8006b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fac4 	bl	8006f94 <USBD_CtlError>
            err++;
 8006a0c:	7afb      	ldrb	r3, [r7, #11]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	72fb      	strb	r3, [r7, #11]
          break;
 8006a12:	e09c      	b.n	8006b4e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	7c12      	ldrb	r2, [r2, #16]
 8006a2c:	f107 0108 	add.w	r1, r7, #8
 8006a30:	4610      	mov	r0, r2
 8006a32:	4798      	blx	r3
 8006a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a36:	e08a      	b.n	8006b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 faaa 	bl	8006f94 <USBD_CtlError>
            err++;
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	3301      	adds	r3, #1
 8006a44:	72fb      	strb	r3, [r7, #11]
          break;
 8006a46:	e082      	b.n	8006b4e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	7c12      	ldrb	r2, [r2, #16]
 8006a60:	f107 0108 	add.w	r1, r7, #8
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a6a:	e070      	b.n	8006b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa90 	bl	8006f94 <USBD_CtlError>
            err++;
 8006a74:	7afb      	ldrb	r3, [r7, #11]
 8006a76:	3301      	adds	r3, #1
 8006a78:	72fb      	strb	r3, [r7, #11]
          break;
 8006a7a:	e068      	b.n	8006b4e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	7c12      	ldrb	r2, [r2, #16]
 8006a94:	f107 0108 	add.w	r1, r7, #8
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4798      	blx	r3
 8006a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a9e:	e056      	b.n	8006b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa76 	bl	8006f94 <USBD_CtlError>
            err++;
 8006aa8:	7afb      	ldrb	r3, [r7, #11]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	72fb      	strb	r3, [r7, #11]
          break;
 8006aae:	e04e      	b.n	8006b4e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	7c12      	ldrb	r2, [r2, #16]
 8006ac8:	f107 0108 	add.w	r1, r7, #8
 8006acc:	4610      	mov	r0, r2
 8006ace:	4798      	blx	r3
 8006ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ad2:	e03c      	b.n	8006b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fa5c 	bl	8006f94 <USBD_CtlError>
            err++;
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ae2:	e034      	b.n	8006b4e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	7c12      	ldrb	r2, [r2, #16]
 8006afc:	f107 0108 	add.w	r1, r7, #8
 8006b00:	4610      	mov	r0, r2
 8006b02:	4798      	blx	r3
 8006b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b06:	e022      	b.n	8006b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa42 	bl	8006f94 <USBD_CtlError>
            err++;
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	3301      	adds	r3, #1
 8006b14:	72fb      	strb	r3, [r7, #11]
          break;
 8006b16:	e01a      	b.n	8006b4e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00c      	beq.n	8006b3e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	8852      	ldrh	r2, [r2, #2]
 8006b30:	b2d1      	uxtb	r1, r2
 8006b32:	f107 0208 	add.w	r2, r7, #8
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	4798      	blx	r3
 8006b3a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8006b3c:	e006      	b.n	8006b4c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fa27 	bl	8006f94 <USBD_CtlError>
            err++;
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	72fb      	strb	r3, [r7, #11]
          break;
 8006b4c:	bf00      	nop
      }
      break;
 8006b4e:	e037      	b.n	8006bc0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	7c1b      	ldrb	r3, [r3, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d109      	bne.n	8006b6c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b60:	f107 0208 	add.w	r2, r7, #8
 8006b64:	4610      	mov	r0, r2
 8006b66:	4798      	blx	r3
 8006b68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b6a:	e029      	b.n	8006bc0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa10 	bl	8006f94 <USBD_CtlError>
        err++;
 8006b74:	7afb      	ldrb	r3, [r7, #11]
 8006b76:	3301      	adds	r3, #1
 8006b78:	72fb      	strb	r3, [r7, #11]
      break;
 8006b7a:	e021      	b.n	8006bc0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	7c1b      	ldrb	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10d      	bne.n	8006ba0 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8c:	f107 0208 	add.w	r2, r7, #8
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
 8006b94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	2207      	movs	r2, #7
 8006b9c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b9e:	e00f      	b.n	8006bc0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f9f6 	bl	8006f94 <USBD_CtlError>
        err++;
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	3301      	adds	r3, #1
 8006bac:	72fb      	strb	r3, [r7, #11]
      break;
 8006bae:	e007      	b.n	8006bc0 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f9ee 	bl	8006f94 <USBD_CtlError>
      err++;
 8006bb8:	7afb      	ldrb	r3, [r7, #11]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	72fb      	strb	r3, [r7, #11]
      break;
 8006bbe:	bf00      	nop
  }

  if (err != 0U)
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d11e      	bne.n	8006c04 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	88db      	ldrh	r3, [r3, #6]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d016      	beq.n	8006bfc <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8006bce:	893b      	ldrh	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00e      	beq.n	8006bf2 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	88da      	ldrh	r2, [r3, #6]
 8006bd8:	893b      	ldrh	r3, [r7, #8]
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	bf28      	it	cs
 8006bde:	4613      	movcs	r3, r2
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006be4:	893b      	ldrh	r3, [r7, #8]
 8006be6:	461a      	mov	r2, r3
 8006be8:	68f9      	ldr	r1, [r7, #12]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa42 	bl	8007074 <USBD_CtlSendData>
 8006bf0:	e009      	b.n	8006c06 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f9cd 	bl	8006f94 <USBD_CtlError>
 8006bfa:	e004      	b.n	8006c06 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa76 	bl	80070ee <USBD_CtlSendStatus>
 8006c02:	e000      	b.n	8006c06 <USBD_GetDescriptor+0x2f2>
    return;
 8006c04:	bf00      	nop
  }
}
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	889b      	ldrh	r3, [r3, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d131      	bne.n	8006c82 <USBD_SetAddress+0x76>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	88db      	ldrh	r3, [r3, #6]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d12d      	bne.n	8006c82 <USBD_SetAddress+0x76>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	885b      	ldrh	r3, [r3, #2]
 8006c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c2c:	d829      	bhi.n	8006c82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	885b      	ldrh	r3, [r3, #2]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d104      	bne.n	8006c50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f9a3 	bl	8006f94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4e:	e01d      	b.n	8006c8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	7bfa      	ldrb	r2, [r7, #15]
 8006c54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fc1d 	bl	800749c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa43 	bl	80070ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d004      	beq.n	8006c78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c76:	e009      	b.n	8006c8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c80:	e004      	b.n	8006c8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f985 	bl	8006f94 <USBD_CtlError>
  }
}
 8006c8a:	bf00      	nop
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	885b      	ldrh	r3, [r3, #2]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	4b4c      	ldr	r3, [pc, #304]	; (8006ddc <USBD_SetConfig+0x148>)
 8006caa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cac:	4b4b      	ldr	r3, [pc, #300]	; (8006ddc <USBD_SetConfig+0x148>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d905      	bls.n	8006cc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f96c 	bl	8006f94 <USBD_CtlError>
    return USBD_FAIL;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e088      	b.n	8006dd2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d002      	beq.n	8006cd2 <USBD_SetConfig+0x3e>
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d025      	beq.n	8006d1c <USBD_SetConfig+0x88>
 8006cd0:	e071      	b.n	8006db6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006cd2:	4b42      	ldr	r3, [pc, #264]	; (8006ddc <USBD_SetConfig+0x148>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01c      	beq.n	8006d14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006cda:	4b40      	ldr	r3, [pc, #256]	; (8006ddc <USBD_SetConfig+0x148>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ce4:	4b3d      	ldr	r3, [pc, #244]	; (8006ddc <USBD_SetConfig+0x148>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff f9b2 	bl	8006054 <USBD_SetClassConfig>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d004      	beq.n	8006d04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f949 	bl	8006f94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d02:	e065      	b.n	8006dd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f9f2 	bl	80070ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d12:	e05d      	b.n	8006dd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f9ea 	bl	80070ee <USBD_CtlSendStatus>
      break;
 8006d1a:	e059      	b.n	8006dd0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d1c:	4b2f      	ldr	r3, [pc, #188]	; (8006ddc <USBD_SetConfig+0x148>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d112      	bne.n	8006d4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006d2c:	4b2b      	ldr	r3, [pc, #172]	; (8006ddc <USBD_SetConfig+0x148>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d36:	4b29      	ldr	r3, [pc, #164]	; (8006ddc <USBD_SetConfig+0x148>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff f9a5 	bl	800608c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f9d3 	bl	80070ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d48:	e042      	b.n	8006dd0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <USBD_SetConfig+0x148>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d02a      	beq.n	8006dae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff f993 	bl	800608c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d66:	4b1d      	ldr	r3, [pc, #116]	; (8006ddc <USBD_SetConfig+0x148>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d70:	4b1a      	ldr	r3, [pc, #104]	; (8006ddc <USBD_SetConfig+0x148>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff f96c 	bl	8006054 <USBD_SetClassConfig>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00f      	beq.n	8006da6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f903 	bl	8006f94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff f978 	bl	800608c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006da4:	e014      	b.n	8006dd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9a1 	bl	80070ee <USBD_CtlSendStatus>
      break;
 8006dac:	e010      	b.n	8006dd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f99d 	bl	80070ee <USBD_CtlSendStatus>
      break;
 8006db4:	e00c      	b.n	8006dd0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f8eb 	bl	8006f94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dbe:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <USBD_SetConfig+0x148>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff f961 	bl	800608c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8006dce:	bf00      	nop
  }

  return ret;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000314 	.word	0x20000314

08006de0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	88db      	ldrh	r3, [r3, #6]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d004      	beq.n	8006dfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f8cd 	bl	8006f94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006dfa:	e023      	b.n	8006e44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	dc02      	bgt.n	8006e0e <USBD_GetConfig+0x2e>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dc03      	bgt.n	8006e14 <USBD_GetConfig+0x34>
 8006e0c:	e015      	b.n	8006e3a <USBD_GetConfig+0x5a>
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d00b      	beq.n	8006e2a <USBD_GetConfig+0x4a>
 8006e12:	e012      	b.n	8006e3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f926 	bl	8007074 <USBD_CtlSendData>
        break;
 8006e28:	e00c      	b.n	8006e44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	2201      	movs	r2, #1
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f91e 	bl	8007074 <USBD_CtlSendData>
        break;
 8006e38:	e004      	b.n	8006e44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f8a9 	bl	8006f94 <USBD_CtlError>
        break;
 8006e42:	bf00      	nop
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d81e      	bhi.n	8006ea2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	88db      	ldrh	r3, [r3, #6]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d004      	beq.n	8006e76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f890 	bl	8006f94 <USBD_CtlError>
        break;
 8006e74:	e01a      	b.n	8006eac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f043 0202 	orr.w	r2, r3, #2
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	330c      	adds	r3, #12
 8006e96:	2202      	movs	r2, #2
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f8ea 	bl	8007074 <USBD_CtlSendData>
      break;
 8006ea0:	e004      	b.n	8006eac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f875 	bl	8006f94 <USBD_CtlError>
      break;
 8006eaa:	bf00      	nop
  }
}
 8006eac:	bf00      	nop
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	885b      	ldrh	r3, [r3, #2]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d106      	bne.n	8006ed4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f90d 	bl	80070ee <USBD_CtlSendStatus>
  }
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d80b      	bhi.n	8006f0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	885b      	ldrh	r3, [r3, #2]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d10c      	bne.n	8006f16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f8f2 	bl	80070ee <USBD_CtlSendStatus>
      }
      break;
 8006f0a:	e004      	b.n	8006f16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f840 	bl	8006f94 <USBD_CtlError>
      break;
 8006f14:	e000      	b.n	8006f18 <USBD_ClrFeature+0x3c>
      break;
 8006f16:	bf00      	nop
  }
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	781a      	ldrb	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	781a      	ldrb	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f7ff faaa 	bl	80064a4 <SWAPBYTE>
 8006f50:	4603      	mov	r3, r0
 8006f52:	461a      	mov	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff fa9d 	bl	80064a4 <SWAPBYTE>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3301      	adds	r3, #1
 8006f76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7ff fa90 	bl	80064a4 <SWAPBYTE>
 8006f84:	4603      	mov	r3, r0
 8006f86:	461a      	mov	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	80da      	strh	r2, [r3, #6]
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f9e:	2180      	movs	r1, #128	; 0x80
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fa11 	bl	80073c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fa0d 	bl	80073c8 <USBD_LL_StallEP>
}
 8006fae:	bf00      	nop
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d036      	beq.n	800703a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006fd0:	6938      	ldr	r0, [r7, #16]
 8006fd2:	f000 f836 	bl	8007042 <USBD_GetLen>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	3301      	adds	r3, #1
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	4413      	add	r3, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	7812      	ldrb	r2, [r2, #0]
 8006fee:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	701a      	strb	r2, [r3, #0]
  idx++;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	3301      	adds	r3, #1
 8007004:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007006:	e013      	b.n	8007030 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	4413      	add	r3, r2
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	7812      	ldrb	r2, [r2, #0]
 8007012:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	3301      	adds	r3, #1
 8007018:	613b      	str	r3, [r7, #16]
    idx++;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	3301      	adds	r3, #1
 800701e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	4413      	add	r3, r2
 8007026:	2200      	movs	r2, #0
 8007028:	701a      	strb	r2, [r3, #0]
    idx++;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
 800702c:	3301      	adds	r3, #1
 800702e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e7      	bne.n	8007008 <USBD_GetString+0x52>
 8007038:	e000      	b.n	800703c <USBD_GetString+0x86>
    return;
 800703a:	bf00      	nop
  }
}
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007052:	e005      	b.n	8007060 <USBD_GetLen+0x1e>
  {
    len++;
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	3301      	adds	r3, #1
 8007058:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	3301      	adds	r3, #1
 800705e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f5      	bne.n	8007054 <USBD_GetLen+0x12>
  }

  return len;
 8007068:	7bfb      	ldrb	r3, [r7, #15]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr

08007074 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2202      	movs	r2, #2
 8007084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	2100      	movs	r1, #0
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fa1d 	bl	80074da <USBD_LL_Transmit>

  return USBD_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	2100      	movs	r1, #0
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 fa0c 	bl	80074da <USBD_LL_Transmit>

  return USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	2100      	movs	r1, #0
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 fa1c 	bl	800751c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2204      	movs	r2, #4
 80070fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070fe:	2300      	movs	r3, #0
 8007100:	2200      	movs	r2, #0
 8007102:	2100      	movs	r1, #0
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f9e8 	bl	80074da <USBD_LL_Transmit>

  return USBD_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2205      	movs	r2, #5
 8007120:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007124:	2300      	movs	r3, #0
 8007126:	2200      	movs	r2, #0
 8007128:	2100      	movs	r1, #0
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f9f6 	bl	800751c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b082      	sub	sp, #8
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f7fe ffb3 	bl	80060bc <USBD_LL_SetupStage>
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007170:	78fa      	ldrb	r2, [r7, #3]
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	440b      	add	r3, r1
 800717e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	4619      	mov	r1, r3
 8007188:	f7fe ffed 	bl	8006166 <USBD_LL_DataOutStage>
}
 800718c:	bf00      	nop
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80071a6:	78fa      	ldrb	r2, [r7, #3]
 80071a8:	6879      	ldr	r1, [r7, #4]
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	440b      	add	r3, r1
 80071b4:	333c      	adds	r3, #60	; 0x3c
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	78fb      	ldrb	r3, [r7, #3]
 80071ba:	4619      	mov	r1, r3
 80071bc:	f7ff f836 	bl	800622c <USBD_LL_DataInStage>
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff f942 	bl	8006460 <USBD_LL_SOF>
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d102      	bne.n	80071fe <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
 80071fc:	e001      	b.n	8007202 <HAL_PCD_ResetCallback+0x1e>
    speed = USBD_SPEED_HIGH;
  }
  #endif
  else
  {
    Error_Handler();
 80071fe:	f7f9 f868 	bl	80002d2 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007208:	7bfa      	ldrb	r2, [r7, #15]
 800720a:	4611      	mov	r1, r2
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff f8ec 	bl	80063ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff f89d 	bl	8006358 <USBD_LL_Reset>
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b082      	sub	sp, #8
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff f8e7 	bl	8006408 <USBD_LL_Suspend>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
  }
#endif
  /* USER CODE END 2 */
}
 800723a:	bf00      	nop
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff f8ee 	bl	8006432 <USBD_LL_Resume>
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
	...

08007260 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
#endif
  }
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8007268:	4b23      	ldr	r3, [pc, #140]	; (80072f8 <USBD_LL_Init+0x98>)
 800726a:	4a24      	ldr	r2, [pc, #144]	; (80072fc <USBD_LL_Init+0x9c>)
 800726c:	601a      	str	r2, [r3, #0]
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#endif

  if (pdev->id == DEVICE_FS)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d13b      	bne.n	80072ee <USBD_LL_Init+0x8e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 8007276:	4b20      	ldr	r3, [pc, #128]	; (80072f8 <USBD_LL_Init+0x98>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
    pdev->pData = hpcd_USB_OTG_PTR;
 8007280:	4b1d      	ldr	r3, [pc, #116]	; (80072f8 <USBD_LL_Init+0x98>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310

    /* @see HAL_PCD_Init() usb_otg.c generated by cube **/

#if (STM32F1_DEVICE)
    /** Device is F1 or similar or if HAL_PCDEx_PMAConfig() is used by HAL driver */
    uint16_t pma_track = 0x40; /** PMA offset*/
 800728a:	2340      	movs	r3, #64	; 0x40
 800728c:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x00, PCD_SNG_BUF, pma_track);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8007294:	89fb      	ldrh	r3, [r7, #14]
 8007296:	2200      	movs	r2, #0
 8007298:	2100      	movs	r1, #0
 800729a:	f7fa ff08 	bl	80020ae <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 800729e:	89fb      	ldrh	r3, [r7, #14]
 80072a0:	3340      	adds	r3, #64	; 0x40
 80072a2:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x80, PCD_SNG_BUF, pma_track);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80072aa:	89fb      	ldrh	r3, [r7, #14]
 80072ac:	2200      	movs	r2, #0
 80072ae:	2180      	movs	r1, #128	; 0x80
 80072b0:	f7fa fefd 	bl	80020ae <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 80072b4:	89fb      	ldrh	r3, [r7, #14]
 80072b6:	3340      	adds	r3, #64	; 0x40
 80072b8:	81fb      	strh	r3, [r7, #14]
    pma_track += 48;
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_ECM_CMD_EP, PCD_SNG_BUF, pma_track);
    pma_track += 8;
#endif
#if (USBD_USE_HID_MOUSE == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_MOUSE_IN_EP, PCD_SNG_BUF, pma_track);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80072c0:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <USBD_LL_Init+0xa0>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	b299      	uxth	r1, r3
 80072c6:	89fb      	ldrh	r3, [r7, #14]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f7fa fef0 	bl	80020ae <HAL_PCDEx_PMAConfig>
    pma_track += 8;
 80072ce:	89fb      	ldrh	r3, [r7, #14]
 80072d0:	3308      	adds	r3, #8
 80072d2:	81fb      	strh	r3, [r7, #14]
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_KEYBOARD_IN_EP, PCD_SNG_BUF, pma_track);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80072da:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <USBD_LL_Init+0xa4>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	b299      	uxth	r1, r3
 80072e0:	89fb      	ldrh	r3, [r7, #14]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f7fa fee3 	bl	80020ae <HAL_PCDEx_PMAConfig>
    pma_track += 8;
 80072e8:	89fb      	ldrh	r3, [r7, #14]
 80072ea:	3308      	adds	r3, #8
 80072ec:	81fb      	strh	r3, [r7, #14]
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20000b9c 	.word	0x20000b9c
 80072fc:	20000318 	.word	0x20000318
 8007300:	2000019b 	.word	0x2000019b
 8007304:	200000be 	.word	0x200000be

08007308 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800731e:	4618      	mov	r0, r3
 8007320:	f7f9 fb64 	bl	80009ec <HAL_PCD_Start>
 8007324:	4603      	mov	r3, r0
 8007326:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	4618      	mov	r0, r3
 800732c:	f000 f918 	bl	8007560 <USBD_Get_USB_Status>
 8007330:	4603      	mov	r3, r0
 8007332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007334:	7bbb      	ldrb	r3, [r7, #14]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	4608      	mov	r0, r1
 8007348:	4611      	mov	r1, r2
 800734a:	461a      	mov	r2, r3
 800734c:	4603      	mov	r3, r0
 800734e:	70fb      	strb	r3, [r7, #3]
 8007350:	460b      	mov	r3, r1
 8007352:	70bb      	strb	r3, [r7, #2]
 8007354:	4613      	mov	r3, r2
 8007356:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8007366:	78bb      	ldrb	r3, [r7, #2]
 8007368:	883a      	ldrh	r2, [r7, #0]
 800736a:	78f9      	ldrb	r1, [r7, #3]
 800736c:	f7f9 fcde 	bl	8000d2c <HAL_PCD_EP_Open>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 f8f2 	bl	8007560 <USBD_Get_USB_Status>
 800737c:	4603      	mov	r3, r0
 800737e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007380:	7bbb      	ldrb	r3, [r7, #14]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80073a4:	78fa      	ldrb	r2, [r7, #3]
 80073a6:	4611      	mov	r1, r2
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7f9 fd25 	bl	8000df8 <HAL_PCD_EP_Close>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 f8d3 	bl	8007560 <USBD_Get_USB_Status>
 80073ba:	4603      	mov	r3, r0
 80073bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073be:	7bbb      	ldrb	r3, [r7, #14]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7f9 fdce 	bl	8000f88 <HAL_PCD_EP_SetStall>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 f8b4 	bl	8007560 <USBD_Get_USB_Status>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007420:	78fa      	ldrb	r2, [r7, #3]
 8007422:	4611      	mov	r1, r2
 8007424:	4618      	mov	r0, r3
 8007426:	f7f9 fe0f 	bl	8001048 <HAL_PCD_EP_ClrStall>
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	4618      	mov	r0, r3
 8007432:	f000 f895 	bl	8007560 <USBD_Get_USB_Status>
 8007436:	4603      	mov	r3, r0
 8007438:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800743a:	7bbb      	ldrb	r3, [r7, #14]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007456:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 8007458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800745c:	2b00      	cmp	r3, #0
 800745e:	da0c      	bge.n	800747a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	440b      	add	r3, r1
 8007474:	3302      	adds	r3, #2
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	e00b      	b.n	8007492 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007480:	68f9      	ldr	r1, [r7, #12]
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	440b      	add	r3, r1
 800748c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007490:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	bc80      	pop	{r7}
 800749a:	4770      	bx	lr

0800749c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80074b6:	78fa      	ldrb	r2, [r7, #3]
 80074b8:	4611      	mov	r1, r2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7f9 fc11 	bl	8000ce2 <HAL_PCD_SetAddress>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 f84a 	bl	8007560 <USBD_Get_USB_Status>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b086      	sub	sp, #24
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]
 80074e6:	460b      	mov	r3, r1
 80074e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80074f8:	7af9      	ldrb	r1, [r7, #11]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	f7f9 fd00 	bl	8000f02 <HAL_PCD_EP_Transmit>
 8007502:	4603      	mov	r3, r0
 8007504:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007506:	7dfb      	ldrb	r3, [r7, #23]
 8007508:	4618      	mov	r0, r3
 800750a:	f000 f829 	bl	8007560 <USBD_Get_USB_Status>
 800750e:	4603      	mov	r3, r0
 8007510:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007512:	7dbb      	ldrb	r3, [r7, #22]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	460b      	mov	r3, r1
 800752a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800753a:	7af9      	ldrb	r1, [r7, #11]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	f7f9 fca2 	bl	8000e88 <HAL_PCD_EP_Receive>
 8007544:	4603      	mov	r3, r0
 8007546:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007548:	7dfb      	ldrb	r3, [r7, #23]
 800754a:	4618      	mov	r0, r3
 800754c:	f000 f808 	bl	8007560 <USBD_Get_USB_Status>
 8007550:	4603      	mov	r3, r0
 8007552:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007554:	7dbb      	ldrb	r3, [r7, #22]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	2b03      	cmp	r3, #3
 8007572:	d817      	bhi.n	80075a4 <USBD_Get_USB_Status+0x44>
 8007574:	a201      	add	r2, pc, #4	; (adr r2, 800757c <USBD_Get_USB_Status+0x1c>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	0800758d 	.word	0x0800758d
 8007580:	08007593 	.word	0x08007593
 8007584:	08007599 	.word	0x08007599
 8007588:	0800759f 	.word	0x0800759f
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	73fb      	strb	r3, [r7, #15]
    break;
 8007590:	e00b      	b.n	80075aa <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 8007592:	2303      	movs	r3, #3
 8007594:	73fb      	strb	r3, [r7, #15]
    break;
 8007596:	e008      	b.n	80075aa <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
    break;
 800759c:	e005      	b.n	80075aa <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800759e:	2303      	movs	r3, #3
 80075a0:	73fb      	strb	r3, [r7, #15]
    break;
 80075a2:	e002      	b.n	80075aa <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 80075a4:	2303      	movs	r3, #3
 80075a6:	73fb      	strb	r3, [r7, #15]
    break;
 80075a8:	bf00      	nop
  }
  return usb_status;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop

080075b8 <__libc_init_array>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	2600      	movs	r6, #0
 80075bc:	4d0c      	ldr	r5, [pc, #48]	; (80075f0 <__libc_init_array+0x38>)
 80075be:	4c0d      	ldr	r4, [pc, #52]	; (80075f4 <__libc_init_array+0x3c>)
 80075c0:	1b64      	subs	r4, r4, r5
 80075c2:	10a4      	asrs	r4, r4, #2
 80075c4:	42a6      	cmp	r6, r4
 80075c6:	d109      	bne.n	80075dc <__libc_init_array+0x24>
 80075c8:	f000 f830 	bl	800762c <_init>
 80075cc:	2600      	movs	r6, #0
 80075ce:	4d0a      	ldr	r5, [pc, #40]	; (80075f8 <__libc_init_array+0x40>)
 80075d0:	4c0a      	ldr	r4, [pc, #40]	; (80075fc <__libc_init_array+0x44>)
 80075d2:	1b64      	subs	r4, r4, r5
 80075d4:	10a4      	asrs	r4, r4, #2
 80075d6:	42a6      	cmp	r6, r4
 80075d8:	d105      	bne.n	80075e6 <__libc_init_array+0x2e>
 80075da:	bd70      	pop	{r4, r5, r6, pc}
 80075dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80075e0:	4798      	blx	r3
 80075e2:	3601      	adds	r6, #1
 80075e4:	e7ee      	b.n	80075c4 <__libc_init_array+0xc>
 80075e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ea:	4798      	blx	r3
 80075ec:	3601      	adds	r6, #1
 80075ee:	e7f2      	b.n	80075d6 <__libc_init_array+0x1e>
 80075f0:	080076d8 	.word	0x080076d8
 80075f4:	080076d8 	.word	0x080076d8
 80075f8:	080076d8 	.word	0x080076d8
 80075fc:	080076dc 	.word	0x080076dc

08007600 <memcpy>:
 8007600:	440a      	add	r2, r1
 8007602:	4291      	cmp	r1, r2
 8007604:	f100 33ff 	add.w	r3, r0, #4294967295
 8007608:	d100      	bne.n	800760c <memcpy+0xc>
 800760a:	4770      	bx	lr
 800760c:	b510      	push	{r4, lr}
 800760e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007612:	4291      	cmp	r1, r2
 8007614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007618:	d1f9      	bne.n	800760e <memcpy+0xe>
 800761a:	bd10      	pop	{r4, pc}

0800761c <memset>:
 800761c:	4603      	mov	r3, r0
 800761e:	4402      	add	r2, r0
 8007620:	4293      	cmp	r3, r2
 8007622:	d100      	bne.n	8007626 <memset+0xa>
 8007624:	4770      	bx	lr
 8007626:	f803 1b01 	strb.w	r1, [r3], #1
 800762a:	e7f9      	b.n	8007620 <memset+0x4>

0800762c <_init>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr

08007638 <_fini>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr
