void mouse_keyboard_test_2(void)
{
	keyboardHID print_ar[]=
	{
			{0b00000100,0,0x62,0x00,0x00,0x00,0,0},
			{0b00000100,0,0x00,0x00,0x00,0x00,0,0},
			{0b00000100,0,0x5A,0x00,0x00,0x00,0,0},
			{0b00000100,0,0x00,0x00,0x00,0x00,0,0},
			{0b00000100,0,0x5A,0x00,0x00,0x00,0,0},
			{0b00000100,0,0x00,0x00,0x00,0x00,0,0},
			{0b00000100,0,0x5D,0x00,0x00,0x00,0,0},
			{0b00000000,0,0x00,0x00,0x00,0x00,0,0},
	};

	keyboardHID print_al[]=
		{
				{0b00000100,0,0x62,0x00,0x00,0x00,0,0},
				{0b00000100,0,0x00,0x00,0x00,0x00,0,0},
				{0b00000100,0,0x5A,0x00,0x00,0x00,0,0},
				{0b00000100,0,0x00,0x00,0x00,0x00,0,0},
				{0b00000100,0,0x5C,0x00,0x00,0x00,0,0},
				{0b00000100,0,0x00,0x00,0x00,0x00,0,0},
				{0b00000100,0,0x5C,0x00,0x00,0x00,0,0},
				{0b00000000,0,0x00,0x00,0x00,0x00,0,0},
		};

	keyboardHID print_al1[]=
		{
				{0,0,0x10,0x0E,0x08,0x28,0,0},
				{0,0,0,0,0,0,0,0}

		};

	uint8_t kbdRelease[8] = {0,0,0,0,0,0,0,0};

	mouseHID mousemove[4]={{0,10,0,0},{0,0,-10,0},{0,-10,0,0},{0,0,10,0}};

	 for (int i=0; i < 8; i++)
		 		  {
		 	 	 	 USBD_HID_Keybaord_SendReport(&hUsbDevice, &print_al[i], sizeof(print_al[i]));
		 	 	 	 HAL_Delay(50);
		 	 		 //USBD_HID_Keybaord_SendReport(&hUsbDevice, &kbdRelease, 8);
		 		  }

	 for (int i=0; i < 8; i++)
	 		 		  {
	 		 	 	 	 USBD_HID_Keybaord_SendReport(&hUsbDevice, &print_ar[i], sizeof(print_ar[i]));
	 		 	 	 	 HAL_Delay(50);
	 		 	 		 //USBD_HID_Keybaord_SendReport(&hUsbDevice, &kbdRelease, 8);
	 		 		  }

	 for (int y=0; y<4; y++)
	 	 	  {

	 	 		  for (int i=0; i < 30; i++)
	 	 		  {
	 	 			  HAL_Delay(50);
	 	 			  mousehid=mousemove[y];
	 	 			  USBD_HID_Mouse_SendReport(&hUsbDevice, &mousehid, sizeof (mousehid));
	 	 		  }

	 	 	  }

}



void mke_main_2(void)
{

	/*if (HAL_GPIO_ReadPin(CS_GPIO_Port,CS_Pin))
			{*/
				if (HAL_SPI_Receive(&hspi1,&spi_receive_buffer,sizeof(spi_receive_buffer),100)==HAL_OK)
				{
					target_state=spi_receive_buffer.target&OTG;
					current_state=check_state();

					if (target_state!=current_state)
					{
						if (target_state==OTG)
						{
							//HAL_Delay(500);
							HAL_GPIO_WritePin(OTG_GPIO_Port,OTG_Pin,GPIO_PIN_SET);
							HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
							button_click();
						}

						else
							{
								HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
								HAL_GPIO_WritePin(OTG_GPIO_Port,OTG_Pin,GPIO_PIN_RESET);
								HAL_Delay(1000);
								button_click();
							}

					}



					if (target_state==OTG)
					{
						if ((spi_receive_buffer.target&MOUSE)==MOUSE)
						{
							mousehid_copy(&mousehid,&spi_receive_buffer);
							USBD_HID_Mouse_SendReport(&hUsbDevice, &mousehid, sizeof (mousehid));
						}

						if ((spi_receive_buffer.target&KEYBOARD)==KEYBOARD)
						{
							keyboardhid_copy(&keyboardhid,&spi_receive_buffer);
							USBD_HID_Keybaord_SendReport(&hUsbDevice, &keyboardhid, sizeof(keyboardhid));
						}
					}
					//HAL_SPI_Transmit(&hspi1,&spi_receive_buffer.target,sizeof(spi_receive_buffer.target),10);
				}
			//}
}


					if ((spi_receive_buffer.target&CHECK)==CHECK)
					{
						spi_transmit_buffer=spi_transmit_buffer|CHECK;
						HAL_SPI_Transmit(&hspi1,&spi_transmit_buffer,sizeof(spi_transmit_buffer),10);
					}